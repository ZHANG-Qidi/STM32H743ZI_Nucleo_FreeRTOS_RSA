
STM32H743ZI_Nucleo_FreeRTOS_RSA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100b0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08010350  08010350  00020350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080107ac  080107ac  000207ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080107b4  080107b4  000207b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080107b8  080107b8  000207b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  080107bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005934  20000078  08010834  00050078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200059ac  08010834  000459ac  2**0
                  ALLOC
  9 .dma_buffer   00001000  38000000  38000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bdma_buffer  00000000  38001000  38001000  00051000  2**0
                  CONTENTS
 11 .dtcm         00000000  20005fb0  20005fb0  00051000  2**0
                  CONTENTS
 12 .itcm         00001e88  00000000  08010834  00040000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .lwip_sec     00040200  30000000  080126bc  00050000  2**2
                  ALLOC
 14 .RAM_D3_Z1    00000000  38000000  38000000  00051000  2**0
                  CONTENTS
 15 .RAM_D3_Z2    00000000  38002000  38002000  00051000  2**0
                  CONTENTS
 16 .RAM_D3_Z3    00000000  38004000  38004000  00051000  2**0
                  CONTENTS
 17 .RAM_D3_Z4    00000000  38006000  38006000  00051000  2**0
                  CONTENTS
 18 .RAM_D3_Z5    00000000  38008000  38008000  00051000  2**0
                  CONTENTS
 19 .RAM_D3_Z6    00000000  3800a000  3800a000  00051000  2**0
                  CONTENTS
 20 .RAM_D3_Z7    00000000  3800c000  3800c000  00051000  2**0
                  CONTENTS
 21 .RAM_D3_Z8    00000000  3800e000  3800e000  00051000  2**0
                  CONTENTS
 22 .ARM.attributes 0000002e  00000000  00000000  00051000  2**0
                  CONTENTS, READONLY
 23 .debug_info   00031885  00000000  00000000  0005102e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_abbrev 00005e0e  00000000  00000000  000828b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 00002108  00000000  00000000  000886c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_ranges 00001f00  00000000  00000000  0008a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macro  0003ee5a  00000000  00000000  0008c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line   0002defa  00000000  00000000  000cb52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_str    00179436  00000000  00000000  000f9424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .comment      00000050  00000000  00000000  0027285a  2**0
                  CONTENTS, READONLY
 31 .debug_frame  000099f0  00000000  00000000  002728ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000078 	.word	0x20000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010300 	.word	0x08010300

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000007c 	.word	0x2000007c
 80002dc:	08010300 	.word	0x08010300

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_DMA_Init+0x4c>)
 800069c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006a0:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <MX_DMA_Init+0x4c>)
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <MX_DMA_Init+0x4c>)
 80006ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2105      	movs	r1, #5
 80006bc:	200b      	movs	r0, #11
 80006be:	f001 fd59 	bl	8002174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006c2:	200b      	movs	r0, #11
 80006c4:	f001 fd70 	bl	80021a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2105      	movs	r1, #5
 80006cc:	200c      	movs	r0, #12
 80006ce:	f001 fd51 	bl	8002174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006d2:	200c      	movs	r0, #12
 80006d4:	f001 fd68 	bl	80021a8 <HAL_NVIC_EnableIRQ>

}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	58024400 	.word	0x58024400

080006e4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_ETH_Init+0x80>)
 80006ea:	4a1f      	ldr	r2, [pc, #124]	; (8000768 <MX_ETH_Init+0x84>)
 80006ec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ETH_Init+0x88>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_ETH_Init+0x88>)
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_ETH_Init+0x88>)
 80006fc:	22e1      	movs	r2, #225	; 0xe1
 80006fe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_ETH_Init+0x88>)
 8000702:	2200      	movs	r2, #0
 8000704:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_ETH_Init+0x88>)
 8000708:	2200      	movs	r2, #0
 800070a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_ETH_Init+0x88>)
 800070e:	2200      	movs	r2, #0
 8000710:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_ETH_Init+0x80>)
 8000714:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_ETH_Init+0x88>)
 8000716:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_ETH_Init+0x80>)
 800071a:	2201      	movs	r2, #1
 800071c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_ETH_Init+0x80>)
 8000720:	4a13      	ldr	r2, [pc, #76]	; (8000770 <MX_ETH_Init+0x8c>)
 8000722:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_ETH_Init+0x80>)
 8000726:	4a13      	ldr	r2, [pc, #76]	; (8000774 <MX_ETH_Init+0x90>)
 8000728:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_ETH_Init+0x80>)
 800072c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000730:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000732:	480c      	ldr	r0, [pc, #48]	; (8000764 <MX_ETH_Init+0x80>)
 8000734:	f004 fc0a 	bl	8004f4c <HAL_ETH_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800073e:	f000 fb71 	bl	8000e24 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000742:	2234      	movs	r2, #52	; 0x34
 8000744:	2100      	movs	r1, #0
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <MX_ETH_Init+0x94>)
 8000748:	f00d fea2 	bl	800e490 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_ETH_Init+0x94>)
 800074e:	2221      	movs	r2, #33	; 0x21
 8000750:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_ETH_Init+0x94>)
 8000754:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000758:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_ETH_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200000c8 	.word	0x200000c8
 8000768:	40028000 	.word	0x40028000
 800076c:	20000150 	.word	0x20000150
 8000770:	30040060 	.word	0x30040060
 8000774:	30040000 	.word	0x30040000
 8000778:	20000094 	.word	0x20000094

0800077c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08e      	sub	sp, #56	; 0x38
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a5d      	ldr	r2, [pc, #372]	; (8000910 <HAL_ETH_MspInit+0x194>)
 800079a:	4293      	cmp	r3, r2
 800079c:	f040 80b3 	bne.w	8000906 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80007a0:	4b5c      	ldr	r3, [pc, #368]	; (8000914 <HAL_ETH_MspInit+0x198>)
 80007a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007a6:	4a5b      	ldr	r2, [pc, #364]	; (8000914 <HAL_ETH_MspInit+0x198>)
 80007a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007b0:	4b58      	ldr	r3, [pc, #352]	; (8000914 <HAL_ETH_MspInit+0x198>)
 80007b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007ba:	623b      	str	r3, [r7, #32]
 80007bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80007be:	4b55      	ldr	r3, [pc, #340]	; (8000914 <HAL_ETH_MspInit+0x198>)
 80007c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007c4:	4a53      	ldr	r2, [pc, #332]	; (8000914 <HAL_ETH_MspInit+0x198>)
 80007c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007ce:	4b51      	ldr	r3, [pc, #324]	; (8000914 <HAL_ETH_MspInit+0x198>)
 80007d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007d8:	61fb      	str	r3, [r7, #28]
 80007da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80007dc:	4b4d      	ldr	r3, [pc, #308]	; (8000914 <HAL_ETH_MspInit+0x198>)
 80007de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007e2:	4a4c      	ldr	r2, [pc, #304]	; (8000914 <HAL_ETH_MspInit+0x198>)
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007ec:	4b49      	ldr	r3, [pc, #292]	; (8000914 <HAL_ETH_MspInit+0x198>)
 80007ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b46      	ldr	r3, [pc, #280]	; (8000914 <HAL_ETH_MspInit+0x198>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000800:	4a44      	ldr	r2, [pc, #272]	; (8000914 <HAL_ETH_MspInit+0x198>)
 8000802:	f043 0304 	orr.w	r3, r3, #4
 8000806:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800080a:	4b42      	ldr	r3, [pc, #264]	; (8000914 <HAL_ETH_MspInit+0x198>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000810:	f003 0304 	and.w	r3, r3, #4
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b3e      	ldr	r3, [pc, #248]	; (8000914 <HAL_ETH_MspInit+0x198>)
 800081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081e:	4a3d      	ldr	r2, [pc, #244]	; (8000914 <HAL_ETH_MspInit+0x198>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000828:	4b3a      	ldr	r3, [pc, #232]	; (8000914 <HAL_ETH_MspInit+0x198>)
 800082a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b37      	ldr	r3, [pc, #220]	; (8000914 <HAL_ETH_MspInit+0x198>)
 8000838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083c:	4a35      	ldr	r2, [pc, #212]	; (8000914 <HAL_ETH_MspInit+0x198>)
 800083e:	f043 0302 	orr.w	r3, r3, #2
 8000842:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000846:	4b33      	ldr	r3, [pc, #204]	; (8000914 <HAL_ETH_MspInit+0x198>)
 8000848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084c:	f003 0302 	and.w	r3, r3, #2
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000854:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <HAL_ETH_MspInit+0x198>)
 8000856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085a:	4a2e      	ldr	r2, [pc, #184]	; (8000914 <HAL_ETH_MspInit+0x198>)
 800085c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000860:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000864:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <HAL_ETH_MspInit+0x198>)
 8000866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000872:	2332      	movs	r3, #50	; 0x32
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000882:	230b      	movs	r3, #11
 8000884:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088a:	4619      	mov	r1, r3
 800088c:	4822      	ldr	r0, [pc, #136]	; (8000918 <HAL_ETH_MspInit+0x19c>)
 800088e:	f005 f8b9 	bl	8005a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000892:	2386      	movs	r3, #134	; 0x86
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a2:	230b      	movs	r3, #11
 80008a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	4619      	mov	r1, r3
 80008ac:	481b      	ldr	r0, [pc, #108]	; (800091c <HAL_ETH_MspInit+0x1a0>)
 80008ae:	f005 f8a9 	bl	8005a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c4:	230b      	movs	r3, #11
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008cc:	4619      	mov	r1, r3
 80008ce:	4814      	ldr	r0, [pc, #80]	; (8000920 <HAL_ETH_MspInit+0x1a4>)
 80008d0:	f005 f898 	bl	8005a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e6:	230b      	movs	r3, #11
 80008e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ee:	4619      	mov	r1, r3
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <HAL_ETH_MspInit+0x1a8>)
 80008f2:	f005 f887 	bl	8005a04 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2105      	movs	r1, #5
 80008fa:	203d      	movs	r0, #61	; 0x3d
 80008fc:	f001 fc3a 	bl	8002174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000900:	203d      	movs	r0, #61	; 0x3d
 8000902:	f001 fc51 	bl	80021a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000906:	bf00      	nop
 8000908:	3738      	adds	r7, #56	; 0x38
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40028000 	.word	0x40028000
 8000914:	58024400 	.word	0x58024400
 8000918:	58020800 	.word	0x58020800
 800091c:	58020000 	.word	0x58020000
 8000920:	58020400 	.word	0x58020400
 8000924:	58021800 	.word	0x58021800

08000928 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800092c:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <MX_FREERTOS_Init+0x38>)
 800092e:	2100      	movs	r1, #0
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <MX_FREERTOS_Init+0x3c>)
 8000932:	f00a ff23 	bl	800b77c <osThreadNew>
 8000936:	4603      	mov	r3, r0
 8000938:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <MX_FREERTOS_Init+0x40>)
 800093a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800093c:	4a0b      	ldr	r2, [pc, #44]	; (800096c <MX_FREERTOS_Init+0x44>)
 800093e:	2100      	movs	r1, #0
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <MX_FREERTOS_Init+0x48>)
 8000942:	f00a ff1b 	bl	800b77c <osThreadNew>
 8000946:	4603      	mov	r3, r0
 8000948:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <MX_FREERTOS_Init+0x4c>)
 800094a:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800094c:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <MX_FREERTOS_Init+0x50>)
 800094e:	2100      	movs	r1, #0
 8000950:	480a      	ldr	r0, [pc, #40]	; (800097c <MX_FREERTOS_Init+0x54>)
 8000952:	f00a ff13 	bl	800b77c <osThreadNew>
 8000956:	4603      	mov	r3, r0
 8000958:	4a09      	ldr	r2, [pc, #36]	; (8000980 <MX_FREERTOS_Init+0x58>)
 800095a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	08010464 	.word	0x08010464
 8000964:	08000985 	.word	0x08000985
 8000968:	20000158 	.word	0x20000158
 800096c:	08010488 	.word	0x08010488
 8000970:	080009a5 	.word	0x080009a5
 8000974:	2000015c 	.word	0x2000015c
 8000978:	080104ac 	.word	0x080104ac
 800097c:	08000a0d 	.word	0x08000a0d
 8000980:	20000160 	.word	0x20000160

08000984 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
    /* Infinite loop */
    for (;;) {
        HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800098c:	2101      	movs	r1, #1
 800098e:	4804      	ldr	r0, [pc, #16]	; (80009a0 <StartDefaultTask+0x1c>)
 8000990:	f005 fa01 	bl	8005d96 <HAL_GPIO_TogglePin>
        osDelay(1000);
 8000994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000998:	f00a ff82 	bl	800b8a0 <osDelay>
        HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800099c:	e7f6      	b.n	800098c <StartDefaultTask+0x8>
 800099e:	bf00      	nop
 80009a0:	58020400 	.word	0x58020400

080009a4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
    HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80009ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b0:	4814      	ldr	r0, [pc, #80]	; (8000a04 <StartTask02+0x60>)
 80009b2:	f005 f9f0 	bl	8005d96 <HAL_GPIO_TogglePin>
    rsa_init_new();
 80009b6:	f00f fcb7 	bl	8010328 <__rsa_init_new_veneer>
    prime_random();
 80009ba:	f00f fcc5 	bl	8010348 <__prime_random_veneer>
    rsa_init();
 80009be:	f00f fcbb 	bl	8010338 <__rsa_init_veneer>
    rsa_print_key();
 80009c2:	f000 ff79 	bl	80018b8 <rsa_print_key>
    HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80009c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ca:	480e      	ldr	r0, [pc, #56]	; (8000a04 <StartTask02+0x60>)
 80009cc:	f005 f9e3 	bl	8005d96 <HAL_GPIO_TogglePin>
    char *str = calloc(512, sizeof(char));
 80009d0:	2101      	movs	r1, #1
 80009d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009d6:	f00d fc01 	bl	800e1dc <calloc>
 80009da:	4603      	mov	r3, r0
 80009dc:	60fb      	str	r3, [r7, #12]
    /* Infinite loop */
    for (;;) {
        usart3_scanf("%[^\n]", str);
 80009de:	68f9      	ldr	r1, [r7, #12]
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <StartTask02+0x64>)
 80009e2:	f001 fa45 	bl	8001e70 <usart3_scanf>
        HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	4806      	ldr	r0, [pc, #24]	; (8000a04 <StartTask02+0x60>)
 80009ea:	f005 f9d4 	bl	8005d96 <HAL_GPIO_TogglePin>
        rsa_usart(str);
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f000 fef6 	bl	80017e0 <rsa_usart>
        HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80009f4:	2180      	movs	r1, #128	; 0x80
 80009f6:	4803      	ldr	r0, [pc, #12]	; (8000a04 <StartTask02+0x60>)
 80009f8:	f005 f9cd 	bl	8005d96 <HAL_GPIO_TogglePin>
        osDelay(1);
 80009fc:	2001      	movs	r0, #1
 80009fe:	f00a ff4f 	bl	800b8a0 <osDelay>
        usart3_scanf("%[^\n]", str);
 8000a02:	e7ec      	b.n	80009de <StartTask02+0x3a>
 8000a04:	58020400 	.word	0x58020400
 8000a08:	08010374 	.word	0x08010374

08000a0c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a14:	2001      	movs	r0, #1
 8000a16:	f00a ff43 	bl	800b8a0 <osDelay>
 8000a1a:	e7fb      	b.n	8000a14 <StartTask03+0x8>

08000a1c <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	4b50      	ldr	r3, [pc, #320]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a38:	4a4e      	ldr	r2, [pc, #312]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a42:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	61bb      	str	r3, [r7, #24]
 8000a4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a50:	4b48      	ldr	r3, [pc, #288]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a56:	4a47      	ldr	r2, [pc, #284]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a60:	4b44      	ldr	r3, [pc, #272]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b41      	ldr	r3, [pc, #260]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	4a3f      	ldr	r2, [pc, #252]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7e:	4b3d      	ldr	r3, [pc, #244]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8c:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a92:	4a38      	ldr	r2, [pc, #224]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9c:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab0:	4a30      	ldr	r2, [pc, #192]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000ab2:	f043 0308 	orr.w	r3, r3, #8
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aba:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	f003 0308 	and.w	r3, r3, #8
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	4a29      	ldr	r2, [pc, #164]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad8:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <MX_GPIO_Init+0x158>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000aec:	4822      	ldr	r0, [pc, #136]	; (8000b78 <MX_GPIO_Init+0x15c>)
 8000aee:	f005 f939 	bl	8005d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2140      	movs	r1, #64	; 0x40
 8000af6:	4821      	ldr	r0, [pc, #132]	; (8000b7c <MX_GPIO_Init+0x160>)
 8000af8:	f005 f934 	bl	8005d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	481b      	ldr	r0, [pc, #108]	; (8000b80 <MX_GPIO_Init+0x164>)
 8000b14:	f004 ff76 	bl	8005a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b18:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4811      	ldr	r0, [pc, #68]	; (8000b78 <MX_GPIO_Init+0x15c>)
 8000b32:	f004 ff67 	bl	8005a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b36:	2340      	movs	r3, #64	; 0x40
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <MX_GPIO_Init+0x160>)
 8000b4e:	f004 ff59 	bl	8005a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_GPIO_Init+0x160>)
 8000b66:	f004 ff4d 	bl	8005a04 <HAL_GPIO_Init>

}
 8000b6a:	bf00      	nop
 8000b6c:	3730      	adds	r7, #48	; 0x30
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	58024400 	.word	0x58024400
 8000b78:	58020400 	.word	0x58020400
 8000b7c:	58021800 	.word	0x58021800
 8000b80:	58020800 	.word	0x58020800

08000b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b8a:	f000 f8fd 	bl	8000d88 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b8e:	4b3e      	ldr	r3, [pc, #248]	; (8000c88 <main+0x104>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d11b      	bne.n	8000bd2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b9a:	f3bf 8f4f 	dsb	sy
}
 8000b9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ba0:	f3bf 8f6f 	isb	sy
}
 8000ba4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ba6:	4b38      	ldr	r3, [pc, #224]	; (8000c88 <main+0x104>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000bae:	f3bf 8f4f 	dsb	sy
}
 8000bb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bb4:	f3bf 8f6f 	isb	sy
}
 8000bb8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000bba:	4b33      	ldr	r3, [pc, #204]	; (8000c88 <main+0x104>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	4a32      	ldr	r2, [pc, #200]	; (8000c88 <main+0x104>)
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bc6:	f3bf 8f4f 	dsb	sy
}
 8000bca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bcc:	f3bf 8f6f 	isb	sy
}
 8000bd0:	e000      	b.n	8000bd4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000bd2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000bd4:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <main+0x104>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d138      	bne.n	8000c52 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <main+0x104>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000be8:	f3bf 8f4f 	dsb	sy
}
 8000bec:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <main+0x104>)
 8000bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bf4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	0b5b      	lsrs	r3, r3, #13
 8000bfa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bfe:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	08db      	lsrs	r3, r3, #3
 8000c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c08:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	015a      	lsls	r2, r3, #5
 8000c0e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000c12:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c18:	491b      	ldr	r1, [pc, #108]	; (8000c88 <main+0x104>)
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	1e5a      	subs	r2, r3, #1
 8000c24:	607a      	str	r2, [r7, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1ef      	bne.n	8000c0a <main+0x86>
    } while(sets-- != 0U);
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	1e5a      	subs	r2, r3, #1
 8000c2e:	60ba      	str	r2, [r7, #8]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1e5      	bne.n	8000c00 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <main+0x104>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <main+0x104>)
 8000c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c44:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c46:	f3bf 8f4f 	dsb	sy
}
 8000c4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c4c:	f3bf 8f6f 	isb	sy
}
 8000c50:	e000      	b.n	8000c54 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c52:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f001 f936 	bl	8001ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f818 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5c:	f7ff fede 	bl	8000a1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c60:	f7ff fd18 	bl	8000694 <MX_DMA_Init>
  MX_ETH_Init();
 8000c64:	f7ff fd3e 	bl	80006e4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000c68:	f000 fb52 	bl	8001310 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c6c:	f000 fc6e 	bl	800154c <MX_USB_OTG_FS_PCD_Init>
  MX_RNG_Init();
 8000c70:	f000 f8de 	bl	8000e30 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  HAL_USART3_ENABLE_IT_IDLE_Receive_DMA();
 8000c74:	f000 fea2 	bl	80019bc <HAL_USART3_ENABLE_IT_IDLE_Receive_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000c78:	f00a fd36 	bl	800b6e8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000c7c:	f7ff fe54 	bl	8000928 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000c80:	f00a fd56 	bl	800b730 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <main+0x100>
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b09c      	sub	sp, #112	; 0x70
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	224c      	movs	r2, #76	; 0x4c
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f00d fbf8 	bl	800e490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2220      	movs	r2, #32
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f00d fbf2 	bl	800e490 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cac:	2002      	movs	r0, #2
 8000cae:	f005 f9d5 	bl	800605c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <SystemClock_Config+0xf4>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	4a31      	ldr	r2, [pc, #196]	; (8000d80 <SystemClock_Config+0xf4>)
 8000cbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cc0:	6193      	str	r3, [r2, #24]
 8000cc2:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <SystemClock_Config+0xf4>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <SystemClock_Config+0xf8>)
 8000cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd0:	4a2c      	ldr	r2, [pc, #176]	; (8000d84 <SystemClock_Config+0xf8>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <SystemClock_Config+0xf8>)
 8000cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce4:	bf00      	nop
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <SystemClock_Config+0xf4>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cf2:	d1f8      	bne.n	8000ce6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000cf4:	2321      	movs	r3, #33	; 0x21
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cf8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d06:	2302      	movs	r3, #2
 8000d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 480;
 8000d0e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000d12:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000d20:	2304      	movs	r3, #4
 8000d22:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4618      	mov	r0, r3
 8000d32:	f005 f9dd 	bl	80060f0 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d3c:	f000 f872 	bl	8000e24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	233f      	movs	r3, #63	; 0x3f
 8000d42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d44:	2303      	movs	r3, #3
 8000d46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d50:	2340      	movs	r3, #64	; 0x40
 8000d52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d54:	2340      	movs	r3, #64	; 0x40
 8000d56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d5e:	2340      	movs	r3, #64	; 0x40
 8000d60:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2104      	movs	r1, #4
 8000d66:	4618      	mov	r0, r3
 8000d68:	f005 fdf0 	bl	800694c <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000d72:	f000 f857 	bl	8000e24 <Error_Handler>
  }
}
 8000d76:	bf00      	nop
 8000d78:	3770      	adds	r7, #112	; 0x70
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58024800 	.word	0x58024800
 8000d84:	58000400 	.word	0x58000400

08000d88 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d9a:	f001 fa13 	bl	80021c4 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MPU_Config+0x74>)
 8000da8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000daa:	230e      	movs	r3, #14
 8000dac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000db6:	2303      	movs	r3, #3
 8000db8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 fa31 	bl	8002234 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000dd6:	2307      	movs	r3, #7
 8000dd8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000dde:	2301      	movs	r3, #1
 8000de0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000de2:	2301      	movs	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000de6:	463b      	mov	r3, r7
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 fa23 	bl	8002234 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dee:	2004      	movs	r0, #4
 8000df0:	f001 fa00 	bl	80021f4 <HAL_MPU_Enable>

}
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	30040000 	.word	0x30040000

08000e00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d101      	bne.n	8000e16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e12:	f001 f893 	bl	8001f3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40001000 	.word	0x40001000

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <Error_Handler+0x8>
	...

08000e30 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <MX_RNG_Init+0x24>)
 8000e36:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <MX_RNG_Init+0x28>)
 8000e38:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_RNG_Init+0x24>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_RNG_Init+0x24>)
 8000e42:	f007 fcb9 	bl	80087b8 <HAL_RNG_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000e4c:	f7ff ffea 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000164 	.word	0x20000164
 8000e58:	48021800 	.word	0x48021800

08000e5c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0b2      	sub	sp, #200	; 0xc8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	22bc      	movs	r2, #188	; 0xbc
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f00d fb0f 	bl	800e490 <memset>
  if(rngHandle->Instance==RNG)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <HAL_RNG_MspInit+0x68>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d11e      	bne.n	8000eba <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e80:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f006 f92b 	bl	80070e8 <HAL_RCCEx_PeriphCLKConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000e98:	f7ff ffc4 	bl	8000e24 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_RNG_MspInit+0x6c>)
 8000e9e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000ea2:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <HAL_RNG_MspInit+0x6c>)
 8000ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_RNG_MspInit+0x6c>)
 8000eae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000eba:	bf00      	nop
 8000ebc:	37c8      	adds	r7, #200	; 0xc8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	48021800 	.word	0x48021800
 8000ec8:	58024400 	.word	0x58024400

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_MspInit+0x38>)
 8000ed4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_MspInit+0x38>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_MspInit+0x38>)
 8000ee4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f06f 0001 	mvn.w	r0, #1
 8000ef8:	f001 f93c 	bl	8002174 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	58024400 	.word	0x58024400

08000f08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b090      	sub	sp, #64	; 0x40
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b0f      	cmp	r3, #15
 8000f14:	d827      	bhi.n	8000f66 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000f16:	2200      	movs	r2, #0
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	2036      	movs	r0, #54	; 0x36
 8000f1c:	f001 f92a 	bl	8002174 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f20:	2036      	movs	r0, #54	; 0x36
 8000f22:	f001 f941 	bl	80021a8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000f26:	4a29      	ldr	r2, [pc, #164]	; (8000fcc <HAL_InitTick+0xc4>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f2c:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <HAL_InitTick+0xc8>)
 8000f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f32:	4a27      	ldr	r2, [pc, #156]	; (8000fd0 <HAL_InitTick+0xc8>)
 8000f34:	f043 0310 	orr.w	r3, r3, #16
 8000f38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f3c:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <HAL_InitTick+0xc8>)
 8000f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f4a:	f107 0210 	add.w	r2, r7, #16
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f006 f885 	bl	8007064 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d106      	bne.n	8000f72 <HAL_InitTick+0x6a>
 8000f64:	e001      	b.n	8000f6a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e02b      	b.n	8000fc2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f6a:	f006 f84f 	bl	800700c <HAL_RCC_GetPCLK1Freq>
 8000f6e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000f70:	e004      	b.n	8000f7c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f72:	f006 f84b 	bl	800700c <HAL_RCC_GetPCLK1Freq>
 8000f76:	4603      	mov	r3, r0
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f7e:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <HAL_InitTick+0xcc>)
 8000f80:	fba2 2303 	umull	r2, r3, r2, r3
 8000f84:	0c9b      	lsrs	r3, r3, #18
 8000f86:	3b01      	subs	r3, #1
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HAL_InitTick+0xd0>)
 8000f8c:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <HAL_InitTick+0xd4>)
 8000f8e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_InitTick+0xd0>)
 8000f92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f96:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f98:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <HAL_InitTick+0xd0>)
 8000f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_InitTick+0xd0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_InitTick+0xd0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000faa:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <HAL_InitTick+0xd0>)
 8000fac:	f007 fcbc 	bl	8008928 <HAL_TIM_Base_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d104      	bne.n	8000fc0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <HAL_InitTick+0xd0>)
 8000fb8:	f007 fd18 	bl	80089ec <HAL_TIM_Base_Start_IT>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	e000      	b.n	8000fc2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3740      	adds	r7, #64	; 0x40
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	58024400 	.word	0x58024400
 8000fd4:	431bde83 	.word	0x431bde83
 8000fd8:	20000178 	.word	0x20000178
 8000fdc:	40001000 	.word	0x40001000

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <UsageFault_Handler+0x4>

08000ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <DMA1_Stream0_IRQHandler+0x10>)
 8001012:	f002 fc7d 	bl	8003910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000258 	.word	0x20000258

08001020 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <DMA1_Stream1_IRQHandler+0x10>)
 8001026:	f002 fc73 	bl	8003910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200002d0 	.word	0x200002d0

08001034 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <USART3_IRQHandler+0x14>)
 800103a:	f008 f91b 	bl	8009274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_USART3_IdleCallback();
 800103e:	f000 fcd7 	bl	80019f0 <HAL_USART3_IdleCallback>

  /* USER CODE END USART3_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200001c8 	.word	0x200001c8

0800104c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <TIM6_DAC_IRQHandler+0x10>)
 8001052:	f007 fd43 	bl	8008adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000178 	.word	0x20000178

08001060 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <ETH_IRQHandler+0x10>)
 8001066:	f004 f84d 	bl	8005104 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000c8 	.word	0x200000c8

08001074 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	return 1;
 8001078:	2301      	movs	r3, #1
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <_kill>:

int _kill(int pid, int sig)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800108e:	f00d f8ad 	bl	800e1ec <__errno>
 8001092:	4603      	mov	r3, r0
 8001094:	2216      	movs	r2, #22
 8001096:	601a      	str	r2, [r3, #0]
	return -1;
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_exit>:

void _exit (int status)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ffe7 	bl	8001084 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010b6:	e7fe      	b.n	80010b6 <_exit+0x12>

080010b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	e00a      	b.n	80010e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ca:	f3af 8000 	nop.w
 80010ce:	4601      	mov	r1, r0
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	b2ca      	uxtb	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbf0      	blt.n	80010ca <_read+0x12>
	}

return len;
 80010e8:	687b      	ldr	r3, [r7, #4]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e009      	b.n	8001118 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	60ba      	str	r2, [r7, #8]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbf1      	blt.n	8001104 <_write+0x12>
	}
	return len;
 8001120:	687b      	ldr	r3, [r7, #4]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_close>:

int _close(int file)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
	return -1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001152:	605a      	str	r2, [r3, #4]
	return 0;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <_isatty>:

int _isatty(int file)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	return 1;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
	return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800119c:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <_sbrk+0x5c>)
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <_sbrk+0x60>)
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <_sbrk+0x64>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <_sbrk+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d207      	bcs.n	80011d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c4:	f00d f812 	bl	800e1ec <__errno>
 80011c8:	4603      	mov	r3, r0
 80011ca:	220c      	movs	r2, #12
 80011cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	e009      	b.n	80011e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <_sbrk+0x64>)
 80011e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20020000 	.word	0x20020000
 80011f4:	00000400 	.word	0x00000400
 80011f8:	200001c4 	.word	0x200001c4
 80011fc:	200059b0 	.word	0x200059b0

08001200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001204:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <SystemInit+0xe4>)
 8001206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120a:	4a36      	ldr	r2, [pc, #216]	; (80012e4 <SystemInit+0xe4>)
 800120c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001214:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <SystemInit+0xe8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	2b06      	cmp	r3, #6
 800121e:	d807      	bhi.n	8001230 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001220:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <SystemInit+0xe8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f023 030f 	bic.w	r3, r3, #15
 8001228:	4a2f      	ldr	r2, [pc, #188]	; (80012e8 <SystemInit+0xe8>)
 800122a:	f043 0307 	orr.w	r3, r3, #7
 800122e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001230:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <SystemInit+0xec>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a2d      	ldr	r2, [pc, #180]	; (80012ec <SystemInit+0xec>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800123c:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <SystemInit+0xec>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001242:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <SystemInit+0xec>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4929      	ldr	r1, [pc, #164]	; (80012ec <SystemInit+0xec>)
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <SystemInit+0xf0>)
 800124a:	4013      	ands	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <SystemInit+0xe8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d007      	beq.n	800126a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <SystemInit+0xe8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f023 030f 	bic.w	r3, r3, #15
 8001262:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <SystemInit+0xe8>)
 8001264:	f043 0307 	orr.w	r3, r3, #7
 8001268:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <SystemInit+0xec>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <SystemInit+0xec>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <SystemInit+0xec>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <SystemInit+0xec>)
 800127e:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <SystemInit+0xf4>)
 8001280:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <SystemInit+0xec>)
 8001284:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <SystemInit+0xf8>)
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <SystemInit+0xec>)
 800128a:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <SystemInit+0xfc>)
 800128c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800128e:	4b17      	ldr	r3, [pc, #92]	; (80012ec <SystemInit+0xec>)
 8001290:	2200      	movs	r2, #0
 8001292:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <SystemInit+0xec>)
 8001296:	4a19      	ldr	r2, [pc, #100]	; (80012fc <SystemInit+0xfc>)
 8001298:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <SystemInit+0xec>)
 800129c:	2200      	movs	r2, #0
 800129e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <SystemInit+0xec>)
 80012a2:	4a16      	ldr	r2, [pc, #88]	; (80012fc <SystemInit+0xfc>)
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <SystemInit+0xec>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <SystemInit+0xec>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <SystemInit+0xec>)
 80012b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <SystemInit+0xec>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <SystemInit+0x100>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <SystemInit+0x104>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012ca:	d202      	bcs.n	80012d2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <SystemInit+0x108>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <SystemInit+0x10c>)
 80012d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80012d8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00
 80012e8:	52002000 	.word	0x52002000
 80012ec:	58024400 	.word	0x58024400
 80012f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80012f4:	02020200 	.word	0x02020200
 80012f8:	01ff0000 	.word	0x01ff0000
 80012fc:	01010280 	.word	0x01010280
 8001300:	5c001000 	.word	0x5c001000
 8001304:	ffff0000 	.word	0xffff0000
 8001308:	51008108 	.word	0x51008108
 800130c:	52004000 	.word	0x52004000

08001310 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <MX_USART3_UART_Init+0x90>)
 8001316:	4a23      	ldr	r2, [pc, #140]	; (80013a4 <MX_USART3_UART_Init+0x94>)
 8001318:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <MX_USART3_UART_Init+0x90>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <MX_USART3_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <MX_USART3_UART_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_USART3_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_USART3_UART_Init+0x90>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_USART3_UART_Init+0x90>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_USART3_UART_Init+0x90>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <MX_USART3_UART_Init+0x90>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_USART3_UART_Init+0x90>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <MX_USART3_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001358:	4811      	ldr	r0, [pc, #68]	; (80013a0 <MX_USART3_UART_Init+0x90>)
 800135a:	f007 fdbf 	bl	8008edc <HAL_UART_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001364:	f7ff fd5e 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001368:	2100      	movs	r1, #0
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <MX_USART3_UART_Init+0x90>)
 800136c:	f009 fdaa 	bl	800aec4 <HAL_UARTEx_SetTxFifoThreshold>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001376:	f7ff fd55 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800137a:	2100      	movs	r1, #0
 800137c:	4808      	ldr	r0, [pc, #32]	; (80013a0 <MX_USART3_UART_Init+0x90>)
 800137e:	f009 fddf 	bl	800af40 <HAL_UARTEx_SetRxFifoThreshold>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001388:	f7ff fd4c 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <MX_USART3_UART_Init+0x90>)
 800138e:	f009 fd60 	bl	800ae52 <HAL_UARTEx_DisableFifoMode>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001398:	f7ff fd44 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200001c8 	.word	0x200001c8
 80013a4:	40004800 	.word	0x40004800

080013a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b0b8      	sub	sp, #224	; 0xe0
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	22bc      	movs	r2, #188	; 0xbc
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00d f861 	bl	800e490 <memset>
  if(uartHandle->Instance==USART3)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a57      	ldr	r2, [pc, #348]	; (8001530 <HAL_UART_MspInit+0x188>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	f040 80a6 	bne.w	8001526 <HAL_UART_MspInit+0x17e>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013da:	2302      	movs	r3, #2
 80013dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013de:	2300      	movs	r3, #0
 80013e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4618      	mov	r0, r3
 80013ea:	f005 fe7d 	bl	80070e8 <HAL_RCCEx_PeriphCLKConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80013f4:	f7ff fd16 	bl	8000e24 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013f8:	4b4e      	ldr	r3, [pc, #312]	; (8001534 <HAL_UART_MspInit+0x18c>)
 80013fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013fe:	4a4d      	ldr	r2, [pc, #308]	; (8001534 <HAL_UART_MspInit+0x18c>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001404:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001408:	4b4a      	ldr	r3, [pc, #296]	; (8001534 <HAL_UART_MspInit+0x18c>)
 800140a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800140e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001416:	4b47      	ldr	r3, [pc, #284]	; (8001534 <HAL_UART_MspInit+0x18c>)
 8001418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141c:	4a45      	ldr	r2, [pc, #276]	; (8001534 <HAL_UART_MspInit+0x18c>)
 800141e:	f043 0308 	orr.w	r3, r3, #8
 8001422:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001426:	4b43      	ldr	r3, [pc, #268]	; (8001534 <HAL_UART_MspInit+0x18c>)
 8001428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001434:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001438:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800144e:	2307      	movs	r3, #7
 8001450:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001454:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001458:	4619      	mov	r1, r3
 800145a:	4837      	ldr	r0, [pc, #220]	; (8001538 <HAL_UART_MspInit+0x190>)
 800145c:	f004 fad2 	bl	8005a04 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001460:	4b36      	ldr	r3, [pc, #216]	; (800153c <HAL_UART_MspInit+0x194>)
 8001462:	4a37      	ldr	r2, [pc, #220]	; (8001540 <HAL_UART_MspInit+0x198>)
 8001464:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001466:	4b35      	ldr	r3, [pc, #212]	; (800153c <HAL_UART_MspInit+0x194>)
 8001468:	222d      	movs	r2, #45	; 0x2d
 800146a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800146c:	4b33      	ldr	r3, [pc, #204]	; (800153c <HAL_UART_MspInit+0x194>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001472:	4b32      	ldr	r3, [pc, #200]	; (800153c <HAL_UART_MspInit+0x194>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001478:	4b30      	ldr	r3, [pc, #192]	; (800153c <HAL_UART_MspInit+0x194>)
 800147a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001480:	4b2e      	ldr	r3, [pc, #184]	; (800153c <HAL_UART_MspInit+0x194>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001486:	4b2d      	ldr	r3, [pc, #180]	; (800153c <HAL_UART_MspInit+0x194>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800148c:	4b2b      	ldr	r3, [pc, #172]	; (800153c <HAL_UART_MspInit+0x194>)
 800148e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001492:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001494:	4b29      	ldr	r3, [pc, #164]	; (800153c <HAL_UART_MspInit+0x194>)
 8001496:	2200      	movs	r2, #0
 8001498:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <HAL_UART_MspInit+0x194>)
 800149c:	2200      	movs	r2, #0
 800149e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80014a0:	4826      	ldr	r0, [pc, #152]	; (800153c <HAL_UART_MspInit+0x194>)
 80014a2:	f000 ff0b 	bl	80022bc <HAL_DMA_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80014ac:	f7ff fcba 	bl	8000e24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a22      	ldr	r2, [pc, #136]	; (800153c <HAL_UART_MspInit+0x194>)
 80014b4:	67da      	str	r2, [r3, #124]	; 0x7c
 80014b6:	4a21      	ldr	r2, [pc, #132]	; (800153c <HAL_UART_MspInit+0x194>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_UART_MspInit+0x19c>)
 80014be:	4a22      	ldr	r2, [pc, #136]	; (8001548 <HAL_UART_MspInit+0x1a0>)
 80014c0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <HAL_UART_MspInit+0x19c>)
 80014c4:	222e      	movs	r2, #46	; 0x2e
 80014c6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_UART_MspInit+0x19c>)
 80014ca:	2240      	movs	r2, #64	; 0x40
 80014cc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_UART_MspInit+0x19c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_UART_MspInit+0x19c>)
 80014d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014da:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_UART_MspInit+0x19c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_UART_MspInit+0x19c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <HAL_UART_MspInit+0x19c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_UART_MspInit+0x19c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_UART_MspInit+0x19c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80014fa:	4812      	ldr	r0, [pc, #72]	; (8001544 <HAL_UART_MspInit+0x19c>)
 80014fc:	f000 fede 	bl	80022bc <HAL_DMA_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001506:	f7ff fc8d 	bl	8000e24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <HAL_UART_MspInit+0x19c>)
 800150e:	679a      	str	r2, [r3, #120]	; 0x78
 8001510:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <HAL_UART_MspInit+0x19c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2105      	movs	r1, #5
 800151a:	2027      	movs	r0, #39	; 0x27
 800151c:	f000 fe2a 	bl	8002174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001520:	2027      	movs	r0, #39	; 0x27
 8001522:	f000 fe41 	bl	80021a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001526:	bf00      	nop
 8001528:	37e0      	adds	r7, #224	; 0xe0
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40004800 	.word	0x40004800
 8001534:	58024400 	.word	0x58024400
 8001538:	58020c00 	.word	0x58020c00
 800153c:	20000258 	.word	0x20000258
 8001540:	40020010 	.word	0x40020010
 8001544:	200002d0 	.word	0x200002d0
 8001548:	40020028 	.word	0x40020028

0800154c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001552:	4a16      	ldr	r2, [pc, #88]	; (80015ac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001554:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001558:	2209      	movs	r2, #9
 800155a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800155e:	2202      	movs	r2, #2
 8001560:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800156a:	2202      	movs	r2, #2
 800156c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001570:	2201      	movs	r2, #1
 8001572:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001576:	2200      	movs	r2, #0
 8001578:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800157c:	2200      	movs	r2, #0
 800157e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001582:	2201      	movs	r2, #1
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001588:	2201      	movs	r2, #1
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800158e:	2200      	movs	r2, #0
 8001590:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001594:	f004 fc19 	bl	8005dca <HAL_PCD_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800159e:	f7ff fc41 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000348 	.word	0x20000348
 80015ac:	40080000 	.word	0x40080000

080015b0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b0b8      	sub	sp, #224	; 0xe0
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	22bc      	movs	r2, #188	; 0xbc
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f00c ff5d 	bl	800e490 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a2f      	ldr	r2, [pc, #188]	; (8001698 <HAL_PCD_MspInit+0xe8>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d156      	bne.n	800168e <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80015e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80015e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80015e6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80015ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	4618      	mov	r0, r3
 80015f4:	f005 fd78 	bl	80070e8 <HAL_RCCEx_PeriphCLKConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80015fe:	f7ff fc11 	bl	8000e24 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001602:	f004 fd65 	bl	80060d0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	4b25      	ldr	r3, [pc, #148]	; (800169c <HAL_PCD_MspInit+0xec>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160c:	4a23      	ldr	r2, [pc, #140]	; (800169c <HAL_PCD_MspInit+0xec>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_PCD_MspInit+0xec>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001624:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001628:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800163e:	230a      	movs	r3, #10
 8001640:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001648:	4619      	mov	r1, r3
 800164a:	4815      	ldr	r0, [pc, #84]	; (80016a0 <HAL_PCD_MspInit+0xf0>)
 800164c:	f004 f9da 	bl	8005a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001654:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001668:	4619      	mov	r1, r3
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <HAL_PCD_MspInit+0xf0>)
 800166c:	f004 f9ca 	bl	8005a04 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001670:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_PCD_MspInit+0xec>)
 8001672:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001676:	4a09      	ldr	r2, [pc, #36]	; (800169c <HAL_PCD_MspInit+0xec>)
 8001678:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800167c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_PCD_MspInit+0xec>)
 8001682:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001686:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800168e:	bf00      	nop
 8001690:	37e0      	adds	r7, #224	; 0xe0
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40080000 	.word	0x40080000
 800169c:	58024400 	.word	0x58024400
 80016a0:	58020000 	.word	0x58020000

080016a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016a4:	f8df d04c 	ldr.w	sp, [pc, #76]	; 80016f4 <LoopCopyDataInitITCM+0x16>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016a8:	f7ff fdaa 	bl	8001200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016ac:	4812      	ldr	r0, [pc, #72]	; (80016f8 <LoopCopyDataInitITCM+0x1a>)
  ldr r1, =_edata
 80016ae:	4913      	ldr	r1, [pc, #76]	; (80016fc <LoopCopyDataInitITCM+0x1e>)
  ldr r2, =_sidata
 80016b0:	4a13      	ldr	r2, [pc, #76]	; (8001700 <LoopCopyDataInitITCM+0x22>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b4:	e002      	b.n	80016bc <LoopCopyDataInit>

080016b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ba:	3304      	adds	r3, #4

080016bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c0:	d3f9      	bcc.n	80016b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <LoopCopyDataInitITCM+0x26>)
  ldr r4, =_ebss
 80016c4:	4c10      	ldr	r4, [pc, #64]	; (8001708 <LoopCopyDataInitITCM+0x2a>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c8:	e001      	b.n	80016ce <LoopFillZerobss>

080016ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016cc:	3204      	adds	r2, #4

080016ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d0:	d3fb      	bcc.n	80016ca <FillZerobss>

/* Copy the data segment initializers from flash to ITCM */
  movs  r1, #0
 80016d2:	2100      	movs	r1, #0
  b  LoopCopyDataInitITCM
 80016d4:	e003      	b.n	80016de <LoopCopyDataInitITCM>

080016d6 <CopyDataInitITCM>:

/* Zero fill ITCM ram section with source code */
CopyDataInitITCM:
  ldr r3, =_siitcmram
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <LoopCopyDataInitITCM+0x2e>)
  ldr r3, [r3, r1]
 80016d8:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80016da:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80016dc:	3104      	adds	r1, #4

080016de <LoopCopyDataInitITCM>:

LoopCopyDataInitITCM:
  ldr r0, =_sitcmram
 80016de:	480c      	ldr	r0, [pc, #48]	; (8001710 <LoopCopyDataInitITCM+0x32>)
  ldr r3, =_eitcmram
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <LoopCopyDataInitITCM+0x36>)
  adds r2, r0, r1
 80016e2:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80016e4:	429a      	cmp	r2, r3
  bcc CopyDataInitITCM
 80016e6:	d3f6      	bcc.n	80016d6 <CopyDataInitITCM>

/* Call static constructors */
    bl __libc_init_array
 80016e8:	f00c fe7c 	bl	800e3e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ec:	f7ff fa4a 	bl	8000b84 <main>
  bx  lr
 80016f0:	4770      	bx	lr
 80016f2:	0000      	.short	0x0000
  ldr   sp, =_estack      /* set stack pointer */
 80016f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001700:	080107bc 	.word	0x080107bc
  ldr r2, =_sbss
 8001704:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001708:	200059ac 	.word	0x200059ac
  ldr r3, =_siitcmram
 800170c:	08010834 	.word	0x08010834
  ldr r0, =_sitcmram
 8001710:	00000000 	.word	0x00000000
  ldr r3, =_eitcmram
 8001714:	00001e88 	.word	0x00001e88

08001718 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC3_IRQHandler>
	...

0800171c <rsa>:
    BN_DEL(h);
    BN_DEL(temp);
    return EXIT_SUCCESS;
}

int32_t rsa(const BN *bn_x, const int32_t flag, BN *bn_y) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
    if (flag) {
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d008      	beq.n	8001740 <rsa+0x24>
        rsa_Encrypt(bn_x, e, n, bn_y);
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <rsa+0x40>)
 8001730:	6819      	ldr	r1, [r3, #0]
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <rsa+0x44>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f00e fded 	bl	8010318 <__rsa_Encrypt_veneer>
 800173e:	e007      	b.n	8001750 <rsa+0x34>
    } else {
        rsa_Decrypt(bn_x, d, n, bn_y);
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <rsa+0x48>)
 8001742:	6819      	ldr	r1, [r3, #0]
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <rsa+0x44>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f00e fde8 	bl	8010320 <__rsa_Decrypt_veneer>
    }
    return EXIT_SUCCESS;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000076c 	.word	0x2000076c
 8001760:	20000770 	.word	0x20000770
 8001764:	20000774 	.word	0x20000774

08001768 <rsa_set_prime>:

int32_t rsa_set_prime(BN **bn) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
    BN_COPY(p1, bn[0]);
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <rsa_set_prime+0x70>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2288      	movs	r2, #136	; 0x88
 800177e:	4619      	mov	r1, r3
 8001780:	f00c fe78 	bl	800e474 <memcpy>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <rsa_set_prime+0x70>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6852      	ldr	r2, [r2, #4]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <rsa_set_prime+0x70>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6892      	ldr	r2, [r2, #8]
 800179a:	609a      	str	r2, [r3, #8]
    BN_COPY(p2, bn[1]);
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <rsa_set_prime+0x74>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3304      	adds	r3, #4
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2288      	movs	r2, #136	; 0x88
 80017ac:	4619      	mov	r1, r3
 80017ae:	f00c fe61 	bl	800e474 <memcpy>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3304      	adds	r3, #4
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <rsa_set_prime+0x74>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6852      	ldr	r2, [r2, #4]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3304      	adds	r3, #4
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <rsa_set_prime+0x74>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6892      	ldr	r2, [r2, #8]
 80017cc:	609a      	str	r2, [r3, #8]
    return EXIT_SUCCESS;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000758 	.word	0x20000758
 80017dc:	2000075c 	.word	0x2000075c

080017e0 <rsa_usart>:

int32_t rsa_usart(const char *str) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
    int32_t rsa_flag;
    if ('p' == str[0]) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b70      	cmp	r3, #112	; 0x70
 80017ee:	d102      	bne.n	80017f6 <rsa_usart+0x16>
        rsa_flag = 1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	e008      	b.n	8001808 <rsa_usart+0x28>
    } else if ('c' == str[0]) {
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b63      	cmp	r3, #99	; 0x63
 80017fc:	d102      	bne.n	8001804 <rsa_usart+0x24>
        rsa_flag = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	e001      	b.n	8001808 <rsa_usart+0x28>
    } else {
        return EXIT_FAILURE;
 8001804:	2301      	movs	r3, #1
 8001806:	e04f      	b.n	80018a8 <rsa_usart+0xc8>
    }
    BN *bn_input, *bn_output;
    BN_NEW(bn_input);
 8001808:	2110      	movs	r1, #16
 800180a:	2001      	movs	r0, #1
 800180c:	f00c fce6 	bl	800e1dc <calloc>
 8001810:	4603      	mov	r3, r0
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	2108      	movs	r1, #8
 8001816:	2011      	movs	r0, #17
 8001818:	f00c fce0 	bl	800e1dc <calloc>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	601a      	str	r2, [r3, #0]
    BN_NEW(bn_output);
 8001824:	2110      	movs	r1, #16
 8001826:	2001      	movs	r0, #1
 8001828:	f00c fcd8 	bl	800e1dc <calloc>
 800182c:	4603      	mov	r3, r0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	2108      	movs	r1, #8
 8001832:	2011      	movs	r0, #17
 8001834:	f00c fcd2 	bl	800e1dc <calloc>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	601a      	str	r2, [r3, #0]
    BN_str2bn(str, bn_input);
 8001840:	6939      	ldr	r1, [r7, #16]
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f00e fd7c 	bl	8010340 <__BN_str2bn_veneer>
    char *str_temp = calloc(1024, sizeof(int8_t));
 8001848:	2101      	movs	r1, #1
 800184a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800184e:	f00c fcc5 	bl	800e1dc <calloc>
 8001852:	4603      	mov	r3, r0
 8001854:	60bb      	str	r3, [r7, #8]
    rsa(bn_input, rsa_flag, bn_output);
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	6979      	ldr	r1, [r7, #20]
 800185a:	6938      	ldr	r0, [r7, #16]
 800185c:	f7ff ff5e 	bl	800171c <rsa>
    BN_bn2str(str_temp, bn_output);
 8001860:	68f9      	ldr	r1, [r7, #12]
 8001862:	68b8      	ldr	r0, [r7, #8]
 8001864:	f00e fd64 	bl	8010330 <__BN_bn2str_veneer>
    if (rsa_flag) {
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d004      	beq.n	8001878 <rsa_usart+0x98>
        usart3_printf("c = %s\n", str_temp);
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	480f      	ldr	r0, [pc, #60]	; (80018b0 <rsa_usart+0xd0>)
 8001872:	f000 fa93 	bl	8001d9c <usart3_printf>
 8001876:	e003      	b.n	8001880 <rsa_usart+0xa0>
    } else {
        usart3_printf("p = %s\n", str_temp);
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	480e      	ldr	r0, [pc, #56]	; (80018b4 <rsa_usart+0xd4>)
 800187c:	f000 fa8e 	bl	8001d9c <usart3_printf>
    }
    free(str_temp);
 8001880:	68b8      	ldr	r0, [r7, #8]
 8001882:	f00c fddf 	bl	800e444 <free>
    BN_DEL(bn_input);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f00c fdda 	bl	800e444 <free>
 8001890:	6938      	ldr	r0, [r7, #16]
 8001892:	f00c fdd7 	bl	800e444 <free>
    BN_DEL(bn_output);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f00c fdd2 	bl	800e444 <free>
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f00c fdcf 	bl	800e444 <free>
    return EXIT_SUCCESS;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	080103d0 	.word	0x080103d0
 80018b4:	080103d8 	.word	0x080103d8

080018b8 <rsa_print_key>:

int32_t rsa_print_key(void) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
    char *str_temp = calloc(1024, sizeof(char));
 80018be:	2101      	movs	r1, #1
 80018c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018c4:	f00c fc8a 	bl	800e1dc <calloc>
 80018c8:	4603      	mov	r3, r0
 80018ca:	607b      	str	r3, [r7, #4]
    BN_bn2str(str_temp, p);
 80018cc:	4b2b      	ldr	r3, [pc, #172]	; (800197c <rsa_print_key+0xc4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f00e fd2c 	bl	8010330 <__BN_bn2str_veneer>
    usart3_printf("p = %s\n\n", str_temp);
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4829      	ldr	r0, [pc, #164]	; (8001980 <rsa_print_key+0xc8>)
 80018dc:	f000 fa5e 	bl	8001d9c <usart3_printf>
    BN_bn2str(str_temp, q);
 80018e0:	4b28      	ldr	r3, [pc, #160]	; (8001984 <rsa_print_key+0xcc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f00e fd22 	bl	8010330 <__BN_bn2str_veneer>
    usart3_printf("q = %s\n\n", str_temp);
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4826      	ldr	r0, [pc, #152]	; (8001988 <rsa_print_key+0xd0>)
 80018f0:	f000 fa54 	bl	8001d9c <usart3_printf>
    BN_bn2str(str_temp, n);
 80018f4:	4b25      	ldr	r3, [pc, #148]	; (800198c <rsa_print_key+0xd4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f00e fd18 	bl	8010330 <__BN_bn2str_veneer>
    usart3_printf("n = %s\n\n", str_temp);
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4823      	ldr	r0, [pc, #140]	; (8001990 <rsa_print_key+0xd8>)
 8001904:	f000 fa4a 	bl	8001d9c <usart3_printf>
    BN_bn2str(str_temp, e);
 8001908:	4b22      	ldr	r3, [pc, #136]	; (8001994 <rsa_print_key+0xdc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f00e fd0e 	bl	8010330 <__BN_bn2str_veneer>
    usart3_printf("e = %s\n\n", str_temp);
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4820      	ldr	r0, [pc, #128]	; (8001998 <rsa_print_key+0xe0>)
 8001918:	f000 fa40 	bl	8001d9c <usart3_printf>
    BN_bn2str(str_temp, d);
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <rsa_print_key+0xe4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f00e fd04 	bl	8010330 <__BN_bn2str_veneer>
    usart3_printf("d = %s\n\n", str_temp);
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	481d      	ldr	r0, [pc, #116]	; (80019a0 <rsa_print_key+0xe8>)
 800192c:	f000 fa36 	bl	8001d9c <usart3_printf>
    BN_bn2str(str_temp, dP);
 8001930:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <rsa_print_key+0xec>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f00e fcfa 	bl	8010330 <__BN_bn2str_veneer>
    usart3_printf("dP = %s\n\n", str_temp);
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	481a      	ldr	r0, [pc, #104]	; (80019a8 <rsa_print_key+0xf0>)
 8001940:	f000 fa2c 	bl	8001d9c <usart3_printf>
    BN_bn2str(str_temp, dQ);
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <rsa_print_key+0xf4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f00e fcf0 	bl	8010330 <__BN_bn2str_veneer>
    usart3_printf("dQ = %s\n\n", str_temp);
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4817      	ldr	r0, [pc, #92]	; (80019b0 <rsa_print_key+0xf8>)
 8001954:	f000 fa22 	bl	8001d9c <usart3_printf>
    BN_bn2str(str_temp, qInv);
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <rsa_print_key+0xfc>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f00e fce6 	bl	8010330 <__BN_bn2str_veneer>
    usart3_printf("qInv = %s\n", str_temp);
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4814      	ldr	r0, [pc, #80]	; (80019b8 <rsa_print_key+0x100>)
 8001968:	f000 fa18 	bl	8001d9c <usart3_printf>
    free(str_temp);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f00c fd69 	bl	800e444 <free>
    return EXIT_SUCCESS;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000750 	.word	0x20000750
 8001980:	080103e0 	.word	0x080103e0
 8001984:	20000754 	.word	0x20000754
 8001988:	080103ec 	.word	0x080103ec
 800198c:	20000770 	.word	0x20000770
 8001990:	080103f8 	.word	0x080103f8
 8001994:	2000076c 	.word	0x2000076c
 8001998:	08010404 	.word	0x08010404
 800199c:	20000774 	.word	0x20000774
 80019a0:	08010410 	.word	0x08010410
 80019a4:	20000778 	.word	0x20000778
 80019a8:	0801041c 	.word	0x0801041c
 80019ac:	2000077c 	.word	0x2000077c
 80019b0:	08010428 	.word	0x08010428
 80019b4:	20000780 	.word	0x20000780
 80019b8:	08010434 	.word	0x08010434

080019bc <HAL_USART3_ENABLE_IT_IDLE_Receive_DMA>:

static uint32_t usart3_r_len;
static uint8_t usart3_r_message[UART_BUFFSIZE];
static DMA_BUFFER usart_str uart3_str;

void HAL_USART3_ENABLE_IT_IDLE_Receive_DMA() {
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
    __HAL_UART_CLEAR_IDLEFLAG(&huart3);
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_USART3_ENABLE_IT_IDLE_Receive_DMA+0x2c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2210      	movs	r2, #16
 80019c6:	621a      	str	r2, [r3, #32]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <HAL_USART3_ENABLE_IT_IDLE_Receive_DMA+0x2c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_USART3_ENABLE_IT_IDLE_Receive_DMA+0x2c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0210 	orr.w	r2, r2, #16
 80019d6:	601a      	str	r2, [r3, #0]
    HAL_UART_Receive_DMA(&huart3, uart3_str.Uart_RecvBuff, UART_BUFFSIZE);
 80019d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019dc:	4903      	ldr	r1, [pc, #12]	; (80019ec <HAL_USART3_ENABLE_IT_IDLE_Receive_DMA+0x30>)
 80019de:	4802      	ldr	r0, [pc, #8]	; (80019e8 <HAL_USART3_ENABLE_IT_IDLE_Receive_DMA+0x2c>)
 80019e0:	f007 fb5e 	bl	80090a0 <HAL_UART_Receive_DMA>
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200001c8 	.word	0x200001c8
 80019ec:	38000800 	.word	0x38000800

080019f0 <HAL_USART3_IdleCallback>:

void HAL_USART3_IdleCallback() {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
    if (__HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE) != RESET && huart3.Instance == USART3) {
 80019f6:	4b63      	ldr	r3, [pc, #396]	; (8001b84 <HAL_USART3_IdleCallback+0x194>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	2b10      	cmp	r3, #16
 8001a02:	f040 819b 	bne.w	8001d3c <HAL_USART3_IdleCallback+0x34c>
 8001a06:	4b5f      	ldr	r3, [pc, #380]	; (8001b84 <HAL_USART3_IdleCallback+0x194>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a5f      	ldr	r2, [pc, #380]	; (8001b88 <HAL_USART3_IdleCallback+0x198>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	f040 8195 	bne.w	8001d3c <HAL_USART3_IdleCallback+0x34c>
        __HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8001a12:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <HAL_USART3_IdleCallback+0x194>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2210      	movs	r2, #16
 8001a18:	621a      	str	r2, [r3, #32]
        uint32_t counter_0 = __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 8001a1a:	4b5c      	ldr	r3, [pc, #368]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a5c      	ldr	r2, [pc, #368]	; (8001b90 <HAL_USART3_IdleCallback+0x1a0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d04a      	beq.n	8001aba <HAL_USART3_IdleCallback+0xca>
 8001a24:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a5a      	ldr	r2, [pc, #360]	; (8001b94 <HAL_USART3_IdleCallback+0x1a4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d045      	beq.n	8001aba <HAL_USART3_IdleCallback+0xca>
 8001a2e:	4b57      	ldr	r3, [pc, #348]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a59      	ldr	r2, [pc, #356]	; (8001b98 <HAL_USART3_IdleCallback+0x1a8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d040      	beq.n	8001aba <HAL_USART3_IdleCallback+0xca>
 8001a38:	4b54      	ldr	r3, [pc, #336]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a57      	ldr	r2, [pc, #348]	; (8001b9c <HAL_USART3_IdleCallback+0x1ac>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d03b      	beq.n	8001aba <HAL_USART3_IdleCallback+0xca>
 8001a42:	4b52      	ldr	r3, [pc, #328]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a56      	ldr	r2, [pc, #344]	; (8001ba0 <HAL_USART3_IdleCallback+0x1b0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d036      	beq.n	8001aba <HAL_USART3_IdleCallback+0xca>
 8001a4c:	4b4f      	ldr	r3, [pc, #316]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a54      	ldr	r2, [pc, #336]	; (8001ba4 <HAL_USART3_IdleCallback+0x1b4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d031      	beq.n	8001aba <HAL_USART3_IdleCallback+0xca>
 8001a56:	4b4d      	ldr	r3, [pc, #308]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a53      	ldr	r2, [pc, #332]	; (8001ba8 <HAL_USART3_IdleCallback+0x1b8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d02c      	beq.n	8001aba <HAL_USART3_IdleCallback+0xca>
 8001a60:	4b4a      	ldr	r3, [pc, #296]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a51      	ldr	r2, [pc, #324]	; (8001bac <HAL_USART3_IdleCallback+0x1bc>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d027      	beq.n	8001aba <HAL_USART3_IdleCallback+0xca>
 8001a6a:	4b48      	ldr	r3, [pc, #288]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a50      	ldr	r2, [pc, #320]	; (8001bb0 <HAL_USART3_IdleCallback+0x1c0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d022      	beq.n	8001aba <HAL_USART3_IdleCallback+0xca>
 8001a74:	4b45      	ldr	r3, [pc, #276]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a4e      	ldr	r2, [pc, #312]	; (8001bb4 <HAL_USART3_IdleCallback+0x1c4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d01d      	beq.n	8001aba <HAL_USART3_IdleCallback+0xca>
 8001a7e:	4b43      	ldr	r3, [pc, #268]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a4d      	ldr	r2, [pc, #308]	; (8001bb8 <HAL_USART3_IdleCallback+0x1c8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d018      	beq.n	8001aba <HAL_USART3_IdleCallback+0xca>
 8001a88:	4b40      	ldr	r3, [pc, #256]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a4b      	ldr	r2, [pc, #300]	; (8001bbc <HAL_USART3_IdleCallback+0x1cc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_USART3_IdleCallback+0xca>
 8001a92:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a4a      	ldr	r2, [pc, #296]	; (8001bc0 <HAL_USART3_IdleCallback+0x1d0>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d00e      	beq.n	8001aba <HAL_USART3_IdleCallback+0xca>
 8001a9c:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a48      	ldr	r2, [pc, #288]	; (8001bc4 <HAL_USART3_IdleCallback+0x1d4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d009      	beq.n	8001aba <HAL_USART3_IdleCallback+0xca>
 8001aa6:	4b39      	ldr	r3, [pc, #228]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a47      	ldr	r2, [pc, #284]	; (8001bc8 <HAL_USART3_IdleCallback+0x1d8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d004      	beq.n	8001aba <HAL_USART3_IdleCallback+0xca>
 8001ab0:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a45      	ldr	r2, [pc, #276]	; (8001bcc <HAL_USART3_IdleCallback+0x1dc>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d103      	bne.n	8001ac2 <HAL_USART3_IdleCallback+0xd2>
 8001aba:	4b34      	ldr	r3, [pc, #208]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	e002      	b.n	8001ac8 <HAL_USART3_IdleCallback+0xd8>
 8001ac2:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	613b      	str	r3, [r7, #16]
        for (int32_t i = 1 << 16; i--;) {
 8001aca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	bf00      	nop
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	1e5a      	subs	r2, r3, #1
 8001ad6:	617a      	str	r2, [r7, #20]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1fa      	bne.n	8001ad2 <HAL_USART3_IdleCallback+0xe2>
        }
        uint32_t counter_1 = __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 8001adc:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a2b      	ldr	r2, [pc, #172]	; (8001b90 <HAL_USART3_IdleCallback+0x1a0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d04a      	beq.n	8001b7c <HAL_USART3_IdleCallback+0x18c>
 8001ae6:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a2a      	ldr	r2, [pc, #168]	; (8001b94 <HAL_USART3_IdleCallback+0x1a4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d045      	beq.n	8001b7c <HAL_USART3_IdleCallback+0x18c>
 8001af0:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a28      	ldr	r2, [pc, #160]	; (8001b98 <HAL_USART3_IdleCallback+0x1a8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d040      	beq.n	8001b7c <HAL_USART3_IdleCallback+0x18c>
 8001afa:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a27      	ldr	r2, [pc, #156]	; (8001b9c <HAL_USART3_IdleCallback+0x1ac>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d03b      	beq.n	8001b7c <HAL_USART3_IdleCallback+0x18c>
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a25      	ldr	r2, [pc, #148]	; (8001ba0 <HAL_USART3_IdleCallback+0x1b0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d036      	beq.n	8001b7c <HAL_USART3_IdleCallback+0x18c>
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a24      	ldr	r2, [pc, #144]	; (8001ba4 <HAL_USART3_IdleCallback+0x1b4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d031      	beq.n	8001b7c <HAL_USART3_IdleCallback+0x18c>
 8001b18:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a22      	ldr	r2, [pc, #136]	; (8001ba8 <HAL_USART3_IdleCallback+0x1b8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d02c      	beq.n	8001b7c <HAL_USART3_IdleCallback+0x18c>
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a21      	ldr	r2, [pc, #132]	; (8001bac <HAL_USART3_IdleCallback+0x1bc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d027      	beq.n	8001b7c <HAL_USART3_IdleCallback+0x18c>
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <HAL_USART3_IdleCallback+0x1c0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d022      	beq.n	8001b7c <HAL_USART3_IdleCallback+0x18c>
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <HAL_USART3_IdleCallback+0x1c4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d01d      	beq.n	8001b7c <HAL_USART3_IdleCallback+0x18c>
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a1c      	ldr	r2, [pc, #112]	; (8001bb8 <HAL_USART3_IdleCallback+0x1c8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d018      	beq.n	8001b7c <HAL_USART3_IdleCallback+0x18c>
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a1b      	ldr	r2, [pc, #108]	; (8001bbc <HAL_USART3_IdleCallback+0x1cc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d013      	beq.n	8001b7c <HAL_USART3_IdleCallback+0x18c>
 8001b54:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a19      	ldr	r2, [pc, #100]	; (8001bc0 <HAL_USART3_IdleCallback+0x1d0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d00e      	beq.n	8001b7c <HAL_USART3_IdleCallback+0x18c>
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a18      	ldr	r2, [pc, #96]	; (8001bc4 <HAL_USART3_IdleCallback+0x1d4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d009      	beq.n	8001b7c <HAL_USART3_IdleCallback+0x18c>
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a16      	ldr	r2, [pc, #88]	; (8001bc8 <HAL_USART3_IdleCallback+0x1d8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d004      	beq.n	8001b7c <HAL_USART3_IdleCallback+0x18c>
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a15      	ldr	r2, [pc, #84]	; (8001bcc <HAL_USART3_IdleCallback+0x1dc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d129      	bne.n	8001bd0 <HAL_USART3_IdleCallback+0x1e0>
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <HAL_USART3_IdleCallback+0x19c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	e028      	b.n	8001bd6 <HAL_USART3_IdleCallback+0x1e6>
 8001b84:	200001c8 	.word	0x200001c8
 8001b88:	40004800 	.word	0x40004800
 8001b8c:	20000258 	.word	0x20000258
 8001b90:	40020010 	.word	0x40020010
 8001b94:	40020028 	.word	0x40020028
 8001b98:	40020040 	.word	0x40020040
 8001b9c:	40020058 	.word	0x40020058
 8001ba0:	40020070 	.word	0x40020070
 8001ba4:	40020088 	.word	0x40020088
 8001ba8:	400200a0 	.word	0x400200a0
 8001bac:	400200b8 	.word	0x400200b8
 8001bb0:	40020410 	.word	0x40020410
 8001bb4:	40020428 	.word	0x40020428
 8001bb8:	40020440 	.word	0x40020440
 8001bbc:	40020458 	.word	0x40020458
 8001bc0:	40020470 	.word	0x40020470
 8001bc4:	40020488 	.word	0x40020488
 8001bc8:	400204a0 	.word	0x400204a0
 8001bcc:	400204b8 	.word	0x400204b8
 8001bd0:	4b5c      	ldr	r3, [pc, #368]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	60fb      	str	r3, [r7, #12]
        if (counter_0 == counter_1) {
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	f040 80ad 	bne.w	8001d3c <HAL_USART3_IdleCallback+0x34c>
            HAL_UART_DMAStop(&huart3);
 8001be2:	4859      	ldr	r0, [pc, #356]	; (8001d48 <HAL_USART3_IdleCallback+0x358>)
 8001be4:	f007 fab2 	bl	800914c <HAL_UART_DMAStop>
            usart3_r_len = UART_BUFFSIZE - __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 8001be8:	4b56      	ldr	r3, [pc, #344]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a57      	ldr	r2, [pc, #348]	; (8001d4c <HAL_USART3_IdleCallback+0x35c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d04a      	beq.n	8001c88 <HAL_USART3_IdleCallback+0x298>
 8001bf2:	4b54      	ldr	r3, [pc, #336]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a56      	ldr	r2, [pc, #344]	; (8001d50 <HAL_USART3_IdleCallback+0x360>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d045      	beq.n	8001c88 <HAL_USART3_IdleCallback+0x298>
 8001bfc:	4b51      	ldr	r3, [pc, #324]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a54      	ldr	r2, [pc, #336]	; (8001d54 <HAL_USART3_IdleCallback+0x364>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d040      	beq.n	8001c88 <HAL_USART3_IdleCallback+0x298>
 8001c06:	4b4f      	ldr	r3, [pc, #316]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a53      	ldr	r2, [pc, #332]	; (8001d58 <HAL_USART3_IdleCallback+0x368>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d03b      	beq.n	8001c88 <HAL_USART3_IdleCallback+0x298>
 8001c10:	4b4c      	ldr	r3, [pc, #304]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a51      	ldr	r2, [pc, #324]	; (8001d5c <HAL_USART3_IdleCallback+0x36c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d036      	beq.n	8001c88 <HAL_USART3_IdleCallback+0x298>
 8001c1a:	4b4a      	ldr	r3, [pc, #296]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a50      	ldr	r2, [pc, #320]	; (8001d60 <HAL_USART3_IdleCallback+0x370>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d031      	beq.n	8001c88 <HAL_USART3_IdleCallback+0x298>
 8001c24:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a4e      	ldr	r2, [pc, #312]	; (8001d64 <HAL_USART3_IdleCallback+0x374>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d02c      	beq.n	8001c88 <HAL_USART3_IdleCallback+0x298>
 8001c2e:	4b45      	ldr	r3, [pc, #276]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a4d      	ldr	r2, [pc, #308]	; (8001d68 <HAL_USART3_IdleCallback+0x378>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d027      	beq.n	8001c88 <HAL_USART3_IdleCallback+0x298>
 8001c38:	4b42      	ldr	r3, [pc, #264]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a4b      	ldr	r2, [pc, #300]	; (8001d6c <HAL_USART3_IdleCallback+0x37c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d022      	beq.n	8001c88 <HAL_USART3_IdleCallback+0x298>
 8001c42:	4b40      	ldr	r3, [pc, #256]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a4a      	ldr	r2, [pc, #296]	; (8001d70 <HAL_USART3_IdleCallback+0x380>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d01d      	beq.n	8001c88 <HAL_USART3_IdleCallback+0x298>
 8001c4c:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a48      	ldr	r2, [pc, #288]	; (8001d74 <HAL_USART3_IdleCallback+0x384>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d018      	beq.n	8001c88 <HAL_USART3_IdleCallback+0x298>
 8001c56:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a47      	ldr	r2, [pc, #284]	; (8001d78 <HAL_USART3_IdleCallback+0x388>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d013      	beq.n	8001c88 <HAL_USART3_IdleCallback+0x298>
 8001c60:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a45      	ldr	r2, [pc, #276]	; (8001d7c <HAL_USART3_IdleCallback+0x38c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00e      	beq.n	8001c88 <HAL_USART3_IdleCallback+0x298>
 8001c6a:	4b36      	ldr	r3, [pc, #216]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a44      	ldr	r2, [pc, #272]	; (8001d80 <HAL_USART3_IdleCallback+0x390>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d009      	beq.n	8001c88 <HAL_USART3_IdleCallback+0x298>
 8001c74:	4b33      	ldr	r3, [pc, #204]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a42      	ldr	r2, [pc, #264]	; (8001d84 <HAL_USART3_IdleCallback+0x394>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d004      	beq.n	8001c88 <HAL_USART3_IdleCallback+0x298>
 8001c7e:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a41      	ldr	r2, [pc, #260]	; (8001d88 <HAL_USART3_IdleCallback+0x398>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d105      	bne.n	8001c94 <HAL_USART3_IdleCallback+0x2a4>
 8001c88:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001c92:	e004      	b.n	8001c9e <HAL_USART3_IdleCallback+0x2ae>
 8001c94:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <HAL_USART3_IdleCallback+0x354>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001c9e:	4a3b      	ldr	r2, [pc, #236]	; (8001d8c <HAL_USART3_IdleCallback+0x39c>)
 8001ca0:	6013      	str	r3, [r2, #0]
            if (usart3_r_len < UART_BUFFSIZE - 1) {
 8001ca2:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <HAL_USART3_IdleCallback+0x39c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d83d      	bhi.n	8001d2a <HAL_USART3_IdleCallback+0x33a>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001cae:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <HAL_USART3_IdleCallback+0x3a0>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001cb6:	f3bf 8f4f 	dsb	sy
}
 8001cba:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001cbc:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <HAL_USART3_IdleCallback+0x3a0>)
 8001cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cc2:	60bb      	str	r3, [r7, #8]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	0b5b      	lsrs	r3, r3, #13
 8001cc8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ccc:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	08db      	lsrs	r3, r3, #3
 8001cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cd6:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	015a      	lsls	r2, r3, #5
 8001cdc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001ce0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001ce6:	492a      	ldr	r1, [pc, #168]	; (8001d90 <HAL_USART3_IdleCallback+0x3a0>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	1e5a      	subs	r2, r3, #1
 8001cf2:	603a      	str	r2, [r7, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1ef      	bne.n	8001cd8 <HAL_USART3_IdleCallback+0x2e8>
    } while(sets-- != 0U);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	1e5a      	subs	r2, r3, #1
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1e5      	bne.n	8001cce <HAL_USART3_IdleCallback+0x2de>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d02:	f3bf 8f4f 	dsb	sy
}
 8001d06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d08:	f3bf 8f6f 	isb	sy
}
 8001d0c:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001d0e:	bf00      	nop
                SCB_CleanInvalidateDCache_MACRO();
                memcpy(usart3_r_message, uart3_str.Uart_RecvBuff, usart3_r_len);
 8001d10:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <HAL_USART3_IdleCallback+0x39c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	491f      	ldr	r1, [pc, #124]	; (8001d94 <HAL_USART3_IdleCallback+0x3a4>)
 8001d18:	481f      	ldr	r0, [pc, #124]	; (8001d98 <HAL_USART3_IdleCallback+0x3a8>)
 8001d1a:	f00c fbab 	bl	800e474 <memcpy>
                usart3_r_message[usart3_r_len] = '\0';
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_USART3_IdleCallback+0x39c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <HAL_USART3_IdleCallback+0x3a8>)
 8001d24:	2100      	movs	r1, #0
 8001d26:	54d1      	strb	r1, [r2, r3]
 8001d28:	e002      	b.n	8001d30 <HAL_USART3_IdleCallback+0x340>
            } else {
                usart3_r_len = 0;
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_USART3_IdleCallback+0x39c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
            }
            HAL_UART_Receive_DMA(&huart3, uart3_str.Uart_RecvBuff, UART_BUFFSIZE);
 8001d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d34:	4917      	ldr	r1, [pc, #92]	; (8001d94 <HAL_USART3_IdleCallback+0x3a4>)
 8001d36:	4804      	ldr	r0, [pc, #16]	; (8001d48 <HAL_USART3_IdleCallback+0x358>)
 8001d38:	f007 f9b2 	bl	80090a0 <HAL_UART_Receive_DMA>
        }
    }
}
 8001d3c:	bf00      	nop
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000258 	.word	0x20000258
 8001d48:	200001c8 	.word	0x200001c8
 8001d4c:	40020010 	.word	0x40020010
 8001d50:	40020028 	.word	0x40020028
 8001d54:	40020040 	.word	0x40020040
 8001d58:	40020058 	.word	0x40020058
 8001d5c:	40020070 	.word	0x40020070
 8001d60:	40020088 	.word	0x40020088
 8001d64:	400200a0 	.word	0x400200a0
 8001d68:	400200b8 	.word	0x400200b8
 8001d6c:	40020410 	.word	0x40020410
 8001d70:	40020428 	.word	0x40020428
 8001d74:	40020440 	.word	0x40020440
 8001d78:	40020458 	.word	0x40020458
 8001d7c:	40020470 	.word	0x40020470
 8001d80:	40020488 	.word	0x40020488
 8001d84:	400204a0 	.word	0x400204a0
 8001d88:	400204b8 	.word	0x400204b8
 8001d8c:	20000784 	.word	0x20000784
 8001d90:	e000ed00 	.word	0xe000ed00
 8001d94:	38000800 	.word	0x38000800
 8001d98:	20000788 	.word	0x20000788

08001d9c <usart3_printf>:

int32_t usart3_printf(const char *format, ...) {
 8001d9c:	b40f      	push	{r0, r1, r2, r3}
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
    while (__HAL_UART_GET_FLAG (&huart3, UART_FLAG_TC) == RESET) {
 8001da4:	e008      	b.n	8001db8 <usart3_printf+0x1c>
        for (int32_t i = 1 << 16; i--;) {
 8001da6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	bf00      	nop
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	1e5a      	subs	r2, r3, #1
 8001db2:	617a      	str	r2, [r7, #20]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1fa      	bne.n	8001dae <usart3_printf+0x12>
    while (__HAL_UART_GET_FLAG (&huart3, UART_FLAG_TC) == RESET) {
 8001db8:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <usart3_printf+0xc8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc2:	2b40      	cmp	r3, #64	; 0x40
 8001dc4:	d1ef      	bne.n	8001da6 <usart3_printf+0xa>
        }
    }
    va_list args;
    int32_t ret;
    va_start(args, format);
 8001dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dca:	603b      	str	r3, [r7, #0]
    ret = vsprintf((char*) uart3_str.Uart_SendBuff, format, args);
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	6a39      	ldr	r1, [r7, #32]
 8001dd0:	4825      	ldr	r0, [pc, #148]	; (8001e68 <usart3_printf+0xcc>)
 8001dd2:	f00c fe5d 	bl	800ea90 <vsiprintf>
 8001dd6:	6138      	str	r0, [r7, #16]
    if (ret > 0) {
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	dd3a      	ble.n	8001e54 <usart3_printf+0xb8>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <usart3_printf+0xd0>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001de6:	f3bf 8f4f 	dsb	sy
}
 8001dea:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <usart3_printf+0xd0>)
 8001dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001df2:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	0b5b      	lsrs	r3, r3, #13
 8001df8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001dfc:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	08db      	lsrs	r3, r3, #3
 8001e02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e06:	607b      	str	r3, [r7, #4]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001e10:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001e16:	4915      	ldr	r1, [pc, #84]	; (8001e6c <usart3_printf+0xd0>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	1e5a      	subs	r2, r3, #1
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ef      	bne.n	8001e08 <usart3_printf+0x6c>
    } while(sets-- != 0U);
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	1e5a      	subs	r2, r3, #1
 8001e2c:	60ba      	str	r2, [r7, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1e5      	bne.n	8001dfe <usart3_printf+0x62>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e32:	f3bf 8f4f 	dsb	sy
}
 8001e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e38:	f3bf 8f6f 	isb	sy
}
 8001e3c:	bf00      	nop
}
 8001e3e:	bf00      	nop
        SCB_CleanInvalidateDCache_MACRO();
        HAL_UART_Transmit_DMA(&huart3, uart3_str.Uart_SendBuff, strlen((char*) uart3_str.Uart_SendBuff));
 8001e40:	4809      	ldr	r0, [pc, #36]	; (8001e68 <usart3_printf+0xcc>)
 8001e42:	f7fe fa4d 	bl	80002e0 <strlen>
 8001e46:	4603      	mov	r3, r0
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4906      	ldr	r1, [pc, #24]	; (8001e68 <usart3_printf+0xcc>)
 8001e4e:	4805      	ldr	r0, [pc, #20]	; (8001e64 <usart3_printf+0xc8>)
 8001e50:	f007 f894 	bl	8008f7c <HAL_UART_Transmit_DMA>
    }
    va_end(args);
    return ret;
 8001e54:	693b      	ldr	r3, [r7, #16]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e60:	b004      	add	sp, #16
 8001e62:	4770      	bx	lr
 8001e64:	200001c8 	.word	0x200001c8
 8001e68:	38000000 	.word	0x38000000
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <usart3_scanf>:

int32_t usart3_scanf(const char *format, ...) {
 8001e70:	b40f      	push	{r0, r1, r2, r3}
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
    while (0 == usart3_r_len) {
 8001e78:	e008      	b.n	8001e8c <usart3_scanf+0x1c>
        for (int32_t i = 1 << 16; i--;) {
 8001e7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	bf00      	nop
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1e5a      	subs	r2, r3, #1
 8001e86:	60fa      	str	r2, [r7, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1fa      	bne.n	8001e82 <usart3_scanf+0x12>
    while (0 == usart3_r_len) {
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <usart3_scanf+0x4c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f2      	beq.n	8001e7a <usart3_scanf+0xa>
        }
    }
    usart3_r_len = 0;
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <usart3_scanf+0x4c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
    va_list args;
    int32_t ret;
    va_start(args, format);
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	607b      	str	r3, [r7, #4]
    ret = vsscanf((char*) usart3_r_message, format, args);
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	69b9      	ldr	r1, [r7, #24]
 8001ea4:	4806      	ldr	r0, [pc, #24]	; (8001ec0 <usart3_scanf+0x50>)
 8001ea6:	f00c fe21 	bl	800eaec <vsiscanf>
 8001eaa:	60b8      	str	r0, [r7, #8]
    va_end(args);
    return ret;
 8001eac:	68bb      	ldr	r3, [r7, #8]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001eb8:	b004      	add	sp, #16
 8001eba:	4770      	bx	lr
 8001ebc:	20000784 	.word	0x20000784
 8001ec0:	20000788 	.word	0x20000788

08001ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eca:	2003      	movs	r0, #3
 8001ecc:	f000 f947 	bl	800215e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ed0:	f004 fef2 	bl	8006cb8 <HAL_RCC_GetSysClockFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_Init+0x68>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	0a1b      	lsrs	r3, r3, #8
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	4913      	ldr	r1, [pc, #76]	; (8001f30 <HAL_Init+0x6c>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001eee:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <HAL_Init+0x68>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <HAL_Init+0x6c>)
 8001ef8:	5cd3      	ldrb	r3, [r2, r3]
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
 8001f04:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <HAL_Init+0x70>)
 8001f06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f08:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <HAL_Init+0x74>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f0e:	200f      	movs	r0, #15
 8001f10:	f7fe fffa 	bl	8000f08 <HAL_InitTick>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e002      	b.n	8001f24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f1e:	f7fe ffd5 	bl	8000ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	58024400 	.word	0x58024400
 8001f30:	080104d0 	.word	0x080104d0
 8001f34:	20000004 	.word	0x20000004
 8001f38:	20000000 	.word	0x20000000

08001f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x20>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_IncTick+0x24>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <HAL_IncTick+0x24>)
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	2000000c 	.word	0x2000000c
 8001f60:	20000f88 	.word	0x20000f88

08001f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_GetTick+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000f88 	.word	0x20000f88

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff ffee 	bl	8001f64 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_Delay+0x44>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa2:	bf00      	nop
 8001fa4:	f7ff ffde 	bl	8001f64 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000000c 	.word	0x2000000c

08001fc4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fc8:	4b03      	ldr	r3, [pc, #12]	; (8001fd8 <HAL_GetREVID+0x14>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	0c1b      	lsrs	r3, r3, #16
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	5c001000 	.word	0x5c001000

08001fdc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001fec:	4904      	ldr	r1, [pc, #16]	; (8002000 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	58000400 	.word	0x58000400

08002004 <__NVIC_SetPriorityGrouping>:
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <__NVIC_SetPriorityGrouping+0x40>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002020:	4013      	ands	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 800202e:	4313      	orrs	r3, r2
 8002030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002032:	4a04      	ldr	r2, [pc, #16]	; (8002044 <__NVIC_SetPriorityGrouping+0x40>)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	60d3      	str	r3, [r2, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00
 8002048:	05fa0000 	.word	0x05fa0000

0800204c <__NVIC_GetPriorityGrouping>:
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <__NVIC_GetPriorityGrouping+0x18>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	f003 0307 	and.w	r3, r3, #7
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_EnableIRQ>:
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002076:	2b00      	cmp	r3, #0
 8002078:	db0b      	blt.n	8002092 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	f003 021f 	and.w	r2, r3, #31
 8002080:	4907      	ldr	r1, [pc, #28]	; (80020a0 <__NVIC_EnableIRQ+0x38>)
 8002082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2001      	movs	r0, #1
 800208a:	fa00 f202 	lsl.w	r2, r0, r2
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000e100 	.word	0xe000e100

080020a4 <__NVIC_SetPriority>:
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	6039      	str	r1, [r7, #0]
 80020ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	db0a      	blt.n	80020ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	490c      	ldr	r1, [pc, #48]	; (80020f0 <__NVIC_SetPriority+0x4c>)
 80020be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c2:	0112      	lsls	r2, r2, #4
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	440b      	add	r3, r1
 80020c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020cc:	e00a      	b.n	80020e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4908      	ldr	r1, [pc, #32]	; (80020f4 <__NVIC_SetPriority+0x50>)
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	3b04      	subs	r3, #4
 80020dc:	0112      	lsls	r2, r2, #4
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	440b      	add	r3, r1
 80020e2:	761a      	strb	r2, [r3, #24]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000e100 	.word	0xe000e100
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <NVIC_EncodePriority>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	; 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f1c3 0307 	rsb	r3, r3, #7
 8002112:	2b04      	cmp	r3, #4
 8002114:	bf28      	it	cs
 8002116:	2304      	movcs	r3, #4
 8002118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3304      	adds	r3, #4
 800211e:	2b06      	cmp	r3, #6
 8002120:	d902      	bls.n	8002128 <NVIC_EncodePriority+0x30>
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3b03      	subs	r3, #3
 8002126:	e000      	b.n	800212a <NVIC_EncodePriority+0x32>
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	401a      	ands	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002140:	f04f 31ff 	mov.w	r1, #4294967295
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	43d9      	mvns	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	4313      	orrs	r3, r2
}
 8002152:	4618      	mov	r0, r3
 8002154:	3724      	adds	r7, #36	; 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ff4c 	bl	8002004 <__NVIC_SetPriorityGrouping>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002182:	f7ff ff63 	bl	800204c <__NVIC_GetPriorityGrouping>
 8002186:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68b9      	ldr	r1, [r7, #8]
 800218c:	6978      	ldr	r0, [r7, #20]
 800218e:	f7ff ffb3 	bl	80020f8 <NVIC_EncodePriority>
 8002192:	4602      	mov	r2, r0
 8002194:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002198:	4611      	mov	r1, r2
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff82 	bl	80020a4 <__NVIC_SetPriority>
}
 80021a0:	bf00      	nop
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff56 	bl	8002068 <__NVIC_EnableIRQ>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80021c8:	f3bf 8f5f 	dmb	sy
}
 80021cc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <HAL_MPU_Disable+0x28>)
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	4a06      	ldr	r2, [pc, #24]	; (80021ec <HAL_MPU_Disable+0x28>)
 80021d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_MPU_Disable+0x2c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	605a      	str	r2, [r3, #4]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00
 80021f0:	e000ed90 	.word	0xe000ed90

080021f4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80021fc:	4a0b      	ldr	r2, [pc, #44]	; (800222c <HAL_MPU_Enable+0x38>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_MPU_Enable+0x3c>)
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	4a09      	ldr	r2, [pc, #36]	; (8002230 <HAL_MPU_Enable+0x3c>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002212:	f3bf 8f4f 	dsb	sy
}
 8002216:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002218:	f3bf 8f6f 	isb	sy
}
 800221c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000ed90 	.word	0xe000ed90
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	785a      	ldrb	r2, [r3, #1]
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_MPU_ConfigRegion+0x84>)
 8002242:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d029      	beq.n	80022a0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800224c:	4a1a      	ldr	r2, [pc, #104]	; (80022b8 <HAL_MPU_ConfigRegion+0x84>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	7b1b      	ldrb	r3, [r3, #12]
 8002258:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7adb      	ldrb	r3, [r3, #11]
 800225e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002260:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7a9b      	ldrb	r3, [r3, #10]
 8002266:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002268:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7b5b      	ldrb	r3, [r3, #13]
 800226e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002270:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7b9b      	ldrb	r3, [r3, #14]
 8002276:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002278:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7bdb      	ldrb	r3, [r3, #15]
 800227e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002280:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7a5b      	ldrb	r3, [r3, #9]
 8002286:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002288:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	7a1b      	ldrb	r3, [r3, #8]
 800228e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002290:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	7812      	ldrb	r2, [r2, #0]
 8002296:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002298:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800229a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800229c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800229e:	e005      	b.n	80022ac <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_MPU_ConfigRegion+0x84>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <HAL_MPU_ConfigRegion+0x84>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	611a      	str	r2, [r3, #16]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed90 	.word	0xe000ed90

080022bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80022c4:	f7ff fe4e 	bl	8001f64 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e316      	b.n	8002902 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a66      	ldr	r2, [pc, #408]	; (8002474 <HAL_DMA_Init+0x1b8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d04a      	beq.n	8002374 <HAL_DMA_Init+0xb8>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a65      	ldr	r2, [pc, #404]	; (8002478 <HAL_DMA_Init+0x1bc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d045      	beq.n	8002374 <HAL_DMA_Init+0xb8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a63      	ldr	r2, [pc, #396]	; (800247c <HAL_DMA_Init+0x1c0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d040      	beq.n	8002374 <HAL_DMA_Init+0xb8>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a62      	ldr	r2, [pc, #392]	; (8002480 <HAL_DMA_Init+0x1c4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d03b      	beq.n	8002374 <HAL_DMA_Init+0xb8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a60      	ldr	r2, [pc, #384]	; (8002484 <HAL_DMA_Init+0x1c8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d036      	beq.n	8002374 <HAL_DMA_Init+0xb8>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a5f      	ldr	r2, [pc, #380]	; (8002488 <HAL_DMA_Init+0x1cc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d031      	beq.n	8002374 <HAL_DMA_Init+0xb8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a5d      	ldr	r2, [pc, #372]	; (800248c <HAL_DMA_Init+0x1d0>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d02c      	beq.n	8002374 <HAL_DMA_Init+0xb8>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a5c      	ldr	r2, [pc, #368]	; (8002490 <HAL_DMA_Init+0x1d4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d027      	beq.n	8002374 <HAL_DMA_Init+0xb8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a5a      	ldr	r2, [pc, #360]	; (8002494 <HAL_DMA_Init+0x1d8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d022      	beq.n	8002374 <HAL_DMA_Init+0xb8>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a59      	ldr	r2, [pc, #356]	; (8002498 <HAL_DMA_Init+0x1dc>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d01d      	beq.n	8002374 <HAL_DMA_Init+0xb8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a57      	ldr	r2, [pc, #348]	; (800249c <HAL_DMA_Init+0x1e0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d018      	beq.n	8002374 <HAL_DMA_Init+0xb8>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a56      	ldr	r2, [pc, #344]	; (80024a0 <HAL_DMA_Init+0x1e4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d013      	beq.n	8002374 <HAL_DMA_Init+0xb8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a54      	ldr	r2, [pc, #336]	; (80024a4 <HAL_DMA_Init+0x1e8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00e      	beq.n	8002374 <HAL_DMA_Init+0xb8>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a53      	ldr	r2, [pc, #332]	; (80024a8 <HAL_DMA_Init+0x1ec>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d009      	beq.n	8002374 <HAL_DMA_Init+0xb8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a51      	ldr	r2, [pc, #324]	; (80024ac <HAL_DMA_Init+0x1f0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d004      	beq.n	8002374 <HAL_DMA_Init+0xb8>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a50      	ldr	r2, [pc, #320]	; (80024b0 <HAL_DMA_Init+0x1f4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_DMA_Init+0xbc>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <HAL_DMA_Init+0xbe>
 8002378:	2300      	movs	r3, #0
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 813b 	beq.w	80025f6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a37      	ldr	r2, [pc, #220]	; (8002474 <HAL_DMA_Init+0x1b8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d04a      	beq.n	8002430 <HAL_DMA_Init+0x174>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a36      	ldr	r2, [pc, #216]	; (8002478 <HAL_DMA_Init+0x1bc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d045      	beq.n	8002430 <HAL_DMA_Init+0x174>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a34      	ldr	r2, [pc, #208]	; (800247c <HAL_DMA_Init+0x1c0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d040      	beq.n	8002430 <HAL_DMA_Init+0x174>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a33      	ldr	r2, [pc, #204]	; (8002480 <HAL_DMA_Init+0x1c4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d03b      	beq.n	8002430 <HAL_DMA_Init+0x174>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a31      	ldr	r2, [pc, #196]	; (8002484 <HAL_DMA_Init+0x1c8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d036      	beq.n	8002430 <HAL_DMA_Init+0x174>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a30      	ldr	r2, [pc, #192]	; (8002488 <HAL_DMA_Init+0x1cc>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d031      	beq.n	8002430 <HAL_DMA_Init+0x174>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a2e      	ldr	r2, [pc, #184]	; (800248c <HAL_DMA_Init+0x1d0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d02c      	beq.n	8002430 <HAL_DMA_Init+0x174>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a2d      	ldr	r2, [pc, #180]	; (8002490 <HAL_DMA_Init+0x1d4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d027      	beq.n	8002430 <HAL_DMA_Init+0x174>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a2b      	ldr	r2, [pc, #172]	; (8002494 <HAL_DMA_Init+0x1d8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d022      	beq.n	8002430 <HAL_DMA_Init+0x174>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a2a      	ldr	r2, [pc, #168]	; (8002498 <HAL_DMA_Init+0x1dc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d01d      	beq.n	8002430 <HAL_DMA_Init+0x174>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a28      	ldr	r2, [pc, #160]	; (800249c <HAL_DMA_Init+0x1e0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d018      	beq.n	8002430 <HAL_DMA_Init+0x174>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <HAL_DMA_Init+0x1e4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d013      	beq.n	8002430 <HAL_DMA_Init+0x174>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a25      	ldr	r2, [pc, #148]	; (80024a4 <HAL_DMA_Init+0x1e8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00e      	beq.n	8002430 <HAL_DMA_Init+0x174>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a24      	ldr	r2, [pc, #144]	; (80024a8 <HAL_DMA_Init+0x1ec>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d009      	beq.n	8002430 <HAL_DMA_Init+0x174>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a22      	ldr	r2, [pc, #136]	; (80024ac <HAL_DMA_Init+0x1f0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d004      	beq.n	8002430 <HAL_DMA_Init+0x174>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a21      	ldr	r2, [pc, #132]	; (80024b0 <HAL_DMA_Init+0x1f4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d108      	bne.n	8002442 <HAL_DMA_Init+0x186>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	e007      	b.n	8002452 <HAL_DMA_Init+0x196>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0201 	bic.w	r2, r2, #1
 8002450:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002452:	e02f      	b.n	80024b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002454:	f7ff fd86 	bl	8001f64 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b05      	cmp	r3, #5
 8002460:	d928      	bls.n	80024b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2220      	movs	r2, #32
 8002466:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2203      	movs	r2, #3
 800246c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e246      	b.n	8002902 <HAL_DMA_Init+0x646>
 8002474:	40020010 	.word	0x40020010
 8002478:	40020028 	.word	0x40020028
 800247c:	40020040 	.word	0x40020040
 8002480:	40020058 	.word	0x40020058
 8002484:	40020070 	.word	0x40020070
 8002488:	40020088 	.word	0x40020088
 800248c:	400200a0 	.word	0x400200a0
 8002490:	400200b8 	.word	0x400200b8
 8002494:	40020410 	.word	0x40020410
 8002498:	40020428 	.word	0x40020428
 800249c:	40020440 	.word	0x40020440
 80024a0:	40020458 	.word	0x40020458
 80024a4:	40020470 	.word	0x40020470
 80024a8:	40020488 	.word	0x40020488
 80024ac:	400204a0 	.word	0x400204a0
 80024b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1c8      	bne.n	8002454 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4b83      	ldr	r3, [pc, #524]	; (80026dc <HAL_DMA_Init+0x420>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80024da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	2b04      	cmp	r3, #4
 8002506:	d107      	bne.n	8002518 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	4313      	orrs	r3, r2
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002518:	4b71      	ldr	r3, [pc, #452]	; (80026e0 <HAL_DMA_Init+0x424>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b71      	ldr	r3, [pc, #452]	; (80026e4 <HAL_DMA_Init+0x428>)
 800251e:	4013      	ands	r3, r2
 8002520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002524:	d328      	bcc.n	8002578 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b28      	cmp	r3, #40	; 0x28
 800252c:	d903      	bls.n	8002536 <HAL_DMA_Init+0x27a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b2e      	cmp	r3, #46	; 0x2e
 8002534:	d917      	bls.n	8002566 <HAL_DMA_Init+0x2aa>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b3e      	cmp	r3, #62	; 0x3e
 800253c:	d903      	bls.n	8002546 <HAL_DMA_Init+0x28a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b42      	cmp	r3, #66	; 0x42
 8002544:	d90f      	bls.n	8002566 <HAL_DMA_Init+0x2aa>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b46      	cmp	r3, #70	; 0x46
 800254c:	d903      	bls.n	8002556 <HAL_DMA_Init+0x29a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b48      	cmp	r3, #72	; 0x48
 8002554:	d907      	bls.n	8002566 <HAL_DMA_Init+0x2aa>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b4e      	cmp	r3, #78	; 0x4e
 800255c:	d905      	bls.n	800256a <HAL_DMA_Init+0x2ae>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b52      	cmp	r3, #82	; 0x52
 8002564:	d801      	bhi.n	800256a <HAL_DMA_Init+0x2ae>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_DMA_Init+0x2b0>
 800256a:	2300      	movs	r3, #0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002576:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f023 0307 	bic.w	r3, r3, #7
 800258e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	4313      	orrs	r3, r2
 8002598:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d117      	bne.n	80025d2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00e      	beq.n	80025d2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f002 fb3f 	bl	8004c38 <DMA_CheckFifoParam>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2240      	movs	r2, #64	; 0x40
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e197      	b.n	8002902 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f002 fa7a 	bl	8004ad4 <DMA_CalcBaseAndBitshift>
 80025e0:	4603      	mov	r3, r0
 80025e2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	223f      	movs	r2, #63	; 0x3f
 80025ee:	409a      	lsls	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	e0cd      	b.n	8002792 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a3b      	ldr	r2, [pc, #236]	; (80026e8 <HAL_DMA_Init+0x42c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d022      	beq.n	8002646 <HAL_DMA_Init+0x38a>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a39      	ldr	r2, [pc, #228]	; (80026ec <HAL_DMA_Init+0x430>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d01d      	beq.n	8002646 <HAL_DMA_Init+0x38a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a38      	ldr	r2, [pc, #224]	; (80026f0 <HAL_DMA_Init+0x434>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d018      	beq.n	8002646 <HAL_DMA_Init+0x38a>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a36      	ldr	r2, [pc, #216]	; (80026f4 <HAL_DMA_Init+0x438>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_DMA_Init+0x38a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a35      	ldr	r2, [pc, #212]	; (80026f8 <HAL_DMA_Init+0x43c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00e      	beq.n	8002646 <HAL_DMA_Init+0x38a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a33      	ldr	r2, [pc, #204]	; (80026fc <HAL_DMA_Init+0x440>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d009      	beq.n	8002646 <HAL_DMA_Init+0x38a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a32      	ldr	r2, [pc, #200]	; (8002700 <HAL_DMA_Init+0x444>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d004      	beq.n	8002646 <HAL_DMA_Init+0x38a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a30      	ldr	r2, [pc, #192]	; (8002704 <HAL_DMA_Init+0x448>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_DMA_Init+0x38e>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_DMA_Init+0x390>
 800264a:	2300      	movs	r3, #0
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 8097 	beq.w	8002780 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a24      	ldr	r2, [pc, #144]	; (80026e8 <HAL_DMA_Init+0x42c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d021      	beq.n	80026a0 <HAL_DMA_Init+0x3e4>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a22      	ldr	r2, [pc, #136]	; (80026ec <HAL_DMA_Init+0x430>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01c      	beq.n	80026a0 <HAL_DMA_Init+0x3e4>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a21      	ldr	r2, [pc, #132]	; (80026f0 <HAL_DMA_Init+0x434>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d017      	beq.n	80026a0 <HAL_DMA_Init+0x3e4>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1f      	ldr	r2, [pc, #124]	; (80026f4 <HAL_DMA_Init+0x438>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d012      	beq.n	80026a0 <HAL_DMA_Init+0x3e4>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1e      	ldr	r2, [pc, #120]	; (80026f8 <HAL_DMA_Init+0x43c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00d      	beq.n	80026a0 <HAL_DMA_Init+0x3e4>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1c      	ldr	r2, [pc, #112]	; (80026fc <HAL_DMA_Init+0x440>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d008      	beq.n	80026a0 <HAL_DMA_Init+0x3e4>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1b      	ldr	r2, [pc, #108]	; (8002700 <HAL_DMA_Init+0x444>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d003      	beq.n	80026a0 <HAL_DMA_Init+0x3e4>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a19      	ldr	r2, [pc, #100]	; (8002704 <HAL_DMA_Init+0x448>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2202      	movs	r2, #2
 80026a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_DMA_Init+0x44c>)
 80026be:	4013      	ands	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b40      	cmp	r3, #64	; 0x40
 80026c8:	d020      	beq.n	800270c <HAL_DMA_Init+0x450>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b80      	cmp	r3, #128	; 0x80
 80026d0:	d102      	bne.n	80026d8 <HAL_DMA_Init+0x41c>
 80026d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026d6:	e01a      	b.n	800270e <HAL_DMA_Init+0x452>
 80026d8:	2300      	movs	r3, #0
 80026da:	e018      	b.n	800270e <HAL_DMA_Init+0x452>
 80026dc:	fe10803f 	.word	0xfe10803f
 80026e0:	5c001000 	.word	0x5c001000
 80026e4:	ffff0000 	.word	0xffff0000
 80026e8:	58025408 	.word	0x58025408
 80026ec:	5802541c 	.word	0x5802541c
 80026f0:	58025430 	.word	0x58025430
 80026f4:	58025444 	.word	0x58025444
 80026f8:	58025458 	.word	0x58025458
 80026fc:	5802546c 	.word	0x5802546c
 8002700:	58025480 	.word	0x58025480
 8002704:	58025494 	.word	0x58025494
 8002708:	fffe000f 	.word	0xfffe000f
 800270c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68d2      	ldr	r2, [r2, #12]
 8002712:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002714:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800271c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002724:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800272c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002734:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800273c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4313      	orrs	r3, r2
 8002742:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	4b6e      	ldr	r3, [pc, #440]	; (800290c <HAL_DMA_Init+0x650>)
 8002754:	4413      	add	r3, r2
 8002756:	4a6e      	ldr	r2, [pc, #440]	; (8002910 <HAL_DMA_Init+0x654>)
 8002758:	fba2 2303 	umull	r2, r3, r2, r3
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	009a      	lsls	r2, r3, #2
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f002 f9b5 	bl	8004ad4 <DMA_CalcBaseAndBitshift>
 800276a:	4603      	mov	r3, r0
 800276c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	2201      	movs	r2, #1
 8002778:	409a      	lsls	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	e008      	b.n	8002792 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2240      	movs	r2, #64	; 0x40
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2203      	movs	r2, #3
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e0b7      	b.n	8002902 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a5f      	ldr	r2, [pc, #380]	; (8002914 <HAL_DMA_Init+0x658>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d072      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a5d      	ldr	r2, [pc, #372]	; (8002918 <HAL_DMA_Init+0x65c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d06d      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a5c      	ldr	r2, [pc, #368]	; (800291c <HAL_DMA_Init+0x660>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d068      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a5a      	ldr	r2, [pc, #360]	; (8002920 <HAL_DMA_Init+0x664>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d063      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a59      	ldr	r2, [pc, #356]	; (8002924 <HAL_DMA_Init+0x668>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d05e      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a57      	ldr	r2, [pc, #348]	; (8002928 <HAL_DMA_Init+0x66c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d059      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a56      	ldr	r2, [pc, #344]	; (800292c <HAL_DMA_Init+0x670>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d054      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a54      	ldr	r2, [pc, #336]	; (8002930 <HAL_DMA_Init+0x674>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d04f      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a53      	ldr	r2, [pc, #332]	; (8002934 <HAL_DMA_Init+0x678>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d04a      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a51      	ldr	r2, [pc, #324]	; (8002938 <HAL_DMA_Init+0x67c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d045      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a50      	ldr	r2, [pc, #320]	; (800293c <HAL_DMA_Init+0x680>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d040      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a4e      	ldr	r2, [pc, #312]	; (8002940 <HAL_DMA_Init+0x684>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d03b      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a4d      	ldr	r2, [pc, #308]	; (8002944 <HAL_DMA_Init+0x688>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d036      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a4b      	ldr	r2, [pc, #300]	; (8002948 <HAL_DMA_Init+0x68c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d031      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a4a      	ldr	r2, [pc, #296]	; (800294c <HAL_DMA_Init+0x690>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d02c      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a48      	ldr	r2, [pc, #288]	; (8002950 <HAL_DMA_Init+0x694>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d027      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a47      	ldr	r2, [pc, #284]	; (8002954 <HAL_DMA_Init+0x698>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d022      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a45      	ldr	r2, [pc, #276]	; (8002958 <HAL_DMA_Init+0x69c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d01d      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a44      	ldr	r2, [pc, #272]	; (800295c <HAL_DMA_Init+0x6a0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d018      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a42      	ldr	r2, [pc, #264]	; (8002960 <HAL_DMA_Init+0x6a4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a41      	ldr	r2, [pc, #260]	; (8002964 <HAL_DMA_Init+0x6a8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00e      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a3f      	ldr	r2, [pc, #252]	; (8002968 <HAL_DMA_Init+0x6ac>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d009      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a3e      	ldr	r2, [pc, #248]	; (800296c <HAL_DMA_Init+0x6b0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d004      	beq.n	8002882 <HAL_DMA_Init+0x5c6>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a3c      	ldr	r2, [pc, #240]	; (8002970 <HAL_DMA_Init+0x6b4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <HAL_DMA_Init+0x5ca>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_DMA_Init+0x5cc>
 8002886:	2300      	movs	r3, #0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d032      	beq.n	80028f2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f002 fa4f 	bl	8004d30 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b80      	cmp	r3, #128	; 0x80
 8002898:	d102      	bne.n	80028a0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d010      	beq.n	80028e0 <HAL_DMA_Init+0x624>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d80c      	bhi.n	80028e0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f002 facc 	bl	8004e64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	e008      	b.n	80028f2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	a7fdabf8 	.word	0xa7fdabf8
 8002910:	cccccccd 	.word	0xcccccccd
 8002914:	40020010 	.word	0x40020010
 8002918:	40020028 	.word	0x40020028
 800291c:	40020040 	.word	0x40020040
 8002920:	40020058 	.word	0x40020058
 8002924:	40020070 	.word	0x40020070
 8002928:	40020088 	.word	0x40020088
 800292c:	400200a0 	.word	0x400200a0
 8002930:	400200b8 	.word	0x400200b8
 8002934:	40020410 	.word	0x40020410
 8002938:	40020428 	.word	0x40020428
 800293c:	40020440 	.word	0x40020440
 8002940:	40020458 	.word	0x40020458
 8002944:	40020470 	.word	0x40020470
 8002948:	40020488 	.word	0x40020488
 800294c:	400204a0 	.word	0x400204a0
 8002950:	400204b8 	.word	0x400204b8
 8002954:	58025408 	.word	0x58025408
 8002958:	5802541c 	.word	0x5802541c
 800295c:	58025430 	.word	0x58025430
 8002960:	58025444 	.word	0x58025444
 8002964:	58025458 	.word	0x58025458
 8002968:	5802546c 	.word	0x5802546c
 800296c:	58025480 	.word	0x58025480
 8002970:	58025494 	.word	0x58025494

08002974 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e226      	b.n	8002dde <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_DMA_Start_IT+0x2a>
 800299a:	2302      	movs	r3, #2
 800299c:	e21f      	b.n	8002dde <HAL_DMA_Start_IT+0x46a>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	f040 820a 	bne.w	8002dc8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a68      	ldr	r2, [pc, #416]	; (8002b68 <HAL_DMA_Start_IT+0x1f4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d04a      	beq.n	8002a62 <HAL_DMA_Start_IT+0xee>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a66      	ldr	r2, [pc, #408]	; (8002b6c <HAL_DMA_Start_IT+0x1f8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d045      	beq.n	8002a62 <HAL_DMA_Start_IT+0xee>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a65      	ldr	r2, [pc, #404]	; (8002b70 <HAL_DMA_Start_IT+0x1fc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d040      	beq.n	8002a62 <HAL_DMA_Start_IT+0xee>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a63      	ldr	r2, [pc, #396]	; (8002b74 <HAL_DMA_Start_IT+0x200>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d03b      	beq.n	8002a62 <HAL_DMA_Start_IT+0xee>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a62      	ldr	r2, [pc, #392]	; (8002b78 <HAL_DMA_Start_IT+0x204>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d036      	beq.n	8002a62 <HAL_DMA_Start_IT+0xee>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a60      	ldr	r2, [pc, #384]	; (8002b7c <HAL_DMA_Start_IT+0x208>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d031      	beq.n	8002a62 <HAL_DMA_Start_IT+0xee>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a5f      	ldr	r2, [pc, #380]	; (8002b80 <HAL_DMA_Start_IT+0x20c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d02c      	beq.n	8002a62 <HAL_DMA_Start_IT+0xee>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a5d      	ldr	r2, [pc, #372]	; (8002b84 <HAL_DMA_Start_IT+0x210>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d027      	beq.n	8002a62 <HAL_DMA_Start_IT+0xee>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a5c      	ldr	r2, [pc, #368]	; (8002b88 <HAL_DMA_Start_IT+0x214>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d022      	beq.n	8002a62 <HAL_DMA_Start_IT+0xee>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a5a      	ldr	r2, [pc, #360]	; (8002b8c <HAL_DMA_Start_IT+0x218>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01d      	beq.n	8002a62 <HAL_DMA_Start_IT+0xee>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a59      	ldr	r2, [pc, #356]	; (8002b90 <HAL_DMA_Start_IT+0x21c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d018      	beq.n	8002a62 <HAL_DMA_Start_IT+0xee>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a57      	ldr	r2, [pc, #348]	; (8002b94 <HAL_DMA_Start_IT+0x220>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <HAL_DMA_Start_IT+0xee>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a56      	ldr	r2, [pc, #344]	; (8002b98 <HAL_DMA_Start_IT+0x224>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00e      	beq.n	8002a62 <HAL_DMA_Start_IT+0xee>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a54      	ldr	r2, [pc, #336]	; (8002b9c <HAL_DMA_Start_IT+0x228>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d009      	beq.n	8002a62 <HAL_DMA_Start_IT+0xee>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a53      	ldr	r2, [pc, #332]	; (8002ba0 <HAL_DMA_Start_IT+0x22c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d004      	beq.n	8002a62 <HAL_DMA_Start_IT+0xee>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a51      	ldr	r2, [pc, #324]	; (8002ba4 <HAL_DMA_Start_IT+0x230>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d108      	bne.n	8002a74 <HAL_DMA_Start_IT+0x100>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e007      	b.n	8002a84 <HAL_DMA_Start_IT+0x110>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f001 fe76 	bl	800477c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a34      	ldr	r2, [pc, #208]	; (8002b68 <HAL_DMA_Start_IT+0x1f4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d04a      	beq.n	8002b30 <HAL_DMA_Start_IT+0x1bc>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a33      	ldr	r2, [pc, #204]	; (8002b6c <HAL_DMA_Start_IT+0x1f8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d045      	beq.n	8002b30 <HAL_DMA_Start_IT+0x1bc>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a31      	ldr	r2, [pc, #196]	; (8002b70 <HAL_DMA_Start_IT+0x1fc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d040      	beq.n	8002b30 <HAL_DMA_Start_IT+0x1bc>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a30      	ldr	r2, [pc, #192]	; (8002b74 <HAL_DMA_Start_IT+0x200>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d03b      	beq.n	8002b30 <HAL_DMA_Start_IT+0x1bc>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2e      	ldr	r2, [pc, #184]	; (8002b78 <HAL_DMA_Start_IT+0x204>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d036      	beq.n	8002b30 <HAL_DMA_Start_IT+0x1bc>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2d      	ldr	r2, [pc, #180]	; (8002b7c <HAL_DMA_Start_IT+0x208>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d031      	beq.n	8002b30 <HAL_DMA_Start_IT+0x1bc>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2b      	ldr	r2, [pc, #172]	; (8002b80 <HAL_DMA_Start_IT+0x20c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d02c      	beq.n	8002b30 <HAL_DMA_Start_IT+0x1bc>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a2a      	ldr	r2, [pc, #168]	; (8002b84 <HAL_DMA_Start_IT+0x210>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d027      	beq.n	8002b30 <HAL_DMA_Start_IT+0x1bc>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a28      	ldr	r2, [pc, #160]	; (8002b88 <HAL_DMA_Start_IT+0x214>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d022      	beq.n	8002b30 <HAL_DMA_Start_IT+0x1bc>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a27      	ldr	r2, [pc, #156]	; (8002b8c <HAL_DMA_Start_IT+0x218>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d01d      	beq.n	8002b30 <HAL_DMA_Start_IT+0x1bc>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a25      	ldr	r2, [pc, #148]	; (8002b90 <HAL_DMA_Start_IT+0x21c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d018      	beq.n	8002b30 <HAL_DMA_Start_IT+0x1bc>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a24      	ldr	r2, [pc, #144]	; (8002b94 <HAL_DMA_Start_IT+0x220>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d013      	beq.n	8002b30 <HAL_DMA_Start_IT+0x1bc>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a22      	ldr	r2, [pc, #136]	; (8002b98 <HAL_DMA_Start_IT+0x224>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00e      	beq.n	8002b30 <HAL_DMA_Start_IT+0x1bc>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a21      	ldr	r2, [pc, #132]	; (8002b9c <HAL_DMA_Start_IT+0x228>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_DMA_Start_IT+0x1bc>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <HAL_DMA_Start_IT+0x22c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d004      	beq.n	8002b30 <HAL_DMA_Start_IT+0x1bc>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ba4 <HAL_DMA_Start_IT+0x230>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d101      	bne.n	8002b34 <HAL_DMA_Start_IT+0x1c0>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <HAL_DMA_Start_IT+0x1c2>
 8002b34:	2300      	movs	r3, #0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d036      	beq.n	8002ba8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 021e 	bic.w	r2, r3, #30
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0216 	orr.w	r2, r2, #22
 8002b4c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d03e      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0208 	orr.w	r2, r2, #8
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	e035      	b.n	8002bd4 <HAL_DMA_Start_IT+0x260>
 8002b68:	40020010 	.word	0x40020010
 8002b6c:	40020028 	.word	0x40020028
 8002b70:	40020040 	.word	0x40020040
 8002b74:	40020058 	.word	0x40020058
 8002b78:	40020070 	.word	0x40020070
 8002b7c:	40020088 	.word	0x40020088
 8002b80:	400200a0 	.word	0x400200a0
 8002b84:	400200b8 	.word	0x400200b8
 8002b88:	40020410 	.word	0x40020410
 8002b8c:	40020428 	.word	0x40020428
 8002b90:	40020440 	.word	0x40020440
 8002b94:	40020458 	.word	0x40020458
 8002b98:	40020470 	.word	0x40020470
 8002b9c:	40020488 	.word	0x40020488
 8002ba0:	400204a0 	.word	0x400204a0
 8002ba4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 020e 	bic.w	r2, r3, #14
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 020a 	orr.w	r2, r2, #10
 8002bba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0204 	orr.w	r2, r2, #4
 8002bd2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a83      	ldr	r2, [pc, #524]	; (8002de8 <HAL_DMA_Start_IT+0x474>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d072      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a82      	ldr	r2, [pc, #520]	; (8002dec <HAL_DMA_Start_IT+0x478>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d06d      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a80      	ldr	r2, [pc, #512]	; (8002df0 <HAL_DMA_Start_IT+0x47c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d068      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a7f      	ldr	r2, [pc, #508]	; (8002df4 <HAL_DMA_Start_IT+0x480>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d063      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a7d      	ldr	r2, [pc, #500]	; (8002df8 <HAL_DMA_Start_IT+0x484>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d05e      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a7c      	ldr	r2, [pc, #496]	; (8002dfc <HAL_DMA_Start_IT+0x488>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d059      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a7a      	ldr	r2, [pc, #488]	; (8002e00 <HAL_DMA_Start_IT+0x48c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d054      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a79      	ldr	r2, [pc, #484]	; (8002e04 <HAL_DMA_Start_IT+0x490>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d04f      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a77      	ldr	r2, [pc, #476]	; (8002e08 <HAL_DMA_Start_IT+0x494>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d04a      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a76      	ldr	r2, [pc, #472]	; (8002e0c <HAL_DMA_Start_IT+0x498>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d045      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a74      	ldr	r2, [pc, #464]	; (8002e10 <HAL_DMA_Start_IT+0x49c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d040      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a73      	ldr	r2, [pc, #460]	; (8002e14 <HAL_DMA_Start_IT+0x4a0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d03b      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a71      	ldr	r2, [pc, #452]	; (8002e18 <HAL_DMA_Start_IT+0x4a4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d036      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a70      	ldr	r2, [pc, #448]	; (8002e1c <HAL_DMA_Start_IT+0x4a8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d031      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6e      	ldr	r2, [pc, #440]	; (8002e20 <HAL_DMA_Start_IT+0x4ac>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d02c      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a6d      	ldr	r2, [pc, #436]	; (8002e24 <HAL_DMA_Start_IT+0x4b0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d027      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a6b      	ldr	r2, [pc, #428]	; (8002e28 <HAL_DMA_Start_IT+0x4b4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d022      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a6a      	ldr	r2, [pc, #424]	; (8002e2c <HAL_DMA_Start_IT+0x4b8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d01d      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a68      	ldr	r2, [pc, #416]	; (8002e30 <HAL_DMA_Start_IT+0x4bc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d018      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a67      	ldr	r2, [pc, #412]	; (8002e34 <HAL_DMA_Start_IT+0x4c0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d013      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a65      	ldr	r2, [pc, #404]	; (8002e38 <HAL_DMA_Start_IT+0x4c4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d00e      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a64      	ldr	r2, [pc, #400]	; (8002e3c <HAL_DMA_Start_IT+0x4c8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d009      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a62      	ldr	r2, [pc, #392]	; (8002e40 <HAL_DMA_Start_IT+0x4cc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d004      	beq.n	8002cc4 <HAL_DMA_Start_IT+0x350>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a61      	ldr	r2, [pc, #388]	; (8002e44 <HAL_DMA_Start_IT+0x4d0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d101      	bne.n	8002cc8 <HAL_DMA_Start_IT+0x354>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <HAL_DMA_Start_IT+0x356>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01a      	beq.n	8002d04 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d02:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a37      	ldr	r2, [pc, #220]	; (8002de8 <HAL_DMA_Start_IT+0x474>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d04a      	beq.n	8002da4 <HAL_DMA_Start_IT+0x430>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a36      	ldr	r2, [pc, #216]	; (8002dec <HAL_DMA_Start_IT+0x478>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d045      	beq.n	8002da4 <HAL_DMA_Start_IT+0x430>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a34      	ldr	r2, [pc, #208]	; (8002df0 <HAL_DMA_Start_IT+0x47c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d040      	beq.n	8002da4 <HAL_DMA_Start_IT+0x430>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a33      	ldr	r2, [pc, #204]	; (8002df4 <HAL_DMA_Start_IT+0x480>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d03b      	beq.n	8002da4 <HAL_DMA_Start_IT+0x430>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a31      	ldr	r2, [pc, #196]	; (8002df8 <HAL_DMA_Start_IT+0x484>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d036      	beq.n	8002da4 <HAL_DMA_Start_IT+0x430>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a30      	ldr	r2, [pc, #192]	; (8002dfc <HAL_DMA_Start_IT+0x488>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d031      	beq.n	8002da4 <HAL_DMA_Start_IT+0x430>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a2e      	ldr	r2, [pc, #184]	; (8002e00 <HAL_DMA_Start_IT+0x48c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d02c      	beq.n	8002da4 <HAL_DMA_Start_IT+0x430>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a2d      	ldr	r2, [pc, #180]	; (8002e04 <HAL_DMA_Start_IT+0x490>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d027      	beq.n	8002da4 <HAL_DMA_Start_IT+0x430>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a2b      	ldr	r2, [pc, #172]	; (8002e08 <HAL_DMA_Start_IT+0x494>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d022      	beq.n	8002da4 <HAL_DMA_Start_IT+0x430>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a2a      	ldr	r2, [pc, #168]	; (8002e0c <HAL_DMA_Start_IT+0x498>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d01d      	beq.n	8002da4 <HAL_DMA_Start_IT+0x430>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a28      	ldr	r2, [pc, #160]	; (8002e10 <HAL_DMA_Start_IT+0x49c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d018      	beq.n	8002da4 <HAL_DMA_Start_IT+0x430>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <HAL_DMA_Start_IT+0x4a0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d013      	beq.n	8002da4 <HAL_DMA_Start_IT+0x430>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a25      	ldr	r2, [pc, #148]	; (8002e18 <HAL_DMA_Start_IT+0x4a4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00e      	beq.n	8002da4 <HAL_DMA_Start_IT+0x430>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a24      	ldr	r2, [pc, #144]	; (8002e1c <HAL_DMA_Start_IT+0x4a8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d009      	beq.n	8002da4 <HAL_DMA_Start_IT+0x430>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a22      	ldr	r2, [pc, #136]	; (8002e20 <HAL_DMA_Start_IT+0x4ac>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d004      	beq.n	8002da4 <HAL_DMA_Start_IT+0x430>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a21      	ldr	r2, [pc, #132]	; (8002e24 <HAL_DMA_Start_IT+0x4b0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d108      	bne.n	8002db6 <HAL_DMA_Start_IT+0x442>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e012      	b.n	8002ddc <HAL_DMA_Start_IT+0x468>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	e009      	b.n	8002ddc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40020010 	.word	0x40020010
 8002dec:	40020028 	.word	0x40020028
 8002df0:	40020040 	.word	0x40020040
 8002df4:	40020058 	.word	0x40020058
 8002df8:	40020070 	.word	0x40020070
 8002dfc:	40020088 	.word	0x40020088
 8002e00:	400200a0 	.word	0x400200a0
 8002e04:	400200b8 	.word	0x400200b8
 8002e08:	40020410 	.word	0x40020410
 8002e0c:	40020428 	.word	0x40020428
 8002e10:	40020440 	.word	0x40020440
 8002e14:	40020458 	.word	0x40020458
 8002e18:	40020470 	.word	0x40020470
 8002e1c:	40020488 	.word	0x40020488
 8002e20:	400204a0 	.word	0x400204a0
 8002e24:	400204b8 	.word	0x400204b8
 8002e28:	58025408 	.word	0x58025408
 8002e2c:	5802541c 	.word	0x5802541c
 8002e30:	58025430 	.word	0x58025430
 8002e34:	58025444 	.word	0x58025444
 8002e38:	58025458 	.word	0x58025458
 8002e3c:	5802546c 	.word	0x5802546c
 8002e40:	58025480 	.word	0x58025480
 8002e44:	58025494 	.word	0x58025494

08002e48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e50:	f7ff f888 	bl	8001f64 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e2dc      	b.n	800341a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d008      	beq.n	8002e7e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e2cd      	b.n	800341a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a76      	ldr	r2, [pc, #472]	; (800305c <HAL_DMA_Abort+0x214>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d04a      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a74      	ldr	r2, [pc, #464]	; (8003060 <HAL_DMA_Abort+0x218>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d045      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a73      	ldr	r2, [pc, #460]	; (8003064 <HAL_DMA_Abort+0x21c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d040      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a71      	ldr	r2, [pc, #452]	; (8003068 <HAL_DMA_Abort+0x220>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d03b      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a70      	ldr	r2, [pc, #448]	; (800306c <HAL_DMA_Abort+0x224>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d036      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a6e      	ldr	r2, [pc, #440]	; (8003070 <HAL_DMA_Abort+0x228>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d031      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a6d      	ldr	r2, [pc, #436]	; (8003074 <HAL_DMA_Abort+0x22c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d02c      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a6b      	ldr	r2, [pc, #428]	; (8003078 <HAL_DMA_Abort+0x230>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d027      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a6a      	ldr	r2, [pc, #424]	; (800307c <HAL_DMA_Abort+0x234>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d022      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a68      	ldr	r2, [pc, #416]	; (8003080 <HAL_DMA_Abort+0x238>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d01d      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a67      	ldr	r2, [pc, #412]	; (8003084 <HAL_DMA_Abort+0x23c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d018      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a65      	ldr	r2, [pc, #404]	; (8003088 <HAL_DMA_Abort+0x240>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a64      	ldr	r2, [pc, #400]	; (800308c <HAL_DMA_Abort+0x244>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00e      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a62      	ldr	r2, [pc, #392]	; (8003090 <HAL_DMA_Abort+0x248>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d009      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a61      	ldr	r2, [pc, #388]	; (8003094 <HAL_DMA_Abort+0x24c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d004      	beq.n	8002f1e <HAL_DMA_Abort+0xd6>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a5f      	ldr	r2, [pc, #380]	; (8003098 <HAL_DMA_Abort+0x250>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <HAL_DMA_Abort+0xda>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_DMA_Abort+0xdc>
 8002f22:	2300      	movs	r3, #0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 021e 	bic.w	r2, r2, #30
 8002f36:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f46:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e00a      	b.n	8002f66 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 020e 	bic.w	r2, r2, #14
 8002f5e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a3c      	ldr	r2, [pc, #240]	; (800305c <HAL_DMA_Abort+0x214>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d072      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a3a      	ldr	r2, [pc, #232]	; (8003060 <HAL_DMA_Abort+0x218>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d06d      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a39      	ldr	r2, [pc, #228]	; (8003064 <HAL_DMA_Abort+0x21c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d068      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a37      	ldr	r2, [pc, #220]	; (8003068 <HAL_DMA_Abort+0x220>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d063      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a36      	ldr	r2, [pc, #216]	; (800306c <HAL_DMA_Abort+0x224>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d05e      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a34      	ldr	r2, [pc, #208]	; (8003070 <HAL_DMA_Abort+0x228>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d059      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a33      	ldr	r2, [pc, #204]	; (8003074 <HAL_DMA_Abort+0x22c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d054      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a31      	ldr	r2, [pc, #196]	; (8003078 <HAL_DMA_Abort+0x230>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d04f      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a30      	ldr	r2, [pc, #192]	; (800307c <HAL_DMA_Abort+0x234>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d04a      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a2e      	ldr	r2, [pc, #184]	; (8003080 <HAL_DMA_Abort+0x238>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d045      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a2d      	ldr	r2, [pc, #180]	; (8003084 <HAL_DMA_Abort+0x23c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d040      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <HAL_DMA_Abort+0x240>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d03b      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a2a      	ldr	r2, [pc, #168]	; (800308c <HAL_DMA_Abort+0x244>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d036      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a28      	ldr	r2, [pc, #160]	; (8003090 <HAL_DMA_Abort+0x248>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d031      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a27      	ldr	r2, [pc, #156]	; (8003094 <HAL_DMA_Abort+0x24c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d02c      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a25      	ldr	r2, [pc, #148]	; (8003098 <HAL_DMA_Abort+0x250>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d027      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a24      	ldr	r2, [pc, #144]	; (800309c <HAL_DMA_Abort+0x254>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d022      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a22      	ldr	r2, [pc, #136]	; (80030a0 <HAL_DMA_Abort+0x258>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d01d      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a21      	ldr	r2, [pc, #132]	; (80030a4 <HAL_DMA_Abort+0x25c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d018      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1f      	ldr	r2, [pc, #124]	; (80030a8 <HAL_DMA_Abort+0x260>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1e      	ldr	r2, [pc, #120]	; (80030ac <HAL_DMA_Abort+0x264>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00e      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <HAL_DMA_Abort+0x268>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d009      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1b      	ldr	r2, [pc, #108]	; (80030b4 <HAL_DMA_Abort+0x26c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d004      	beq.n	8003056 <HAL_DMA_Abort+0x20e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <HAL_DMA_Abort+0x270>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d132      	bne.n	80030bc <HAL_DMA_Abort+0x274>
 8003056:	2301      	movs	r3, #1
 8003058:	e031      	b.n	80030be <HAL_DMA_Abort+0x276>
 800305a:	bf00      	nop
 800305c:	40020010 	.word	0x40020010
 8003060:	40020028 	.word	0x40020028
 8003064:	40020040 	.word	0x40020040
 8003068:	40020058 	.word	0x40020058
 800306c:	40020070 	.word	0x40020070
 8003070:	40020088 	.word	0x40020088
 8003074:	400200a0 	.word	0x400200a0
 8003078:	400200b8 	.word	0x400200b8
 800307c:	40020410 	.word	0x40020410
 8003080:	40020428 	.word	0x40020428
 8003084:	40020440 	.word	0x40020440
 8003088:	40020458 	.word	0x40020458
 800308c:	40020470 	.word	0x40020470
 8003090:	40020488 	.word	0x40020488
 8003094:	400204a0 	.word	0x400204a0
 8003098:	400204b8 	.word	0x400204b8
 800309c:	58025408 	.word	0x58025408
 80030a0:	5802541c 	.word	0x5802541c
 80030a4:	58025430 	.word	0x58025430
 80030a8:	58025444 	.word	0x58025444
 80030ac:	58025458 	.word	0x58025458
 80030b0:	5802546c 	.word	0x5802546c
 80030b4:	58025480 	.word	0x58025480
 80030b8:	58025494 	.word	0x58025494
 80030bc:	2300      	movs	r3, #0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a6d      	ldr	r2, [pc, #436]	; (800328c <HAL_DMA_Abort+0x444>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d04a      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a6b      	ldr	r2, [pc, #428]	; (8003290 <HAL_DMA_Abort+0x448>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d045      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6a      	ldr	r2, [pc, #424]	; (8003294 <HAL_DMA_Abort+0x44c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d040      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a68      	ldr	r2, [pc, #416]	; (8003298 <HAL_DMA_Abort+0x450>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d03b      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a67      	ldr	r2, [pc, #412]	; (800329c <HAL_DMA_Abort+0x454>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d036      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a65      	ldr	r2, [pc, #404]	; (80032a0 <HAL_DMA_Abort+0x458>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d031      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a64      	ldr	r2, [pc, #400]	; (80032a4 <HAL_DMA_Abort+0x45c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d02c      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a62      	ldr	r2, [pc, #392]	; (80032a8 <HAL_DMA_Abort+0x460>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d027      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a61      	ldr	r2, [pc, #388]	; (80032ac <HAL_DMA_Abort+0x464>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d022      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a5f      	ldr	r2, [pc, #380]	; (80032b0 <HAL_DMA_Abort+0x468>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d01d      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a5e      	ldr	r2, [pc, #376]	; (80032b4 <HAL_DMA_Abort+0x46c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d018      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a5c      	ldr	r2, [pc, #368]	; (80032b8 <HAL_DMA_Abort+0x470>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a5b      	ldr	r2, [pc, #364]	; (80032bc <HAL_DMA_Abort+0x474>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00e      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a59      	ldr	r2, [pc, #356]	; (80032c0 <HAL_DMA_Abort+0x478>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d009      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a58      	ldr	r2, [pc, #352]	; (80032c4 <HAL_DMA_Abort+0x47c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d004      	beq.n	8003172 <HAL_DMA_Abort+0x32a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a56      	ldr	r2, [pc, #344]	; (80032c8 <HAL_DMA_Abort+0x480>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d108      	bne.n	8003184 <HAL_DMA_Abort+0x33c>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	e007      	b.n	8003194 <HAL_DMA_Abort+0x34c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003194:	e013      	b.n	80031be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003196:	f7fe fee5 	bl	8001f64 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b05      	cmp	r3, #5
 80031a2:	d90c      	bls.n	80031be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2203      	movs	r2, #3
 80031ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e12d      	b.n	800341a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e5      	bne.n	8003196 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2f      	ldr	r2, [pc, #188]	; (800328c <HAL_DMA_Abort+0x444>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d04a      	beq.n	800326a <HAL_DMA_Abort+0x422>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2d      	ldr	r2, [pc, #180]	; (8003290 <HAL_DMA_Abort+0x448>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d045      	beq.n	800326a <HAL_DMA_Abort+0x422>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2c      	ldr	r2, [pc, #176]	; (8003294 <HAL_DMA_Abort+0x44c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d040      	beq.n	800326a <HAL_DMA_Abort+0x422>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a2a      	ldr	r2, [pc, #168]	; (8003298 <HAL_DMA_Abort+0x450>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d03b      	beq.n	800326a <HAL_DMA_Abort+0x422>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a29      	ldr	r2, [pc, #164]	; (800329c <HAL_DMA_Abort+0x454>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d036      	beq.n	800326a <HAL_DMA_Abort+0x422>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a27      	ldr	r2, [pc, #156]	; (80032a0 <HAL_DMA_Abort+0x458>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d031      	beq.n	800326a <HAL_DMA_Abort+0x422>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a26      	ldr	r2, [pc, #152]	; (80032a4 <HAL_DMA_Abort+0x45c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d02c      	beq.n	800326a <HAL_DMA_Abort+0x422>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a24      	ldr	r2, [pc, #144]	; (80032a8 <HAL_DMA_Abort+0x460>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d027      	beq.n	800326a <HAL_DMA_Abort+0x422>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a23      	ldr	r2, [pc, #140]	; (80032ac <HAL_DMA_Abort+0x464>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d022      	beq.n	800326a <HAL_DMA_Abort+0x422>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a21      	ldr	r2, [pc, #132]	; (80032b0 <HAL_DMA_Abort+0x468>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01d      	beq.n	800326a <HAL_DMA_Abort+0x422>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a20      	ldr	r2, [pc, #128]	; (80032b4 <HAL_DMA_Abort+0x46c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d018      	beq.n	800326a <HAL_DMA_Abort+0x422>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1e      	ldr	r2, [pc, #120]	; (80032b8 <HAL_DMA_Abort+0x470>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d013      	beq.n	800326a <HAL_DMA_Abort+0x422>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1d      	ldr	r2, [pc, #116]	; (80032bc <HAL_DMA_Abort+0x474>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00e      	beq.n	800326a <HAL_DMA_Abort+0x422>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1b      	ldr	r2, [pc, #108]	; (80032c0 <HAL_DMA_Abort+0x478>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d009      	beq.n	800326a <HAL_DMA_Abort+0x422>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <HAL_DMA_Abort+0x47c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d004      	beq.n	800326a <HAL_DMA_Abort+0x422>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a18      	ldr	r2, [pc, #96]	; (80032c8 <HAL_DMA_Abort+0x480>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <HAL_DMA_Abort+0x426>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <HAL_DMA_Abort+0x428>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d02b      	beq.n	80032cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003278:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	223f      	movs	r2, #63	; 0x3f
 8003284:	409a      	lsls	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	609a      	str	r2, [r3, #8]
 800328a:	e02a      	b.n	80032e2 <HAL_DMA_Abort+0x49a>
 800328c:	40020010 	.word	0x40020010
 8003290:	40020028 	.word	0x40020028
 8003294:	40020040 	.word	0x40020040
 8003298:	40020058 	.word	0x40020058
 800329c:	40020070 	.word	0x40020070
 80032a0:	40020088 	.word	0x40020088
 80032a4:	400200a0 	.word	0x400200a0
 80032a8:	400200b8 	.word	0x400200b8
 80032ac:	40020410 	.word	0x40020410
 80032b0:	40020428 	.word	0x40020428
 80032b4:	40020440 	.word	0x40020440
 80032b8:	40020458 	.word	0x40020458
 80032bc:	40020470 	.word	0x40020470
 80032c0:	40020488 	.word	0x40020488
 80032c4:	400204a0 	.word	0x400204a0
 80032c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2201      	movs	r2, #1
 80032dc:	409a      	lsls	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a4f      	ldr	r2, [pc, #316]	; (8003424 <HAL_DMA_Abort+0x5dc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d072      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a4d      	ldr	r2, [pc, #308]	; (8003428 <HAL_DMA_Abort+0x5e0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d06d      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a4c      	ldr	r2, [pc, #304]	; (800342c <HAL_DMA_Abort+0x5e4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d068      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a4a      	ldr	r2, [pc, #296]	; (8003430 <HAL_DMA_Abort+0x5e8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d063      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a49      	ldr	r2, [pc, #292]	; (8003434 <HAL_DMA_Abort+0x5ec>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d05e      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a47      	ldr	r2, [pc, #284]	; (8003438 <HAL_DMA_Abort+0x5f0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d059      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a46      	ldr	r2, [pc, #280]	; (800343c <HAL_DMA_Abort+0x5f4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d054      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a44      	ldr	r2, [pc, #272]	; (8003440 <HAL_DMA_Abort+0x5f8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d04f      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a43      	ldr	r2, [pc, #268]	; (8003444 <HAL_DMA_Abort+0x5fc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d04a      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a41      	ldr	r2, [pc, #260]	; (8003448 <HAL_DMA_Abort+0x600>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d045      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a40      	ldr	r2, [pc, #256]	; (800344c <HAL_DMA_Abort+0x604>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d040      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a3e      	ldr	r2, [pc, #248]	; (8003450 <HAL_DMA_Abort+0x608>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d03b      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a3d      	ldr	r2, [pc, #244]	; (8003454 <HAL_DMA_Abort+0x60c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d036      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a3b      	ldr	r2, [pc, #236]	; (8003458 <HAL_DMA_Abort+0x610>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d031      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a3a      	ldr	r2, [pc, #232]	; (800345c <HAL_DMA_Abort+0x614>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d02c      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a38      	ldr	r2, [pc, #224]	; (8003460 <HAL_DMA_Abort+0x618>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d027      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a37      	ldr	r2, [pc, #220]	; (8003464 <HAL_DMA_Abort+0x61c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d022      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a35      	ldr	r2, [pc, #212]	; (8003468 <HAL_DMA_Abort+0x620>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01d      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a34      	ldr	r2, [pc, #208]	; (800346c <HAL_DMA_Abort+0x624>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d018      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a32      	ldr	r2, [pc, #200]	; (8003470 <HAL_DMA_Abort+0x628>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a31      	ldr	r2, [pc, #196]	; (8003474 <HAL_DMA_Abort+0x62c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00e      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a2f      	ldr	r2, [pc, #188]	; (8003478 <HAL_DMA_Abort+0x630>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a2e      	ldr	r2, [pc, #184]	; (800347c <HAL_DMA_Abort+0x634>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d004      	beq.n	80033d2 <HAL_DMA_Abort+0x58a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a2c      	ldr	r2, [pc, #176]	; (8003480 <HAL_DMA_Abort+0x638>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_DMA_Abort+0x58e>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_DMA_Abort+0x590>
 80033d6:	2300      	movs	r3, #0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d015      	beq.n	8003408 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80033e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00c      	beq.n	8003408 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003406:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40020010 	.word	0x40020010
 8003428:	40020028 	.word	0x40020028
 800342c:	40020040 	.word	0x40020040
 8003430:	40020058 	.word	0x40020058
 8003434:	40020070 	.word	0x40020070
 8003438:	40020088 	.word	0x40020088
 800343c:	400200a0 	.word	0x400200a0
 8003440:	400200b8 	.word	0x400200b8
 8003444:	40020410 	.word	0x40020410
 8003448:	40020428 	.word	0x40020428
 800344c:	40020440 	.word	0x40020440
 8003450:	40020458 	.word	0x40020458
 8003454:	40020470 	.word	0x40020470
 8003458:	40020488 	.word	0x40020488
 800345c:	400204a0 	.word	0x400204a0
 8003460:	400204b8 	.word	0x400204b8
 8003464:	58025408 	.word	0x58025408
 8003468:	5802541c 	.word	0x5802541c
 800346c:	58025430 	.word	0x58025430
 8003470:	58025444 	.word	0x58025444
 8003474:	58025458 	.word	0x58025458
 8003478:	5802546c 	.word	0x5802546c
 800347c:	58025480 	.word	0x58025480
 8003480:	58025494 	.word	0x58025494

08003484 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e237      	b.n	8003906 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d004      	beq.n	80034ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2280      	movs	r2, #128	; 0x80
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e22c      	b.n	8003906 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a5c      	ldr	r2, [pc, #368]	; (8003624 <HAL_DMA_Abort_IT+0x1a0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d04a      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a5b      	ldr	r2, [pc, #364]	; (8003628 <HAL_DMA_Abort_IT+0x1a4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d045      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a59      	ldr	r2, [pc, #356]	; (800362c <HAL_DMA_Abort_IT+0x1a8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d040      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a58      	ldr	r2, [pc, #352]	; (8003630 <HAL_DMA_Abort_IT+0x1ac>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d03b      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a56      	ldr	r2, [pc, #344]	; (8003634 <HAL_DMA_Abort_IT+0x1b0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d036      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a55      	ldr	r2, [pc, #340]	; (8003638 <HAL_DMA_Abort_IT+0x1b4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d031      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a53      	ldr	r2, [pc, #332]	; (800363c <HAL_DMA_Abort_IT+0x1b8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d02c      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a52      	ldr	r2, [pc, #328]	; (8003640 <HAL_DMA_Abort_IT+0x1bc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d027      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a50      	ldr	r2, [pc, #320]	; (8003644 <HAL_DMA_Abort_IT+0x1c0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d022      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a4f      	ldr	r2, [pc, #316]	; (8003648 <HAL_DMA_Abort_IT+0x1c4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d01d      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a4d      	ldr	r2, [pc, #308]	; (800364c <HAL_DMA_Abort_IT+0x1c8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d018      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a4c      	ldr	r2, [pc, #304]	; (8003650 <HAL_DMA_Abort_IT+0x1cc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d013      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a4a      	ldr	r2, [pc, #296]	; (8003654 <HAL_DMA_Abort_IT+0x1d0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00e      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a49      	ldr	r2, [pc, #292]	; (8003658 <HAL_DMA_Abort_IT+0x1d4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d009      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a47      	ldr	r2, [pc, #284]	; (800365c <HAL_DMA_Abort_IT+0x1d8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_DMA_Abort_IT+0xc8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a46      	ldr	r2, [pc, #280]	; (8003660 <HAL_DMA_Abort_IT+0x1dc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d101      	bne.n	8003550 <HAL_DMA_Abort_IT+0xcc>
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <HAL_DMA_Abort_IT+0xce>
 8003550:	2300      	movs	r3, #0
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8086 	beq.w	8003664 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2204      	movs	r2, #4
 800355c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a2f      	ldr	r2, [pc, #188]	; (8003624 <HAL_DMA_Abort_IT+0x1a0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d04a      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a2e      	ldr	r2, [pc, #184]	; (8003628 <HAL_DMA_Abort_IT+0x1a4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d045      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a2c      	ldr	r2, [pc, #176]	; (800362c <HAL_DMA_Abort_IT+0x1a8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d040      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2b      	ldr	r2, [pc, #172]	; (8003630 <HAL_DMA_Abort_IT+0x1ac>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d03b      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a29      	ldr	r2, [pc, #164]	; (8003634 <HAL_DMA_Abort_IT+0x1b0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d036      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a28      	ldr	r2, [pc, #160]	; (8003638 <HAL_DMA_Abort_IT+0x1b4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d031      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a26      	ldr	r2, [pc, #152]	; (800363c <HAL_DMA_Abort_IT+0x1b8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d02c      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a25      	ldr	r2, [pc, #148]	; (8003640 <HAL_DMA_Abort_IT+0x1bc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d027      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a23      	ldr	r2, [pc, #140]	; (8003644 <HAL_DMA_Abort_IT+0x1c0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d022      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a22      	ldr	r2, [pc, #136]	; (8003648 <HAL_DMA_Abort_IT+0x1c4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d01d      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a20      	ldr	r2, [pc, #128]	; (800364c <HAL_DMA_Abort_IT+0x1c8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d018      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1f      	ldr	r2, [pc, #124]	; (8003650 <HAL_DMA_Abort_IT+0x1cc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d013      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1d      	ldr	r2, [pc, #116]	; (8003654 <HAL_DMA_Abort_IT+0x1d0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00e      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <HAL_DMA_Abort_IT+0x1d4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d009      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1a      	ldr	r2, [pc, #104]	; (800365c <HAL_DMA_Abort_IT+0x1d8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d004      	beq.n	8003600 <HAL_DMA_Abort_IT+0x17c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a19      	ldr	r2, [pc, #100]	; (8003660 <HAL_DMA_Abort_IT+0x1dc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d108      	bne.n	8003612 <HAL_DMA_Abort_IT+0x18e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e178      	b.n	8003904 <HAL_DMA_Abort_IT+0x480>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0201 	bic.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	e16f      	b.n	8003904 <HAL_DMA_Abort_IT+0x480>
 8003624:	40020010 	.word	0x40020010
 8003628:	40020028 	.word	0x40020028
 800362c:	40020040 	.word	0x40020040
 8003630:	40020058 	.word	0x40020058
 8003634:	40020070 	.word	0x40020070
 8003638:	40020088 	.word	0x40020088
 800363c:	400200a0 	.word	0x400200a0
 8003640:	400200b8 	.word	0x400200b8
 8003644:	40020410 	.word	0x40020410
 8003648:	40020428 	.word	0x40020428
 800364c:	40020440 	.word	0x40020440
 8003650:	40020458 	.word	0x40020458
 8003654:	40020470 	.word	0x40020470
 8003658:	40020488 	.word	0x40020488
 800365c:	400204a0 	.word	0x400204a0
 8003660:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 020e 	bic.w	r2, r2, #14
 8003672:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a6c      	ldr	r2, [pc, #432]	; (800382c <HAL_DMA_Abort_IT+0x3a8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d04a      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a6b      	ldr	r2, [pc, #428]	; (8003830 <HAL_DMA_Abort_IT+0x3ac>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d045      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a69      	ldr	r2, [pc, #420]	; (8003834 <HAL_DMA_Abort_IT+0x3b0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d040      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a68      	ldr	r2, [pc, #416]	; (8003838 <HAL_DMA_Abort_IT+0x3b4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d03b      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a66      	ldr	r2, [pc, #408]	; (800383c <HAL_DMA_Abort_IT+0x3b8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d036      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a65      	ldr	r2, [pc, #404]	; (8003840 <HAL_DMA_Abort_IT+0x3bc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d031      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a63      	ldr	r2, [pc, #396]	; (8003844 <HAL_DMA_Abort_IT+0x3c0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d02c      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a62      	ldr	r2, [pc, #392]	; (8003848 <HAL_DMA_Abort_IT+0x3c4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d027      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a60      	ldr	r2, [pc, #384]	; (800384c <HAL_DMA_Abort_IT+0x3c8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d022      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a5f      	ldr	r2, [pc, #380]	; (8003850 <HAL_DMA_Abort_IT+0x3cc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d01d      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a5d      	ldr	r2, [pc, #372]	; (8003854 <HAL_DMA_Abort_IT+0x3d0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d018      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a5c      	ldr	r2, [pc, #368]	; (8003858 <HAL_DMA_Abort_IT+0x3d4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d013      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a5a      	ldr	r2, [pc, #360]	; (800385c <HAL_DMA_Abort_IT+0x3d8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00e      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a59      	ldr	r2, [pc, #356]	; (8003860 <HAL_DMA_Abort_IT+0x3dc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d009      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a57      	ldr	r2, [pc, #348]	; (8003864 <HAL_DMA_Abort_IT+0x3e0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_DMA_Abort_IT+0x290>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a56      	ldr	r2, [pc, #344]	; (8003868 <HAL_DMA_Abort_IT+0x3e4>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d108      	bne.n	8003726 <HAL_DMA_Abort_IT+0x2a2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	e007      	b.n	8003736 <HAL_DMA_Abort_IT+0x2b2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a3c      	ldr	r2, [pc, #240]	; (800382c <HAL_DMA_Abort_IT+0x3a8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d072      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a3a      	ldr	r2, [pc, #232]	; (8003830 <HAL_DMA_Abort_IT+0x3ac>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d06d      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a39      	ldr	r2, [pc, #228]	; (8003834 <HAL_DMA_Abort_IT+0x3b0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d068      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a37      	ldr	r2, [pc, #220]	; (8003838 <HAL_DMA_Abort_IT+0x3b4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d063      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a36      	ldr	r2, [pc, #216]	; (800383c <HAL_DMA_Abort_IT+0x3b8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d05e      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a34      	ldr	r2, [pc, #208]	; (8003840 <HAL_DMA_Abort_IT+0x3bc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d059      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a33      	ldr	r2, [pc, #204]	; (8003844 <HAL_DMA_Abort_IT+0x3c0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d054      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a31      	ldr	r2, [pc, #196]	; (8003848 <HAL_DMA_Abort_IT+0x3c4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d04f      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a30      	ldr	r2, [pc, #192]	; (800384c <HAL_DMA_Abort_IT+0x3c8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d04a      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a2e      	ldr	r2, [pc, #184]	; (8003850 <HAL_DMA_Abort_IT+0x3cc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d045      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a2d      	ldr	r2, [pc, #180]	; (8003854 <HAL_DMA_Abort_IT+0x3d0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d040      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a2b      	ldr	r2, [pc, #172]	; (8003858 <HAL_DMA_Abort_IT+0x3d4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d03b      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a2a      	ldr	r2, [pc, #168]	; (800385c <HAL_DMA_Abort_IT+0x3d8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d036      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a28      	ldr	r2, [pc, #160]	; (8003860 <HAL_DMA_Abort_IT+0x3dc>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d031      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a27      	ldr	r2, [pc, #156]	; (8003864 <HAL_DMA_Abort_IT+0x3e0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d02c      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a25      	ldr	r2, [pc, #148]	; (8003868 <HAL_DMA_Abort_IT+0x3e4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d027      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a24      	ldr	r2, [pc, #144]	; (800386c <HAL_DMA_Abort_IT+0x3e8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d022      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a22      	ldr	r2, [pc, #136]	; (8003870 <HAL_DMA_Abort_IT+0x3ec>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d01d      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a21      	ldr	r2, [pc, #132]	; (8003874 <HAL_DMA_Abort_IT+0x3f0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d018      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1f      	ldr	r2, [pc, #124]	; (8003878 <HAL_DMA_Abort_IT+0x3f4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d013      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1e      	ldr	r2, [pc, #120]	; (800387c <HAL_DMA_Abort_IT+0x3f8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00e      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <HAL_DMA_Abort_IT+0x3fc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d009      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1b      	ldr	r2, [pc, #108]	; (8003884 <HAL_DMA_Abort_IT+0x400>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_DMA_Abort_IT+0x3a2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a19      	ldr	r2, [pc, #100]	; (8003888 <HAL_DMA_Abort_IT+0x404>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d132      	bne.n	800388c <HAL_DMA_Abort_IT+0x408>
 8003826:	2301      	movs	r3, #1
 8003828:	e031      	b.n	800388e <HAL_DMA_Abort_IT+0x40a>
 800382a:	bf00      	nop
 800382c:	40020010 	.word	0x40020010
 8003830:	40020028 	.word	0x40020028
 8003834:	40020040 	.word	0x40020040
 8003838:	40020058 	.word	0x40020058
 800383c:	40020070 	.word	0x40020070
 8003840:	40020088 	.word	0x40020088
 8003844:	400200a0 	.word	0x400200a0
 8003848:	400200b8 	.word	0x400200b8
 800384c:	40020410 	.word	0x40020410
 8003850:	40020428 	.word	0x40020428
 8003854:	40020440 	.word	0x40020440
 8003858:	40020458 	.word	0x40020458
 800385c:	40020470 	.word	0x40020470
 8003860:	40020488 	.word	0x40020488
 8003864:	400204a0 	.word	0x400204a0
 8003868:	400204b8 	.word	0x400204b8
 800386c:	58025408 	.word	0x58025408
 8003870:	5802541c 	.word	0x5802541c
 8003874:	58025430 	.word	0x58025430
 8003878:	58025444 	.word	0x58025444
 800387c:	58025458 	.word	0x58025458
 8003880:	5802546c 	.word	0x5802546c
 8003884:	58025480 	.word	0x58025480
 8003888:	58025494 	.word	0x58025494
 800388c:	2300      	movs	r3, #0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d028      	beq.n	80038e4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	2201      	movs	r2, #1
 80038b2:	409a      	lsls	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00c      	beq.n	80038e4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop

08003910 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	; 0x28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800391c:	4b67      	ldr	r3, [pc, #412]	; (8003abc <HAL_DMA_IRQHandler+0x1ac>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a67      	ldr	r2, [pc, #412]	; (8003ac0 <HAL_DMA_IRQHandler+0x1b0>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	0a9b      	lsrs	r3, r3, #10
 8003928:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003934:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a5f      	ldr	r2, [pc, #380]	; (8003ac4 <HAL_DMA_IRQHandler+0x1b4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d04a      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xd2>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a5d      	ldr	r2, [pc, #372]	; (8003ac8 <HAL_DMA_IRQHandler+0x1b8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d045      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xd2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a5c      	ldr	r2, [pc, #368]	; (8003acc <HAL_DMA_IRQHandler+0x1bc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d040      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xd2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a5a      	ldr	r2, [pc, #360]	; (8003ad0 <HAL_DMA_IRQHandler+0x1c0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d03b      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xd2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a59      	ldr	r2, [pc, #356]	; (8003ad4 <HAL_DMA_IRQHandler+0x1c4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d036      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xd2>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a57      	ldr	r2, [pc, #348]	; (8003ad8 <HAL_DMA_IRQHandler+0x1c8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d031      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xd2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a56      	ldr	r2, [pc, #344]	; (8003adc <HAL_DMA_IRQHandler+0x1cc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d02c      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xd2>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a54      	ldr	r2, [pc, #336]	; (8003ae0 <HAL_DMA_IRQHandler+0x1d0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d027      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xd2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a53      	ldr	r2, [pc, #332]	; (8003ae4 <HAL_DMA_IRQHandler+0x1d4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d022      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xd2>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a51      	ldr	r2, [pc, #324]	; (8003ae8 <HAL_DMA_IRQHandler+0x1d8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01d      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xd2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a50      	ldr	r2, [pc, #320]	; (8003aec <HAL_DMA_IRQHandler+0x1dc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d018      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xd2>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a4e      	ldr	r2, [pc, #312]	; (8003af0 <HAL_DMA_IRQHandler+0x1e0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xd2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a4d      	ldr	r2, [pc, #308]	; (8003af4 <HAL_DMA_IRQHandler+0x1e4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00e      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xd2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a4b      	ldr	r2, [pc, #300]	; (8003af8 <HAL_DMA_IRQHandler+0x1e8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d009      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xd2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a4a      	ldr	r2, [pc, #296]	; (8003afc <HAL_DMA_IRQHandler+0x1ec>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d004      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xd2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a48      	ldr	r2, [pc, #288]	; (8003b00 <HAL_DMA_IRQHandler+0x1f0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d101      	bne.n	80039e6 <HAL_DMA_IRQHandler+0xd6>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <HAL_DMA_IRQHandler+0xd8>
 80039e6:	2300      	movs	r3, #0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 842b 	beq.w	8004244 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	2208      	movs	r2, #8
 80039f8:	409a      	lsls	r2, r3
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 80a2 	beq.w	8003b48 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a2e      	ldr	r2, [pc, #184]	; (8003ac4 <HAL_DMA_IRQHandler+0x1b4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d04a      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x194>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2d      	ldr	r2, [pc, #180]	; (8003ac8 <HAL_DMA_IRQHandler+0x1b8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d045      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x194>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a2b      	ldr	r2, [pc, #172]	; (8003acc <HAL_DMA_IRQHandler+0x1bc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d040      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x194>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a2a      	ldr	r2, [pc, #168]	; (8003ad0 <HAL_DMA_IRQHandler+0x1c0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d03b      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x194>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a28      	ldr	r2, [pc, #160]	; (8003ad4 <HAL_DMA_IRQHandler+0x1c4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d036      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x194>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a27      	ldr	r2, [pc, #156]	; (8003ad8 <HAL_DMA_IRQHandler+0x1c8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d031      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x194>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a25      	ldr	r2, [pc, #148]	; (8003adc <HAL_DMA_IRQHandler+0x1cc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d02c      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x194>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a24      	ldr	r2, [pc, #144]	; (8003ae0 <HAL_DMA_IRQHandler+0x1d0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d027      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x194>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <HAL_DMA_IRQHandler+0x1d4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d022      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x194>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <HAL_DMA_IRQHandler+0x1d8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d01d      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x194>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	; (8003aec <HAL_DMA_IRQHandler+0x1dc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d018      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x194>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <HAL_DMA_IRQHandler+0x1e0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d013      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x194>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a1c      	ldr	r2, [pc, #112]	; (8003af4 <HAL_DMA_IRQHandler+0x1e4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00e      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x194>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1b      	ldr	r2, [pc, #108]	; (8003af8 <HAL_DMA_IRQHandler+0x1e8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d009      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x194>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a19      	ldr	r2, [pc, #100]	; (8003afc <HAL_DMA_IRQHandler+0x1ec>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d004      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x194>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a18      	ldr	r2, [pc, #96]	; (8003b00 <HAL_DMA_IRQHandler+0x1f0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d12f      	bne.n	8003b04 <HAL_DMA_IRQHandler+0x1f4>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bf14      	ite	ne
 8003ab2:	2301      	movne	r3, #1
 8003ab4:	2300      	moveq	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	e02e      	b.n	8003b18 <HAL_DMA_IRQHandler+0x208>
 8003aba:	bf00      	nop
 8003abc:	20000000 	.word	0x20000000
 8003ac0:	1b4e81b5 	.word	0x1b4e81b5
 8003ac4:	40020010 	.word	0x40020010
 8003ac8:	40020028 	.word	0x40020028
 8003acc:	40020040 	.word	0x40020040
 8003ad0:	40020058 	.word	0x40020058
 8003ad4:	40020070 	.word	0x40020070
 8003ad8:	40020088 	.word	0x40020088
 8003adc:	400200a0 	.word	0x400200a0
 8003ae0:	400200b8 	.word	0x400200b8
 8003ae4:	40020410 	.word	0x40020410
 8003ae8:	40020428 	.word	0x40020428
 8003aec:	40020440 	.word	0x40020440
 8003af0:	40020458 	.word	0x40020458
 8003af4:	40020470 	.word	0x40020470
 8003af8:	40020488 	.word	0x40020488
 8003afc:	400204a0 	.word	0x400204a0
 8003b00:	400204b8 	.word	0x400204b8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	bf14      	ite	ne
 8003b12:	2301      	movne	r3, #1
 8003b14:	2300      	moveq	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d015      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0204 	bic.w	r2, r2, #4
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	2208      	movs	r2, #8
 8003b36:	409a      	lsls	r2, r3
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b40:	f043 0201 	orr.w	r2, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	fa22 f303 	lsr.w	r3, r2, r3
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d06e      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a69      	ldr	r2, [pc, #420]	; (8003d08 <HAL_DMA_IRQHandler+0x3f8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d04a      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x2ee>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a67      	ldr	r2, [pc, #412]	; (8003d0c <HAL_DMA_IRQHandler+0x3fc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d045      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x2ee>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a66      	ldr	r2, [pc, #408]	; (8003d10 <HAL_DMA_IRQHandler+0x400>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d040      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x2ee>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a64      	ldr	r2, [pc, #400]	; (8003d14 <HAL_DMA_IRQHandler+0x404>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d03b      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x2ee>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a63      	ldr	r2, [pc, #396]	; (8003d18 <HAL_DMA_IRQHandler+0x408>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d036      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x2ee>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a61      	ldr	r2, [pc, #388]	; (8003d1c <HAL_DMA_IRQHandler+0x40c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d031      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x2ee>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a60      	ldr	r2, [pc, #384]	; (8003d20 <HAL_DMA_IRQHandler+0x410>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d02c      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x2ee>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a5e      	ldr	r2, [pc, #376]	; (8003d24 <HAL_DMA_IRQHandler+0x414>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d027      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x2ee>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a5d      	ldr	r2, [pc, #372]	; (8003d28 <HAL_DMA_IRQHandler+0x418>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d022      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x2ee>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a5b      	ldr	r2, [pc, #364]	; (8003d2c <HAL_DMA_IRQHandler+0x41c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d01d      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x2ee>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a5a      	ldr	r2, [pc, #360]	; (8003d30 <HAL_DMA_IRQHandler+0x420>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d018      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x2ee>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a58      	ldr	r2, [pc, #352]	; (8003d34 <HAL_DMA_IRQHandler+0x424>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x2ee>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a57      	ldr	r2, [pc, #348]	; (8003d38 <HAL_DMA_IRQHandler+0x428>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00e      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x2ee>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a55      	ldr	r2, [pc, #340]	; (8003d3c <HAL_DMA_IRQHandler+0x42c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d009      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x2ee>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a54      	ldr	r2, [pc, #336]	; (8003d40 <HAL_DMA_IRQHandler+0x430>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d004      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x2ee>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a52      	ldr	r2, [pc, #328]	; (8003d44 <HAL_DMA_IRQHandler+0x434>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d10a      	bne.n	8003c14 <HAL_DMA_IRQHandler+0x304>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e003      	b.n	8003c1c <HAL_DMA_IRQHandler+0x30c>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00d      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	2201      	movs	r2, #1
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	f043 0202 	orr.w	r2, r3, #2
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	2204      	movs	r2, #4
 8003c46:	409a      	lsls	r2, r3
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 808f 	beq.w	8003d70 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a2c      	ldr	r2, [pc, #176]	; (8003d08 <HAL_DMA_IRQHandler+0x3f8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d04a      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x3e2>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a2a      	ldr	r2, [pc, #168]	; (8003d0c <HAL_DMA_IRQHandler+0x3fc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d045      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x3e2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a29      	ldr	r2, [pc, #164]	; (8003d10 <HAL_DMA_IRQHandler+0x400>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d040      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x3e2>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a27      	ldr	r2, [pc, #156]	; (8003d14 <HAL_DMA_IRQHandler+0x404>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d03b      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x3e2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a26      	ldr	r2, [pc, #152]	; (8003d18 <HAL_DMA_IRQHandler+0x408>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d036      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x3e2>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a24      	ldr	r2, [pc, #144]	; (8003d1c <HAL_DMA_IRQHandler+0x40c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d031      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x3e2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a23      	ldr	r2, [pc, #140]	; (8003d20 <HAL_DMA_IRQHandler+0x410>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d02c      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x3e2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <HAL_DMA_IRQHandler+0x414>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d027      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x3e2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a20      	ldr	r2, [pc, #128]	; (8003d28 <HAL_DMA_IRQHandler+0x418>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d022      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x3e2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <HAL_DMA_IRQHandler+0x41c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01d      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x3e2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <HAL_DMA_IRQHandler+0x420>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d018      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x3e2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <HAL_DMA_IRQHandler+0x424>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x3e2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1a      	ldr	r2, [pc, #104]	; (8003d38 <HAL_DMA_IRQHandler+0x428>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x3e2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <HAL_DMA_IRQHandler+0x42c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d009      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x3e2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a17      	ldr	r2, [pc, #92]	; (8003d40 <HAL_DMA_IRQHandler+0x430>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x3e2>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a15      	ldr	r2, [pc, #84]	; (8003d44 <HAL_DMA_IRQHandler+0x434>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d12a      	bne.n	8003d48 <HAL_DMA_IRQHandler+0x438>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf14      	ite	ne
 8003d00:	2301      	movne	r3, #1
 8003d02:	2300      	moveq	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	e023      	b.n	8003d50 <HAL_DMA_IRQHandler+0x440>
 8003d08:	40020010 	.word	0x40020010
 8003d0c:	40020028 	.word	0x40020028
 8003d10:	40020040 	.word	0x40020040
 8003d14:	40020058 	.word	0x40020058
 8003d18:	40020070 	.word	0x40020070
 8003d1c:	40020088 	.word	0x40020088
 8003d20:	400200a0 	.word	0x400200a0
 8003d24:	400200b8 	.word	0x400200b8
 8003d28:	40020410 	.word	0x40020410
 8003d2c:	40020428 	.word	0x40020428
 8003d30:	40020440 	.word	0x40020440
 8003d34:	40020458 	.word	0x40020458
 8003d38:	40020470 	.word	0x40020470
 8003d3c:	40020488 	.word	0x40020488
 8003d40:	400204a0 	.word	0x400204a0
 8003d44:	400204b8 	.word	0x400204b8
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00d      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d68:	f043 0204 	orr.w	r2, r3, #4
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	2210      	movs	r2, #16
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 80a6 	beq.w	8003ed2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a85      	ldr	r2, [pc, #532]	; (8003fa0 <HAL_DMA_IRQHandler+0x690>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d04a      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x516>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a83      	ldr	r2, [pc, #524]	; (8003fa4 <HAL_DMA_IRQHandler+0x694>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d045      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x516>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a82      	ldr	r2, [pc, #520]	; (8003fa8 <HAL_DMA_IRQHandler+0x698>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d040      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x516>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a80      	ldr	r2, [pc, #512]	; (8003fac <HAL_DMA_IRQHandler+0x69c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d03b      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x516>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7f      	ldr	r2, [pc, #508]	; (8003fb0 <HAL_DMA_IRQHandler+0x6a0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d036      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x516>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a7d      	ldr	r2, [pc, #500]	; (8003fb4 <HAL_DMA_IRQHandler+0x6a4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d031      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x516>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a7c      	ldr	r2, [pc, #496]	; (8003fb8 <HAL_DMA_IRQHandler+0x6a8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d02c      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x516>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a7a      	ldr	r2, [pc, #488]	; (8003fbc <HAL_DMA_IRQHandler+0x6ac>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d027      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x516>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a79      	ldr	r2, [pc, #484]	; (8003fc0 <HAL_DMA_IRQHandler+0x6b0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d022      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x516>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a77      	ldr	r2, [pc, #476]	; (8003fc4 <HAL_DMA_IRQHandler+0x6b4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d01d      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x516>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a76      	ldr	r2, [pc, #472]	; (8003fc8 <HAL_DMA_IRQHandler+0x6b8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d018      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x516>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a74      	ldr	r2, [pc, #464]	; (8003fcc <HAL_DMA_IRQHandler+0x6bc>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x516>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a73      	ldr	r2, [pc, #460]	; (8003fd0 <HAL_DMA_IRQHandler+0x6c0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00e      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x516>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a71      	ldr	r2, [pc, #452]	; (8003fd4 <HAL_DMA_IRQHandler+0x6c4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d009      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x516>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a70      	ldr	r2, [pc, #448]	; (8003fd8 <HAL_DMA_IRQHandler+0x6c8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d004      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x516>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a6e      	ldr	r2, [pc, #440]	; (8003fdc <HAL_DMA_IRQHandler+0x6cc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d10a      	bne.n	8003e3c <HAL_DMA_IRQHandler+0x52c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	bf14      	ite	ne
 8003e34:	2301      	movne	r3, #1
 8003e36:	2300      	moveq	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	e009      	b.n	8003e50 <HAL_DMA_IRQHandler+0x540>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bf14      	ite	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	2300      	moveq	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d03e      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d018      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d108      	bne.n	8003e92 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d024      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
 8003e90:	e01f      	b.n	8003ed2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01b      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	4798      	blx	r3
 8003ea2:	e016      	b.n	8003ed2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d107      	bne.n	8003ec2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0208 	bic.w	r2, r2, #8
 8003ec0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed6:	f003 031f 	and.w	r3, r3, #31
 8003eda:	2220      	movs	r2, #32
 8003edc:	409a      	lsls	r2, r3
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 8110 	beq.w	8004108 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a2c      	ldr	r2, [pc, #176]	; (8003fa0 <HAL_DMA_IRQHandler+0x690>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d04a      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x678>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2b      	ldr	r2, [pc, #172]	; (8003fa4 <HAL_DMA_IRQHandler+0x694>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d045      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x678>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <HAL_DMA_IRQHandler+0x698>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d040      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x678>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a28      	ldr	r2, [pc, #160]	; (8003fac <HAL_DMA_IRQHandler+0x69c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d03b      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x678>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a26      	ldr	r2, [pc, #152]	; (8003fb0 <HAL_DMA_IRQHandler+0x6a0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d036      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x678>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a25      	ldr	r2, [pc, #148]	; (8003fb4 <HAL_DMA_IRQHandler+0x6a4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d031      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x678>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a23      	ldr	r2, [pc, #140]	; (8003fb8 <HAL_DMA_IRQHandler+0x6a8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d02c      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x678>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a22      	ldr	r2, [pc, #136]	; (8003fbc <HAL_DMA_IRQHandler+0x6ac>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d027      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x678>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a20      	ldr	r2, [pc, #128]	; (8003fc0 <HAL_DMA_IRQHandler+0x6b0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d022      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x678>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1f      	ldr	r2, [pc, #124]	; (8003fc4 <HAL_DMA_IRQHandler+0x6b4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d01d      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x678>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1d      	ldr	r2, [pc, #116]	; (8003fc8 <HAL_DMA_IRQHandler+0x6b8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d018      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x678>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a1c      	ldr	r2, [pc, #112]	; (8003fcc <HAL_DMA_IRQHandler+0x6bc>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d013      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x678>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1a      	ldr	r2, [pc, #104]	; (8003fd0 <HAL_DMA_IRQHandler+0x6c0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00e      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x678>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a19      	ldr	r2, [pc, #100]	; (8003fd4 <HAL_DMA_IRQHandler+0x6c4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d009      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x678>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a17      	ldr	r2, [pc, #92]	; (8003fd8 <HAL_DMA_IRQHandler+0x6c8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x678>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a16      	ldr	r2, [pc, #88]	; (8003fdc <HAL_DMA_IRQHandler+0x6cc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d12b      	bne.n	8003fe0 <HAL_DMA_IRQHandler+0x6d0>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	bf14      	ite	ne
 8003f96:	2301      	movne	r3, #1
 8003f98:	2300      	moveq	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	e02a      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x6e4>
 8003f9e:	bf00      	nop
 8003fa0:	40020010 	.word	0x40020010
 8003fa4:	40020028 	.word	0x40020028
 8003fa8:	40020040 	.word	0x40020040
 8003fac:	40020058 	.word	0x40020058
 8003fb0:	40020070 	.word	0x40020070
 8003fb4:	40020088 	.word	0x40020088
 8003fb8:	400200a0 	.word	0x400200a0
 8003fbc:	400200b8 	.word	0x400200b8
 8003fc0:	40020410 	.word	0x40020410
 8003fc4:	40020428 	.word	0x40020428
 8003fc8:	40020440 	.word	0x40020440
 8003fcc:	40020458 	.word	0x40020458
 8003fd0:	40020470 	.word	0x40020470
 8003fd4:	40020488 	.word	0x40020488
 8003fd8:	400204a0 	.word	0x400204a0
 8003fdc:	400204b8 	.word	0x400204b8
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8087 	beq.w	8004108 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	2220      	movs	r2, #32
 8004004:	409a      	lsls	r2, r3
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b04      	cmp	r3, #4
 8004014:	d139      	bne.n	800408a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0216 	bic.w	r2, r2, #22
 8004024:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004034:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d103      	bne.n	8004046 <HAL_DMA_IRQHandler+0x736>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0208 	bic.w	r2, r2, #8
 8004054:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	223f      	movs	r2, #63	; 0x3f
 8004060:	409a      	lsls	r2, r3
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 834a 	beq.w	8004714 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
          }
          return;
 8004088:	e344      	b.n	8004714 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d018      	beq.n	80040ca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d108      	bne.n	80040b8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d02c      	beq.n	8004108 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
 80040b6:	e027      	b.n	8004108 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d023      	beq.n	8004108 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
 80040c8:	e01e      	b.n	8004108 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10f      	bne.n	80040f8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0210 	bic.w	r2, r2, #16
 80040e6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 8306 	beq.w	800471e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8088 	beq.w	8004230 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2204      	movs	r2, #4
 8004124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a7a      	ldr	r2, [pc, #488]	; (8004318 <HAL_DMA_IRQHandler+0xa08>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d04a      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x8b8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a79      	ldr	r2, [pc, #484]	; (800431c <HAL_DMA_IRQHandler+0xa0c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d045      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x8b8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a77      	ldr	r2, [pc, #476]	; (8004320 <HAL_DMA_IRQHandler+0xa10>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d040      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x8b8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a76      	ldr	r2, [pc, #472]	; (8004324 <HAL_DMA_IRQHandler+0xa14>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d03b      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x8b8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a74      	ldr	r2, [pc, #464]	; (8004328 <HAL_DMA_IRQHandler+0xa18>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d036      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x8b8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a73      	ldr	r2, [pc, #460]	; (800432c <HAL_DMA_IRQHandler+0xa1c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d031      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x8b8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a71      	ldr	r2, [pc, #452]	; (8004330 <HAL_DMA_IRQHandler+0xa20>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d02c      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x8b8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a70      	ldr	r2, [pc, #448]	; (8004334 <HAL_DMA_IRQHandler+0xa24>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d027      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x8b8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a6e      	ldr	r2, [pc, #440]	; (8004338 <HAL_DMA_IRQHandler+0xa28>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d022      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x8b8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a6d      	ldr	r2, [pc, #436]	; (800433c <HAL_DMA_IRQHandler+0xa2c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d01d      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x8b8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a6b      	ldr	r2, [pc, #428]	; (8004340 <HAL_DMA_IRQHandler+0xa30>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d018      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x8b8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a6a      	ldr	r2, [pc, #424]	; (8004344 <HAL_DMA_IRQHandler+0xa34>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d013      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x8b8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a68      	ldr	r2, [pc, #416]	; (8004348 <HAL_DMA_IRQHandler+0xa38>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00e      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x8b8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a67      	ldr	r2, [pc, #412]	; (800434c <HAL_DMA_IRQHandler+0xa3c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d009      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x8b8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a65      	ldr	r2, [pc, #404]	; (8004350 <HAL_DMA_IRQHandler+0xa40>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d004      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x8b8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a64      	ldr	r2, [pc, #400]	; (8004354 <HAL_DMA_IRQHandler+0xa44>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d108      	bne.n	80041da <HAL_DMA_IRQHandler+0x8ca>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0201 	bic.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	e007      	b.n	80041ea <HAL_DMA_IRQHandler+0x8da>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3301      	adds	r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d307      	bcc.n	8004206 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f2      	bne.n	80041ea <HAL_DMA_IRQHandler+0x8da>
 8004204:	e000      	b.n	8004208 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004206:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d004      	beq.n	8004220 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2203      	movs	r2, #3
 800421a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800421e:	e003      	b.n	8004228 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8272 	beq.w	800471e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4798      	blx	r3
 8004242:	e26c      	b.n	800471e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a43      	ldr	r2, [pc, #268]	; (8004358 <HAL_DMA_IRQHandler+0xa48>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d022      	beq.n	8004294 <HAL_DMA_IRQHandler+0x984>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a42      	ldr	r2, [pc, #264]	; (800435c <HAL_DMA_IRQHandler+0xa4c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d01d      	beq.n	8004294 <HAL_DMA_IRQHandler+0x984>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a40      	ldr	r2, [pc, #256]	; (8004360 <HAL_DMA_IRQHandler+0xa50>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d018      	beq.n	8004294 <HAL_DMA_IRQHandler+0x984>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a3f      	ldr	r2, [pc, #252]	; (8004364 <HAL_DMA_IRQHandler+0xa54>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d013      	beq.n	8004294 <HAL_DMA_IRQHandler+0x984>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a3d      	ldr	r2, [pc, #244]	; (8004368 <HAL_DMA_IRQHandler+0xa58>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00e      	beq.n	8004294 <HAL_DMA_IRQHandler+0x984>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a3c      	ldr	r2, [pc, #240]	; (800436c <HAL_DMA_IRQHandler+0xa5c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d009      	beq.n	8004294 <HAL_DMA_IRQHandler+0x984>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a3a      	ldr	r2, [pc, #232]	; (8004370 <HAL_DMA_IRQHandler+0xa60>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_DMA_IRQHandler+0x984>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a39      	ldr	r2, [pc, #228]	; (8004374 <HAL_DMA_IRQHandler+0xa64>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d101      	bne.n	8004298 <HAL_DMA_IRQHandler+0x988>
 8004294:	2301      	movs	r3, #1
 8004296:	e000      	b.n	800429a <HAL_DMA_IRQHandler+0x98a>
 8004298:	2300      	movs	r3, #0
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 823f 	beq.w	800471e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ac:	f003 031f 	and.w	r3, r3, #31
 80042b0:	2204      	movs	r2, #4
 80042b2:	409a      	lsls	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 80cd 	beq.w	8004458 <HAL_DMA_IRQHandler+0xb48>
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80c7 	beq.w	8004458 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ce:	f003 031f 	and.w	r3, r3, #31
 80042d2:	2204      	movs	r2, #4
 80042d4:	409a      	lsls	r2, r3
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d049      	beq.n	8004378 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 8210 	beq.w	8004718 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004300:	e20a      	b.n	8004718 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 8206 	beq.w	8004718 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004314:	e200      	b.n	8004718 <HAL_DMA_IRQHandler+0xe08>
 8004316:	bf00      	nop
 8004318:	40020010 	.word	0x40020010
 800431c:	40020028 	.word	0x40020028
 8004320:	40020040 	.word	0x40020040
 8004324:	40020058 	.word	0x40020058
 8004328:	40020070 	.word	0x40020070
 800432c:	40020088 	.word	0x40020088
 8004330:	400200a0 	.word	0x400200a0
 8004334:	400200b8 	.word	0x400200b8
 8004338:	40020410 	.word	0x40020410
 800433c:	40020428 	.word	0x40020428
 8004340:	40020440 	.word	0x40020440
 8004344:	40020458 	.word	0x40020458
 8004348:	40020470 	.word	0x40020470
 800434c:	40020488 	.word	0x40020488
 8004350:	400204a0 	.word	0x400204a0
 8004354:	400204b8 	.word	0x400204b8
 8004358:	58025408 	.word	0x58025408
 800435c:	5802541c 	.word	0x5802541c
 8004360:	58025430 	.word	0x58025430
 8004364:	58025444 	.word	0x58025444
 8004368:	58025458 	.word	0x58025458
 800436c:	5802546c 	.word	0x5802546c
 8004370:	58025480 	.word	0x58025480
 8004374:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d160      	bne.n	8004444 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a7f      	ldr	r2, [pc, #508]	; (8004584 <HAL_DMA_IRQHandler+0xc74>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d04a      	beq.n	8004422 <HAL_DMA_IRQHandler+0xb12>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a7d      	ldr	r2, [pc, #500]	; (8004588 <HAL_DMA_IRQHandler+0xc78>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d045      	beq.n	8004422 <HAL_DMA_IRQHandler+0xb12>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a7c      	ldr	r2, [pc, #496]	; (800458c <HAL_DMA_IRQHandler+0xc7c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d040      	beq.n	8004422 <HAL_DMA_IRQHandler+0xb12>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a7a      	ldr	r2, [pc, #488]	; (8004590 <HAL_DMA_IRQHandler+0xc80>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d03b      	beq.n	8004422 <HAL_DMA_IRQHandler+0xb12>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a79      	ldr	r2, [pc, #484]	; (8004594 <HAL_DMA_IRQHandler+0xc84>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d036      	beq.n	8004422 <HAL_DMA_IRQHandler+0xb12>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a77      	ldr	r2, [pc, #476]	; (8004598 <HAL_DMA_IRQHandler+0xc88>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d031      	beq.n	8004422 <HAL_DMA_IRQHandler+0xb12>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a76      	ldr	r2, [pc, #472]	; (800459c <HAL_DMA_IRQHandler+0xc8c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d02c      	beq.n	8004422 <HAL_DMA_IRQHandler+0xb12>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a74      	ldr	r2, [pc, #464]	; (80045a0 <HAL_DMA_IRQHandler+0xc90>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d027      	beq.n	8004422 <HAL_DMA_IRQHandler+0xb12>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a73      	ldr	r2, [pc, #460]	; (80045a4 <HAL_DMA_IRQHandler+0xc94>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d022      	beq.n	8004422 <HAL_DMA_IRQHandler+0xb12>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a71      	ldr	r2, [pc, #452]	; (80045a8 <HAL_DMA_IRQHandler+0xc98>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01d      	beq.n	8004422 <HAL_DMA_IRQHandler+0xb12>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a70      	ldr	r2, [pc, #448]	; (80045ac <HAL_DMA_IRQHandler+0xc9c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d018      	beq.n	8004422 <HAL_DMA_IRQHandler+0xb12>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a6e      	ldr	r2, [pc, #440]	; (80045b0 <HAL_DMA_IRQHandler+0xca0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d013      	beq.n	8004422 <HAL_DMA_IRQHandler+0xb12>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6d      	ldr	r2, [pc, #436]	; (80045b4 <HAL_DMA_IRQHandler+0xca4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00e      	beq.n	8004422 <HAL_DMA_IRQHandler+0xb12>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a6b      	ldr	r2, [pc, #428]	; (80045b8 <HAL_DMA_IRQHandler+0xca8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d009      	beq.n	8004422 <HAL_DMA_IRQHandler+0xb12>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a6a      	ldr	r2, [pc, #424]	; (80045bc <HAL_DMA_IRQHandler+0xcac>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d004      	beq.n	8004422 <HAL_DMA_IRQHandler+0xb12>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a68      	ldr	r2, [pc, #416]	; (80045c0 <HAL_DMA_IRQHandler+0xcb0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d108      	bne.n	8004434 <HAL_DMA_IRQHandler+0xb24>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0208 	bic.w	r2, r2, #8
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	e007      	b.n	8004444 <HAL_DMA_IRQHandler+0xb34>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0204 	bic.w	r2, r2, #4
 8004442:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 8165 	beq.w	8004718 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004456:	e15f      	b.n	8004718 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	2202      	movs	r2, #2
 8004462:	409a      	lsls	r2, r3
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 80c5 	beq.w	80045f8 <HAL_DMA_IRQHandler+0xce8>
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 80bf 	beq.w	80045f8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	2202      	movs	r2, #2
 8004484:	409a      	lsls	r2, r3
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d018      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 813a 	beq.w	800471c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044b0:	e134      	b.n	800471c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 8130 	beq.w	800471c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c4:	e12a      	b.n	800471c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f040 8089 	bne.w	80045e4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a2b      	ldr	r2, [pc, #172]	; (8004584 <HAL_DMA_IRQHandler+0xc74>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d04a      	beq.n	8004572 <HAL_DMA_IRQHandler+0xc62>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a29      	ldr	r2, [pc, #164]	; (8004588 <HAL_DMA_IRQHandler+0xc78>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d045      	beq.n	8004572 <HAL_DMA_IRQHandler+0xc62>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a28      	ldr	r2, [pc, #160]	; (800458c <HAL_DMA_IRQHandler+0xc7c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d040      	beq.n	8004572 <HAL_DMA_IRQHandler+0xc62>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a26      	ldr	r2, [pc, #152]	; (8004590 <HAL_DMA_IRQHandler+0xc80>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d03b      	beq.n	8004572 <HAL_DMA_IRQHandler+0xc62>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a25      	ldr	r2, [pc, #148]	; (8004594 <HAL_DMA_IRQHandler+0xc84>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d036      	beq.n	8004572 <HAL_DMA_IRQHandler+0xc62>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a23      	ldr	r2, [pc, #140]	; (8004598 <HAL_DMA_IRQHandler+0xc88>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d031      	beq.n	8004572 <HAL_DMA_IRQHandler+0xc62>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a22      	ldr	r2, [pc, #136]	; (800459c <HAL_DMA_IRQHandler+0xc8c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d02c      	beq.n	8004572 <HAL_DMA_IRQHandler+0xc62>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a20      	ldr	r2, [pc, #128]	; (80045a0 <HAL_DMA_IRQHandler+0xc90>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d027      	beq.n	8004572 <HAL_DMA_IRQHandler+0xc62>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1f      	ldr	r2, [pc, #124]	; (80045a4 <HAL_DMA_IRQHandler+0xc94>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d022      	beq.n	8004572 <HAL_DMA_IRQHandler+0xc62>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1d      	ldr	r2, [pc, #116]	; (80045a8 <HAL_DMA_IRQHandler+0xc98>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01d      	beq.n	8004572 <HAL_DMA_IRQHandler+0xc62>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1c      	ldr	r2, [pc, #112]	; (80045ac <HAL_DMA_IRQHandler+0xc9c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d018      	beq.n	8004572 <HAL_DMA_IRQHandler+0xc62>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a1a      	ldr	r2, [pc, #104]	; (80045b0 <HAL_DMA_IRQHandler+0xca0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d013      	beq.n	8004572 <HAL_DMA_IRQHandler+0xc62>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a19      	ldr	r2, [pc, #100]	; (80045b4 <HAL_DMA_IRQHandler+0xca4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00e      	beq.n	8004572 <HAL_DMA_IRQHandler+0xc62>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <HAL_DMA_IRQHandler+0xca8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d009      	beq.n	8004572 <HAL_DMA_IRQHandler+0xc62>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a16      	ldr	r2, [pc, #88]	; (80045bc <HAL_DMA_IRQHandler+0xcac>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d004      	beq.n	8004572 <HAL_DMA_IRQHandler+0xc62>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <HAL_DMA_IRQHandler+0xcb0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d128      	bne.n	80045c4 <HAL_DMA_IRQHandler+0xcb4>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0214 	bic.w	r2, r2, #20
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e027      	b.n	80045d4 <HAL_DMA_IRQHandler+0xcc4>
 8004584:	40020010 	.word	0x40020010
 8004588:	40020028 	.word	0x40020028
 800458c:	40020040 	.word	0x40020040
 8004590:	40020058 	.word	0x40020058
 8004594:	40020070 	.word	0x40020070
 8004598:	40020088 	.word	0x40020088
 800459c:	400200a0 	.word	0x400200a0
 80045a0:	400200b8 	.word	0x400200b8
 80045a4:	40020410 	.word	0x40020410
 80045a8:	40020428 	.word	0x40020428
 80045ac:	40020440 	.word	0x40020440
 80045b0:	40020458 	.word	0x40020458
 80045b4:	40020470 	.word	0x40020470
 80045b8:	40020488 	.word	0x40020488
 80045bc:	400204a0 	.word	0x400204a0
 80045c0:	400204b8 	.word	0x400204b8
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 020a 	bic.w	r2, r2, #10
 80045d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 8097 	beq.w	800471c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045f6:	e091      	b.n	800471c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	2208      	movs	r2, #8
 8004602:	409a      	lsls	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8088 	beq.w	800471e <HAL_DMA_IRQHandler+0xe0e>
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 8082 	beq.w	800471e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a41      	ldr	r2, [pc, #260]	; (8004724 <HAL_DMA_IRQHandler+0xe14>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d04a      	beq.n	80046ba <HAL_DMA_IRQHandler+0xdaa>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a3f      	ldr	r2, [pc, #252]	; (8004728 <HAL_DMA_IRQHandler+0xe18>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d045      	beq.n	80046ba <HAL_DMA_IRQHandler+0xdaa>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a3e      	ldr	r2, [pc, #248]	; (800472c <HAL_DMA_IRQHandler+0xe1c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d040      	beq.n	80046ba <HAL_DMA_IRQHandler+0xdaa>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a3c      	ldr	r2, [pc, #240]	; (8004730 <HAL_DMA_IRQHandler+0xe20>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d03b      	beq.n	80046ba <HAL_DMA_IRQHandler+0xdaa>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a3b      	ldr	r2, [pc, #236]	; (8004734 <HAL_DMA_IRQHandler+0xe24>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d036      	beq.n	80046ba <HAL_DMA_IRQHandler+0xdaa>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a39      	ldr	r2, [pc, #228]	; (8004738 <HAL_DMA_IRQHandler+0xe28>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d031      	beq.n	80046ba <HAL_DMA_IRQHandler+0xdaa>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a38      	ldr	r2, [pc, #224]	; (800473c <HAL_DMA_IRQHandler+0xe2c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d02c      	beq.n	80046ba <HAL_DMA_IRQHandler+0xdaa>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a36      	ldr	r2, [pc, #216]	; (8004740 <HAL_DMA_IRQHandler+0xe30>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d027      	beq.n	80046ba <HAL_DMA_IRQHandler+0xdaa>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a35      	ldr	r2, [pc, #212]	; (8004744 <HAL_DMA_IRQHandler+0xe34>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d022      	beq.n	80046ba <HAL_DMA_IRQHandler+0xdaa>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a33      	ldr	r2, [pc, #204]	; (8004748 <HAL_DMA_IRQHandler+0xe38>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d01d      	beq.n	80046ba <HAL_DMA_IRQHandler+0xdaa>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a32      	ldr	r2, [pc, #200]	; (800474c <HAL_DMA_IRQHandler+0xe3c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d018      	beq.n	80046ba <HAL_DMA_IRQHandler+0xdaa>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a30      	ldr	r2, [pc, #192]	; (8004750 <HAL_DMA_IRQHandler+0xe40>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <HAL_DMA_IRQHandler+0xdaa>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a2f      	ldr	r2, [pc, #188]	; (8004754 <HAL_DMA_IRQHandler+0xe44>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00e      	beq.n	80046ba <HAL_DMA_IRQHandler+0xdaa>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a2d      	ldr	r2, [pc, #180]	; (8004758 <HAL_DMA_IRQHandler+0xe48>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d009      	beq.n	80046ba <HAL_DMA_IRQHandler+0xdaa>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a2c      	ldr	r2, [pc, #176]	; (800475c <HAL_DMA_IRQHandler+0xe4c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d004      	beq.n	80046ba <HAL_DMA_IRQHandler+0xdaa>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a2a      	ldr	r2, [pc, #168]	; (8004760 <HAL_DMA_IRQHandler+0xe50>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d108      	bne.n	80046cc <HAL_DMA_IRQHandler+0xdbc>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 021c 	bic.w	r2, r2, #28
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	e007      	b.n	80046dc <HAL_DMA_IRQHandler+0xdcc>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 020e 	bic.w	r2, r2, #14
 80046da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2201      	movs	r2, #1
 80046e6:	409a      	lsls	r2, r3
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d009      	beq.n	800471e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	4798      	blx	r3
 8004712:	e004      	b.n	800471e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004714:	bf00      	nop
 8004716:	e002      	b.n	800471e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004718:	bf00      	nop
 800471a:	e000      	b.n	800471e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800471c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800471e:	3728      	adds	r7, #40	; 0x28
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40020010 	.word	0x40020010
 8004728:	40020028 	.word	0x40020028
 800472c:	40020040 	.word	0x40020040
 8004730:	40020058 	.word	0x40020058
 8004734:	40020070 	.word	0x40020070
 8004738:	40020088 	.word	0x40020088
 800473c:	400200a0 	.word	0x400200a0
 8004740:	400200b8 	.word	0x400200b8
 8004744:	40020410 	.word	0x40020410
 8004748:	40020428 	.word	0x40020428
 800474c:	40020440 	.word	0x40020440
 8004750:	40020458 	.word	0x40020458
 8004754:	40020470 	.word	0x40020470
 8004758:	40020488 	.word	0x40020488
 800475c:	400204a0 	.word	0x400204a0
 8004760:	400204b8 	.word	0x400204b8

08004764 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004794:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a7f      	ldr	r2, [pc, #508]	; (8004998 <DMA_SetConfig+0x21c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d072      	beq.n	8004886 <DMA_SetConfig+0x10a>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a7d      	ldr	r2, [pc, #500]	; (800499c <DMA_SetConfig+0x220>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d06d      	beq.n	8004886 <DMA_SetConfig+0x10a>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a7c      	ldr	r2, [pc, #496]	; (80049a0 <DMA_SetConfig+0x224>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d068      	beq.n	8004886 <DMA_SetConfig+0x10a>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a7a      	ldr	r2, [pc, #488]	; (80049a4 <DMA_SetConfig+0x228>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d063      	beq.n	8004886 <DMA_SetConfig+0x10a>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a79      	ldr	r2, [pc, #484]	; (80049a8 <DMA_SetConfig+0x22c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d05e      	beq.n	8004886 <DMA_SetConfig+0x10a>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a77      	ldr	r2, [pc, #476]	; (80049ac <DMA_SetConfig+0x230>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d059      	beq.n	8004886 <DMA_SetConfig+0x10a>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a76      	ldr	r2, [pc, #472]	; (80049b0 <DMA_SetConfig+0x234>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d054      	beq.n	8004886 <DMA_SetConfig+0x10a>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a74      	ldr	r2, [pc, #464]	; (80049b4 <DMA_SetConfig+0x238>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d04f      	beq.n	8004886 <DMA_SetConfig+0x10a>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a73      	ldr	r2, [pc, #460]	; (80049b8 <DMA_SetConfig+0x23c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d04a      	beq.n	8004886 <DMA_SetConfig+0x10a>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a71      	ldr	r2, [pc, #452]	; (80049bc <DMA_SetConfig+0x240>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d045      	beq.n	8004886 <DMA_SetConfig+0x10a>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a70      	ldr	r2, [pc, #448]	; (80049c0 <DMA_SetConfig+0x244>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d040      	beq.n	8004886 <DMA_SetConfig+0x10a>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a6e      	ldr	r2, [pc, #440]	; (80049c4 <DMA_SetConfig+0x248>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d03b      	beq.n	8004886 <DMA_SetConfig+0x10a>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a6d      	ldr	r2, [pc, #436]	; (80049c8 <DMA_SetConfig+0x24c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d036      	beq.n	8004886 <DMA_SetConfig+0x10a>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a6b      	ldr	r2, [pc, #428]	; (80049cc <DMA_SetConfig+0x250>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d031      	beq.n	8004886 <DMA_SetConfig+0x10a>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a6a      	ldr	r2, [pc, #424]	; (80049d0 <DMA_SetConfig+0x254>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d02c      	beq.n	8004886 <DMA_SetConfig+0x10a>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a68      	ldr	r2, [pc, #416]	; (80049d4 <DMA_SetConfig+0x258>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d027      	beq.n	8004886 <DMA_SetConfig+0x10a>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a67      	ldr	r2, [pc, #412]	; (80049d8 <DMA_SetConfig+0x25c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d022      	beq.n	8004886 <DMA_SetConfig+0x10a>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a65      	ldr	r2, [pc, #404]	; (80049dc <DMA_SetConfig+0x260>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d01d      	beq.n	8004886 <DMA_SetConfig+0x10a>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a64      	ldr	r2, [pc, #400]	; (80049e0 <DMA_SetConfig+0x264>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d018      	beq.n	8004886 <DMA_SetConfig+0x10a>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a62      	ldr	r2, [pc, #392]	; (80049e4 <DMA_SetConfig+0x268>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d013      	beq.n	8004886 <DMA_SetConfig+0x10a>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a61      	ldr	r2, [pc, #388]	; (80049e8 <DMA_SetConfig+0x26c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00e      	beq.n	8004886 <DMA_SetConfig+0x10a>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a5f      	ldr	r2, [pc, #380]	; (80049ec <DMA_SetConfig+0x270>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d009      	beq.n	8004886 <DMA_SetConfig+0x10a>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a5e      	ldr	r2, [pc, #376]	; (80049f0 <DMA_SetConfig+0x274>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d004      	beq.n	8004886 <DMA_SetConfig+0x10a>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a5c      	ldr	r2, [pc, #368]	; (80049f4 <DMA_SetConfig+0x278>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d101      	bne.n	800488a <DMA_SetConfig+0x10e>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <DMA_SetConfig+0x110>
 800488a:	2300      	movs	r3, #0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00d      	beq.n	80048ac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004898:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d004      	beq.n	80048ac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80048aa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a39      	ldr	r2, [pc, #228]	; (8004998 <DMA_SetConfig+0x21c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d04a      	beq.n	800494c <DMA_SetConfig+0x1d0>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a38      	ldr	r2, [pc, #224]	; (800499c <DMA_SetConfig+0x220>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d045      	beq.n	800494c <DMA_SetConfig+0x1d0>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a36      	ldr	r2, [pc, #216]	; (80049a0 <DMA_SetConfig+0x224>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d040      	beq.n	800494c <DMA_SetConfig+0x1d0>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a35      	ldr	r2, [pc, #212]	; (80049a4 <DMA_SetConfig+0x228>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d03b      	beq.n	800494c <DMA_SetConfig+0x1d0>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a33      	ldr	r2, [pc, #204]	; (80049a8 <DMA_SetConfig+0x22c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d036      	beq.n	800494c <DMA_SetConfig+0x1d0>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a32      	ldr	r2, [pc, #200]	; (80049ac <DMA_SetConfig+0x230>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d031      	beq.n	800494c <DMA_SetConfig+0x1d0>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a30      	ldr	r2, [pc, #192]	; (80049b0 <DMA_SetConfig+0x234>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d02c      	beq.n	800494c <DMA_SetConfig+0x1d0>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a2f      	ldr	r2, [pc, #188]	; (80049b4 <DMA_SetConfig+0x238>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d027      	beq.n	800494c <DMA_SetConfig+0x1d0>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a2d      	ldr	r2, [pc, #180]	; (80049b8 <DMA_SetConfig+0x23c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d022      	beq.n	800494c <DMA_SetConfig+0x1d0>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a2c      	ldr	r2, [pc, #176]	; (80049bc <DMA_SetConfig+0x240>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d01d      	beq.n	800494c <DMA_SetConfig+0x1d0>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a2a      	ldr	r2, [pc, #168]	; (80049c0 <DMA_SetConfig+0x244>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d018      	beq.n	800494c <DMA_SetConfig+0x1d0>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a29      	ldr	r2, [pc, #164]	; (80049c4 <DMA_SetConfig+0x248>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d013      	beq.n	800494c <DMA_SetConfig+0x1d0>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a27      	ldr	r2, [pc, #156]	; (80049c8 <DMA_SetConfig+0x24c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00e      	beq.n	800494c <DMA_SetConfig+0x1d0>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a26      	ldr	r2, [pc, #152]	; (80049cc <DMA_SetConfig+0x250>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d009      	beq.n	800494c <DMA_SetConfig+0x1d0>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a24      	ldr	r2, [pc, #144]	; (80049d0 <DMA_SetConfig+0x254>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d004      	beq.n	800494c <DMA_SetConfig+0x1d0>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a23      	ldr	r2, [pc, #140]	; (80049d4 <DMA_SetConfig+0x258>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d101      	bne.n	8004950 <DMA_SetConfig+0x1d4>
 800494c:	2301      	movs	r3, #1
 800494e:	e000      	b.n	8004952 <DMA_SetConfig+0x1d6>
 8004950:	2300      	movs	r3, #0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d059      	beq.n	8004a0a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	223f      	movs	r2, #63	; 0x3f
 8004960:	409a      	lsls	r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004974:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2b40      	cmp	r3, #64	; 0x40
 8004984:	d138      	bne.n	80049f8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004996:	e086      	b.n	8004aa6 <DMA_SetConfig+0x32a>
 8004998:	40020010 	.word	0x40020010
 800499c:	40020028 	.word	0x40020028
 80049a0:	40020040 	.word	0x40020040
 80049a4:	40020058 	.word	0x40020058
 80049a8:	40020070 	.word	0x40020070
 80049ac:	40020088 	.word	0x40020088
 80049b0:	400200a0 	.word	0x400200a0
 80049b4:	400200b8 	.word	0x400200b8
 80049b8:	40020410 	.word	0x40020410
 80049bc:	40020428 	.word	0x40020428
 80049c0:	40020440 	.word	0x40020440
 80049c4:	40020458 	.word	0x40020458
 80049c8:	40020470 	.word	0x40020470
 80049cc:	40020488 	.word	0x40020488
 80049d0:	400204a0 	.word	0x400204a0
 80049d4:	400204b8 	.word	0x400204b8
 80049d8:	58025408 	.word	0x58025408
 80049dc:	5802541c 	.word	0x5802541c
 80049e0:	58025430 	.word	0x58025430
 80049e4:	58025444 	.word	0x58025444
 80049e8:	58025458 	.word	0x58025458
 80049ec:	5802546c 	.word	0x5802546c
 80049f0:	58025480 	.word	0x58025480
 80049f4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	60da      	str	r2, [r3, #12]
}
 8004a08:	e04d      	b.n	8004aa6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a29      	ldr	r2, [pc, #164]	; (8004ab4 <DMA_SetConfig+0x338>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d022      	beq.n	8004a5a <DMA_SetConfig+0x2de>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a27      	ldr	r2, [pc, #156]	; (8004ab8 <DMA_SetConfig+0x33c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d01d      	beq.n	8004a5a <DMA_SetConfig+0x2de>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a26      	ldr	r2, [pc, #152]	; (8004abc <DMA_SetConfig+0x340>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d018      	beq.n	8004a5a <DMA_SetConfig+0x2de>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a24      	ldr	r2, [pc, #144]	; (8004ac0 <DMA_SetConfig+0x344>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <DMA_SetConfig+0x2de>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a23      	ldr	r2, [pc, #140]	; (8004ac4 <DMA_SetConfig+0x348>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00e      	beq.n	8004a5a <DMA_SetConfig+0x2de>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a21      	ldr	r2, [pc, #132]	; (8004ac8 <DMA_SetConfig+0x34c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d009      	beq.n	8004a5a <DMA_SetConfig+0x2de>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a20      	ldr	r2, [pc, #128]	; (8004acc <DMA_SetConfig+0x350>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d004      	beq.n	8004a5a <DMA_SetConfig+0x2de>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1e      	ldr	r2, [pc, #120]	; (8004ad0 <DMA_SetConfig+0x354>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d101      	bne.n	8004a5e <DMA_SetConfig+0x2e2>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <DMA_SetConfig+0x2e4>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d020      	beq.n	8004aa6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b40      	cmp	r3, #64	; 0x40
 8004a82:	d108      	bne.n	8004a96 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	60da      	str	r2, [r3, #12]
}
 8004a94:	e007      	b.n	8004aa6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	60da      	str	r2, [r3, #12]
}
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	58025408 	.word	0x58025408
 8004ab8:	5802541c 	.word	0x5802541c
 8004abc:	58025430 	.word	0x58025430
 8004ac0:	58025444 	.word	0x58025444
 8004ac4:	58025458 	.word	0x58025458
 8004ac8:	5802546c 	.word	0x5802546c
 8004acc:	58025480 	.word	0x58025480
 8004ad0:	58025494 	.word	0x58025494

08004ad4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a42      	ldr	r2, [pc, #264]	; (8004bec <DMA_CalcBaseAndBitshift+0x118>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d04a      	beq.n	8004b7c <DMA_CalcBaseAndBitshift+0xa8>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a41      	ldr	r2, [pc, #260]	; (8004bf0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d045      	beq.n	8004b7c <DMA_CalcBaseAndBitshift+0xa8>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a3f      	ldr	r2, [pc, #252]	; (8004bf4 <DMA_CalcBaseAndBitshift+0x120>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d040      	beq.n	8004b7c <DMA_CalcBaseAndBitshift+0xa8>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a3e      	ldr	r2, [pc, #248]	; (8004bf8 <DMA_CalcBaseAndBitshift+0x124>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d03b      	beq.n	8004b7c <DMA_CalcBaseAndBitshift+0xa8>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a3c      	ldr	r2, [pc, #240]	; (8004bfc <DMA_CalcBaseAndBitshift+0x128>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d036      	beq.n	8004b7c <DMA_CalcBaseAndBitshift+0xa8>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a3b      	ldr	r2, [pc, #236]	; (8004c00 <DMA_CalcBaseAndBitshift+0x12c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d031      	beq.n	8004b7c <DMA_CalcBaseAndBitshift+0xa8>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a39      	ldr	r2, [pc, #228]	; (8004c04 <DMA_CalcBaseAndBitshift+0x130>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d02c      	beq.n	8004b7c <DMA_CalcBaseAndBitshift+0xa8>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a38      	ldr	r2, [pc, #224]	; (8004c08 <DMA_CalcBaseAndBitshift+0x134>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d027      	beq.n	8004b7c <DMA_CalcBaseAndBitshift+0xa8>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a36      	ldr	r2, [pc, #216]	; (8004c0c <DMA_CalcBaseAndBitshift+0x138>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d022      	beq.n	8004b7c <DMA_CalcBaseAndBitshift+0xa8>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a35      	ldr	r2, [pc, #212]	; (8004c10 <DMA_CalcBaseAndBitshift+0x13c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d01d      	beq.n	8004b7c <DMA_CalcBaseAndBitshift+0xa8>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a33      	ldr	r2, [pc, #204]	; (8004c14 <DMA_CalcBaseAndBitshift+0x140>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d018      	beq.n	8004b7c <DMA_CalcBaseAndBitshift+0xa8>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a32      	ldr	r2, [pc, #200]	; (8004c18 <DMA_CalcBaseAndBitshift+0x144>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d013      	beq.n	8004b7c <DMA_CalcBaseAndBitshift+0xa8>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a30      	ldr	r2, [pc, #192]	; (8004c1c <DMA_CalcBaseAndBitshift+0x148>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00e      	beq.n	8004b7c <DMA_CalcBaseAndBitshift+0xa8>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a2f      	ldr	r2, [pc, #188]	; (8004c20 <DMA_CalcBaseAndBitshift+0x14c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d009      	beq.n	8004b7c <DMA_CalcBaseAndBitshift+0xa8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a2d      	ldr	r2, [pc, #180]	; (8004c24 <DMA_CalcBaseAndBitshift+0x150>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <DMA_CalcBaseAndBitshift+0xa8>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a2c      	ldr	r2, [pc, #176]	; (8004c28 <DMA_CalcBaseAndBitshift+0x154>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d101      	bne.n	8004b80 <DMA_CalcBaseAndBitshift+0xac>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <DMA_CalcBaseAndBitshift+0xae>
 8004b80:	2300      	movs	r3, #0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d024      	beq.n	8004bd0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	3b10      	subs	r3, #16
 8004b8e:	4a27      	ldr	r2, [pc, #156]	; (8004c2c <DMA_CalcBaseAndBitshift+0x158>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	4a24      	ldr	r2, [pc, #144]	; (8004c30 <DMA_CalcBaseAndBitshift+0x15c>)
 8004ba0:	5cd3      	ldrb	r3, [r2, r3]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d908      	bls.n	8004bc0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	4b1f      	ldr	r3, [pc, #124]	; (8004c34 <DMA_CalcBaseAndBitshift+0x160>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	1d1a      	adds	r2, r3, #4
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	659a      	str	r2, [r3, #88]	; 0x58
 8004bbe:	e00d      	b.n	8004bdc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4b1b      	ldr	r3, [pc, #108]	; (8004c34 <DMA_CalcBaseAndBitshift+0x160>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bce:	e005      	b.n	8004bdc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	40020010 	.word	0x40020010
 8004bf0:	40020028 	.word	0x40020028
 8004bf4:	40020040 	.word	0x40020040
 8004bf8:	40020058 	.word	0x40020058
 8004bfc:	40020070 	.word	0x40020070
 8004c00:	40020088 	.word	0x40020088
 8004c04:	400200a0 	.word	0x400200a0
 8004c08:	400200b8 	.word	0x400200b8
 8004c0c:	40020410 	.word	0x40020410
 8004c10:	40020428 	.word	0x40020428
 8004c14:	40020440 	.word	0x40020440
 8004c18:	40020458 	.word	0x40020458
 8004c1c:	40020470 	.word	0x40020470
 8004c20:	40020488 	.word	0x40020488
 8004c24:	400204a0 	.word	0x400204a0
 8004c28:	400204b8 	.word	0x400204b8
 8004c2c:	aaaaaaab 	.word	0xaaaaaaab
 8004c30:	08010518 	.word	0x08010518
 8004c34:	fffffc00 	.word	0xfffffc00

08004c38 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d120      	bne.n	8004c8e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d858      	bhi.n	8004d06 <DMA_CheckFifoParam+0xce>
 8004c54:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <DMA_CheckFifoParam+0x24>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c6d 	.word	0x08004c6d
 8004c60:	08004c7f 	.word	0x08004c7f
 8004c64:	08004c6d 	.word	0x08004c6d
 8004c68:	08004d07 	.word	0x08004d07
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d048      	beq.n	8004d0a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c7c:	e045      	b.n	8004d0a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c86:	d142      	bne.n	8004d0e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c8c:	e03f      	b.n	8004d0e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c96:	d123      	bne.n	8004ce0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d838      	bhi.n	8004d12 <DMA_CheckFifoParam+0xda>
 8004ca0:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <DMA_CheckFifoParam+0x70>)
 8004ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca6:	bf00      	nop
 8004ca8:	08004cb9 	.word	0x08004cb9
 8004cac:	08004cbf 	.word	0x08004cbf
 8004cb0:	08004cb9 	.word	0x08004cb9
 8004cb4:	08004cd1 	.word	0x08004cd1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
        break;
 8004cbc:	e030      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d025      	beq.n	8004d16 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cce:	e022      	b.n	8004d16 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cd8:	d11f      	bne.n	8004d1a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cde:	e01c      	b.n	8004d1a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d902      	bls.n	8004cee <DMA_CheckFifoParam+0xb6>
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d003      	beq.n	8004cf4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004cec:	e018      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
        break;
 8004cf2:	e015      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00e      	beq.n	8004d1e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
    break;
 8004d04:	e00b      	b.n	8004d1e <DMA_CheckFifoParam+0xe6>
        break;
 8004d06:	bf00      	nop
 8004d08:	e00a      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
        break;
 8004d0a:	bf00      	nop
 8004d0c:	e008      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
        break;
 8004d0e:	bf00      	nop
 8004d10:	e006      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
        break;
 8004d12:	bf00      	nop
 8004d14:	e004      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
        break;
 8004d16:	bf00      	nop
 8004d18:	e002      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
        break;
 8004d1a:	bf00      	nop
 8004d1c:	e000      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
    break;
 8004d1e:	bf00      	nop
    }
  }

  return status;
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop

08004d30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a38      	ldr	r2, [pc, #224]	; (8004e24 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d022      	beq.n	8004d8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a36      	ldr	r2, [pc, #216]	; (8004e28 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d01d      	beq.n	8004d8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a35      	ldr	r2, [pc, #212]	; (8004e2c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d018      	beq.n	8004d8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a33      	ldr	r2, [pc, #204]	; (8004e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d013      	beq.n	8004d8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a32      	ldr	r2, [pc, #200]	; (8004e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00e      	beq.n	8004d8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a30      	ldr	r2, [pc, #192]	; (8004e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d009      	beq.n	8004d8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a2f      	ldr	r2, [pc, #188]	; (8004e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d004      	beq.n	8004d8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2d      	ldr	r2, [pc, #180]	; (8004e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d101      	bne.n	8004d92 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d92:	2300      	movs	r3, #0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d01a      	beq.n	8004dce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	3b08      	subs	r3, #8
 8004da0:	4a28      	ldr	r2, [pc, #160]	; (8004e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	091b      	lsrs	r3, r3, #4
 8004da8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4b26      	ldr	r3, [pc, #152]	; (8004e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	461a      	mov	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a24      	ldr	r2, [pc, #144]	; (8004e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004dbc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f003 031f 	and.w	r3, r3, #31
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	409a      	lsls	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004dcc:	e024      	b.n	8004e18 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	3b10      	subs	r3, #16
 8004dd6:	4a1e      	ldr	r2, [pc, #120]	; (8004e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ddc:	091b      	lsrs	r3, r3, #4
 8004dde:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4a1c      	ldr	r2, [pc, #112]	; (8004e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d806      	bhi.n	8004df6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4a1b      	ldr	r2, [pc, #108]	; (8004e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d902      	bls.n	8004df6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3308      	adds	r3, #8
 8004df4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004dfa:	4413      	add	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	461a      	mov	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a16      	ldr	r2, [pc, #88]	; (8004e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004e08:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f003 031f 	and.w	r3, r3, #31
 8004e10:	2201      	movs	r2, #1
 8004e12:	409a      	lsls	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	58025408 	.word	0x58025408
 8004e28:	5802541c 	.word	0x5802541c
 8004e2c:	58025430 	.word	0x58025430
 8004e30:	58025444 	.word	0x58025444
 8004e34:	58025458 	.word	0x58025458
 8004e38:	5802546c 	.word	0x5802546c
 8004e3c:	58025480 	.word	0x58025480
 8004e40:	58025494 	.word	0x58025494
 8004e44:	cccccccd 	.word	0xcccccccd
 8004e48:	16009600 	.word	0x16009600
 8004e4c:	58025880 	.word	0x58025880
 8004e50:	aaaaaaab 	.word	0xaaaaaaab
 8004e54:	400204b8 	.word	0x400204b8
 8004e58:	4002040f 	.word	0x4002040f
 8004e5c:	10008200 	.word	0x10008200
 8004e60:	40020880 	.word	0x40020880

08004e64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d04a      	beq.n	8004f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d847      	bhi.n	8004f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a25      	ldr	r2, [pc, #148]	; (8004f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d022      	beq.n	8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a24      	ldr	r2, [pc, #144]	; (8004f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d01d      	beq.n	8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a22      	ldr	r2, [pc, #136]	; (8004f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d018      	beq.n	8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a21      	ldr	r2, [pc, #132]	; (8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d013      	beq.n	8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1f      	ldr	r2, [pc, #124]	; (8004f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00e      	beq.n	8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1e      	ldr	r2, [pc, #120]	; (8004f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d009      	beq.n	8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1c      	ldr	r2, [pc, #112]	; (8004f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d004      	beq.n	8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1b      	ldr	r2, [pc, #108]	; (8004f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d101      	bne.n	8004ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e000      	b.n	8004ed6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4b17      	ldr	r3, [pc, #92]	; (8004f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a15      	ldr	r2, [pc, #84]	; (8004f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004eec:	671a      	str	r2, [r3, #112]	; 0x70
 8004eee:	e009      	b.n	8004f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a11      	ldr	r2, [pc, #68]	; (8004f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004f02:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	2201      	movs	r2, #1
 8004f0a:	409a      	lsls	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004f10:	bf00      	nop
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	58025408 	.word	0x58025408
 8004f20:	5802541c 	.word	0x5802541c
 8004f24:	58025430 	.word	0x58025430
 8004f28:	58025444 	.word	0x58025444
 8004f2c:	58025458 	.word	0x58025458
 8004f30:	5802546c 	.word	0x5802546c
 8004f34:	58025480 	.word	0x58025480
 8004f38:	58025494 	.word	0x58025494
 8004f3c:	1600963f 	.word	0x1600963f
 8004f40:	58025940 	.word	0x58025940
 8004f44:	1000823f 	.word	0x1000823f
 8004f48:	40020940 	.word	0x40020940

08004f4c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e0c8      	b.n	80050f0 <HAL_ETH_Init+0x1a4>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fb fc08 	bl	800077c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2223      	movs	r2, #35	; 0x23
 8004f70:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f72:	4b61      	ldr	r3, [pc, #388]	; (80050f8 <HAL_ETH_Init+0x1ac>)
 8004f74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f78:	4a5f      	ldr	r2, [pc, #380]	; (80050f8 <HAL_ETH_Init+0x1ac>)
 8004f7a:	f043 0302 	orr.w	r3, r3, #2
 8004f7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f82:	4b5d      	ldr	r3, [pc, #372]	; (80050f8 <HAL_ETH_Init+0x1ac>)
 8004f84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	7a1b      	ldrb	r3, [r3, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d103      	bne.n	8004fa0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004f98:	2000      	movs	r0, #0
 8004f9a:	f7fd f81f 	bl	8001fdc <HAL_SYSCFG_ETHInterfaceSelect>
 8004f9e:	e003      	b.n	8004fa8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004fa0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004fa4:	f7fd f81a 	bl	8001fdc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	f043 0301 	orr.w	r3, r3, #1
 8004fba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fbe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fc0:	f7fc ffd0 	bl	8001f64 <HAL_GetTick>
 8004fc4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004fc6:	e00f      	b.n	8004fe8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004fc8:	f7fc ffcc 	bl	8001f64 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004fd6:	d907      	bls.n	8004fe8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2204      	movs	r2, #4
 8004fdc:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	22e0      	movs	r2, #224	; 0xe0
 8004fe2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e083      	b.n	80050f0 <HAL_ETH_Init+0x1a4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e6      	bne.n	8004fc8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fc02 	bl	8005804 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005000:	f001 ffd4 	bl	8006fac <HAL_RCC_GetHCLKFreq>
 8005004:	4603      	mov	r3, r0
 8005006:	4a3d      	ldr	r2, [pc, #244]	; (80050fc <HAL_ETH_Init+0x1b0>)
 8005008:	fba2 2303 	umull	r2, r3, r2, r3
 800500c:	0c9a      	lsrs	r2, r3, #18
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3a01      	subs	r2, #1
 8005014:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fb55 	bl	80056c8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005026:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800502a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005036:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800503a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d007      	beq.n	800505a <HAL_ETH_Init+0x10e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	22e0      	movs	r2, #224	; 0xe0
 8005054:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e04a      	b.n	80050f0 <HAL_ETH_Init+0x1a4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005062:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005066:	4b26      	ldr	r3, [pc, #152]	; (8005100 <HAL_ETH_Init+0x1b4>)
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6952      	ldr	r2, [r2, #20]
 800506e:	0051      	lsls	r1, r2, #1
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	430b      	orrs	r3, r1
 8005076:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800507a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fc18 	bl	80058b4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fc5e 	bl	8005946 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	3305      	adds	r3, #5
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	021a      	lsls	r2, r3, #8
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	3304      	adds	r3, #4
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	4619      	mov	r1, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	3303      	adds	r3, #3
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	061a      	lsls	r2, r3, #24
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	3302      	adds	r3, #2
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	041b      	lsls	r3, r3, #16
 80050bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	3301      	adds	r3, #1
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050d6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2210      	movs	r2, #16
 80050e6:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2210      	movs	r2, #16
 80050ec:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	58024400 	.word	0x58024400
 80050fc:	431bde83 	.word	0x431bde83
 8005100:	ffff8001 	.word	0xffff8001

08005104 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005114:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511c:	2b40      	cmp	r3, #64	; 0x40
 800511e:	d115      	bne.n	800514c <HAL_ETH_IRQHandler+0x48>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005128:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800512c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005130:	2b40      	cmp	r3, #64	; 0x40
 8005132:	d10b      	bne.n	800514c <HAL_ETH_IRQHandler+0x48>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f8e9 	bl	800530c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005142:	461a      	mov	r2, r3
 8005144:	f248 0340 	movw	r3, #32832	; 0x8040
 8005148:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005154:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b01      	cmp	r3, #1
 800515e:	d115      	bne.n	800518c <HAL_ETH_IRQHandler+0x88>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005168:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b01      	cmp	r3, #1
 8005172:	d10b      	bne.n	800518c <HAL_ETH_IRQHandler+0x88>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f8bf 	bl	80052f8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005182:	461a      	mov	r2, r3
 8005184:	f248 0301 	movw	r3, #32769	; 0x8001
 8005188:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005194:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800519c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051a0:	d14e      	bne.n	8005240 <HAL_ETH_IRQHandler+0x13c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051aa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80051ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051b6:	d143      	bne.n	8005240 <HAL_ETH_IRQHandler+0x13c>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051bc:	f043 0208 	orr.w	r2, r3, #8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051cc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80051d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d8:	d11c      	bne.n	8005214 <HAL_ETH_IRQHandler+0x110>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051e2:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80051e6:	f241 1302 	movw	r3, #4354	; 0x1102
 80051ea:	4013      	ands	r3, r2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6812      	ldr	r2, [r2, #0]
 8005200:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005204:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005208:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	22e0      	movs	r2, #224	; 0xe0
 8005210:	66da      	str	r2, [r3, #108]	; 0x6c
 8005212:	e012      	b.n	800523a <HAL_ETH_IRQHandler+0x136>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800521c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005220:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005230:	461a      	mov	r2, r3
 8005232:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8005236:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f870 	bl	8005320 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005248:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800524c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005250:	d10e      	bne.n	8005270 <HAL_ETH_IRQHandler+0x16c>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	22e0      	movs	r2, #224	; 0xe0
 8005262:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->MACErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f865 	bl	8005334 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b10      	cmp	r3, #16
 800527e:	d10f      	bne.n	80052a0 <HAL_ETH_IRQHandler+0x19c>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005288:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f858 	bl	8005348 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d10f      	bne.n	80052d0 <HAL_ETH_IRQHandler+0x1cc>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80052b8:	f003 020f 	and.w	r2, r3, #15
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f84a 	bl	800535c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80052d0:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <HAL_ETH_IRQHandler+0x1f0>)
 80052d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d006      	beq.n	80052ea <HAL_ETH_IRQHandler+0x1e6>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80052dc:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <HAL_ETH_IRQHandler+0x1f0>)
 80052de:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80052e2:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f843 	bl	8005370 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	58000080 	.word	0x58000080

080052f8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005396:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	791b      	ldrb	r3, [r3, #4]
 800539c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800539e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	7b1b      	ldrb	r3, [r3, #12]
 80053a4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80053a6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	7b5b      	ldrb	r3, [r3, #13]
 80053ac:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053ae:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	7b9b      	ldrb	r3, [r3, #14]
 80053b4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80053b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	7bdb      	ldrb	r3, [r3, #15]
 80053bc:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053be:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	7c12      	ldrb	r2, [r2, #16]
 80053c4:	2a00      	cmp	r2, #0
 80053c6:	d102      	bne.n	80053ce <ETH_SetMACConfig+0x4a>
 80053c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80053cc:	e000      	b.n	80053d0 <ETH_SetMACConfig+0x4c>
 80053ce:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80053d0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	7c52      	ldrb	r2, [r2, #17]
 80053d6:	2a00      	cmp	r2, #0
 80053d8:	d102      	bne.n	80053e0 <ETH_SetMACConfig+0x5c>
 80053da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053de:	e000      	b.n	80053e2 <ETH_SetMACConfig+0x5e>
 80053e0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80053e2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	7c9b      	ldrb	r3, [r3, #18]
 80053e8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80053ea:	431a      	orrs	r2, r3
                                macconf->Speed |
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80053f0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80053f6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	7f1b      	ldrb	r3, [r3, #28]
 80053fc:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80053fe:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	7f5b      	ldrb	r3, [r3, #29]
 8005404:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005406:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	7f92      	ldrb	r2, [r2, #30]
 800540c:	2a00      	cmp	r2, #0
 800540e:	d102      	bne.n	8005416 <ETH_SetMACConfig+0x92>
 8005410:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005414:	e000      	b.n	8005418 <ETH_SetMACConfig+0x94>
 8005416:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005418:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	7fdb      	ldrb	r3, [r3, #31]
 800541e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005420:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005428:	2a00      	cmp	r2, #0
 800542a:	d102      	bne.n	8005432 <ETH_SetMACConfig+0xae>
 800542c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005430:	e000      	b.n	8005434 <ETH_SetMACConfig+0xb0>
 8005432:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005434:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800543a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005442:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005444:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	4b56      	ldr	r3, [pc, #344]	; (80055b0 <ETH_SetMACConfig+0x22c>)
 8005456:	4013      	ands	r3, r2
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	68f9      	ldr	r1, [r7, #12]
 800545e:	430b      	orrs	r3, r1
 8005460:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005466:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800546e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005470:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005478:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800547a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005482:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005484:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800548c:	2a00      	cmp	r2, #0
 800548e:	d102      	bne.n	8005496 <ETH_SetMACConfig+0x112>
 8005490:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005494:	e000      	b.n	8005498 <ETH_SetMACConfig+0x114>
 8005496:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005498:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	4b42      	ldr	r3, [pc, #264]	; (80055b4 <ETH_SetMACConfig+0x230>)
 80054aa:	4013      	ands	r3, r2
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	68f9      	ldr	r1, [r7, #12]
 80054b2:	430b      	orrs	r3, r1
 80054b4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054bc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	4b3a      	ldr	r3, [pc, #232]	; (80055b8 <ETH_SetMACConfig+0x234>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	68f9      	ldr	r1, [r7, #12]
 80054d6:	430b      	orrs	r3, r1
 80054d8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80054e0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80054e6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80054ee:	2a00      	cmp	r2, #0
 80054f0:	d101      	bne.n	80054f6 <ETH_SetMACConfig+0x172>
 80054f2:	2280      	movs	r2, #128	; 0x80
 80054f4:	e000      	b.n	80054f8 <ETH_SetMACConfig+0x174>
 80054f6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80054f8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800550a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800550e:	4013      	ands	r3, r2
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6812      	ldr	r2, [r2, #0]
 8005514:	68f9      	ldr	r1, [r7, #12]
 8005516:	430b      	orrs	r3, r1
 8005518:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005520:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005528:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005536:	f023 0103 	bic.w	r1, r3, #3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	430a      	orrs	r2, r1
 8005542:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800554e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800556a:	2a00      	cmp	r2, #0
 800556c:	d101      	bne.n	8005572 <ETH_SetMACConfig+0x1ee>
 800556e:	2240      	movs	r2, #64	; 0x40
 8005570:	e000      	b.n	8005574 <ETH_SetMACConfig+0x1f0>
 8005572:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005574:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800557c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800557e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005586:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005594:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	430a      	orrs	r2, r1
 80055a0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80055a4:	bf00      	nop
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	00048083 	.word	0x00048083
 80055b4:	c0f88000 	.word	0xc0f88000
 80055b8:	fffffef0 	.word	0xfffffef0

080055bc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	4b38      	ldr	r3, [pc, #224]	; (80056b4 <ETH_SetDMAConfig+0xf8>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	6811      	ldr	r1, [r2, #0]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	430b      	orrs	r3, r1
 80055de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055e2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	791b      	ldrb	r3, [r3, #4]
 80055e8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80055ee:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	7b1b      	ldrb	r3, [r3, #12]
 80055f4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	4b2c      	ldr	r3, [pc, #176]	; (80056b8 <ETH_SetDMAConfig+0xfc>)
 8005606:	4013      	ands	r3, r2
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	68f9      	ldr	r1, [r7, #12]
 800560e:	430b      	orrs	r3, r1
 8005610:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005614:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	7b5b      	ldrb	r3, [r3, #13]
 800561a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005620:	4313      	orrs	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800562c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005630:	4b22      	ldr	r3, [pc, #136]	; (80056bc <ETH_SetDMAConfig+0x100>)
 8005632:	4013      	ands	r3, r2
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6812      	ldr	r2, [r2, #0]
 8005638:	68f9      	ldr	r1, [r7, #12]
 800563a:	430b      	orrs	r3, r1
 800563c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005640:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	7d1b      	ldrb	r3, [r3, #20]
 800564c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800564e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	7f5b      	ldrb	r3, [r3, #29]
 8005654:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005662:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005666:	4b16      	ldr	r3, [pc, #88]	; (80056c0 <ETH_SetDMAConfig+0x104>)
 8005668:	4013      	ands	r3, r2
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6812      	ldr	r2, [r2, #0]
 800566e:	68f9      	ldr	r1, [r7, #12]
 8005670:	430b      	orrs	r3, r1
 8005672:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005676:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	7f1b      	ldrb	r3, [r3, #28]
 800567e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005690:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005694:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <ETH_SetDMAConfig+0x108>)
 8005696:	4013      	ands	r3, r2
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	68f9      	ldr	r1, [r7, #12]
 800569e:	430b      	orrs	r3, r1
 80056a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056a4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80056a8:	bf00      	nop
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	ffff87fd 	.word	0xffff87fd
 80056b8:	ffff2ffe 	.word	0xffff2ffe
 80056bc:	fffec000 	.word	0xfffec000
 80056c0:	ffc0efef 	.word	0xffc0efef
 80056c4:	7fc0ffff 	.word	0x7fc0ffff

080056c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b0a4      	sub	sp, #144	; 0x90
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80056d0:	2301      	movs	r3, #1
 80056d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80056d6:	2300      	movs	r3, #0
 80056d8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80056da:	2300      	movs	r3, #0
 80056dc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80056e6:	2301      	movs	r3, #1
 80056e8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80056ec:	2301      	movs	r3, #1
 80056ee:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80056f8:	2300      	movs	r3, #0
 80056fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005708:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800570a:	2300      	movs	r3, #0
 800570c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005710:	2300      	movs	r3, #0
 8005712:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005714:	2300      	movs	r3, #0
 8005716:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800571a:	2300      	movs	r3, #0
 800571c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005720:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005724:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005726:	2300      	movs	r3, #0
 8005728:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800572c:	2300      	movs	r3, #0
 800572e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005730:	2301      	movs	r3, #1
 8005732:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005736:	2300      	movs	r3, #0
 8005738:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800573c:	2300      	movs	r3, #0
 800573e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005742:	2300      	movs	r3, #0
 8005744:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005746:	2300      	movs	r3, #0
 8005748:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800574a:	2300      	movs	r3, #0
 800574c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800574e:	2300      	movs	r3, #0
 8005750:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005754:	2300      	movs	r3, #0
 8005756:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005760:	2320      	movs	r3, #32
 8005762:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005766:	2301      	movs	r3, #1
 8005768:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800576c:	2300      	movs	r3, #0
 800576e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005772:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005776:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005778:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800577c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800577e:	2300      	movs	r3, #0
 8005780:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005784:	2302      	movs	r3, #2
 8005786:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800578a:	2300      	movs	r3, #0
 800578c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005790:	2300      	movs	r3, #0
 8005792:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005796:	2300      	movs	r3, #0
 8005798:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800579c:	2301      	movs	r3, #1
 800579e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80057a2:	2300      	movs	r3, #0
 80057a4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80057ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057b0:	4619      	mov	r1, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff fde6 	bl	8005384 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80057b8:	2301      	movs	r3, #1
 80057ba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80057bc:	2301      	movs	r3, #1
 80057be:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80057c0:	2300      	movs	r3, #0
 80057c2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80057c4:	2300      	movs	r3, #0
 80057c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80057ce:	2300      	movs	r3, #0
 80057d0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80057d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80057d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80057d8:	2300      	movs	r3, #0
 80057da:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80057dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80057e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80057e2:	2300      	movs	r3, #0
 80057e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80057e8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80057ee:	f107 0308 	add.w	r3, r7, #8
 80057f2:	4619      	mov	r1, r3
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff fee1 	bl	80055bc <ETH_SetDMAConfig>
}
 80057fa:	bf00      	nop
 80057fc:	3790      	adds	r7, #144	; 0x90
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005814:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800581c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800581e:	f001 fbc5 	bl	8006fac <HAL_RCC_GetHCLKFreq>
 8005822:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4a1e      	ldr	r2, [pc, #120]	; (80058a0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d908      	bls.n	800583e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4a1d      	ldr	r2, [pc, #116]	; (80058a4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d804      	bhi.n	800583e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	e027      	b.n	800588e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	4a18      	ldr	r2, [pc, #96]	; (80058a4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d908      	bls.n	8005858 <ETH_MAC_MDIO_ClkConfig+0x54>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	4a17      	ldr	r2, [pc, #92]	; (80058a8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d204      	bcs.n	8005858 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e01a      	b.n	800588e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4a13      	ldr	r2, [pc, #76]	; (80058a8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d303      	bcc.n	8005868 <ETH_MAC_MDIO_ClkConfig+0x64>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4a12      	ldr	r2, [pc, #72]	; (80058ac <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d911      	bls.n	800588c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4a10      	ldr	r2, [pc, #64]	; (80058ac <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d908      	bls.n	8005882 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4a0f      	ldr	r2, [pc, #60]	; (80058b0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d804      	bhi.n	8005882 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	e005      	b.n	800588e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	e000      	b.n	800588e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800588c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005898:	bf00      	nop
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	01312cff 	.word	0x01312cff
 80058a4:	02160ebf 	.word	0x02160ebf
 80058a8:	03938700 	.word	0x03938700
 80058ac:	05f5e0ff 	.word	0x05f5e0ff
 80058b0:	08f0d17f 	.word	0x08f0d17f

080058b4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80058bc:	2300      	movs	r3, #0
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	e01d      	b.n	80058fe <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68d9      	ldr	r1, [r3, #12]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4613      	mov	r3, r2
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	4413      	add	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	440b      	add	r3, r1
 80058d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2200      	movs	r2, #0
 80058de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2200      	movs	r2, #0
 80058e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2200      	movs	r2, #0
 80058ea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80058ec:	68b9      	ldr	r1, [r7, #8]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	3206      	adds	r2, #6
 80058f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3301      	adds	r3, #1
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b03      	cmp	r3, #3
 8005902:	d9de      	bls.n	80058c2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005912:	461a      	mov	r2, r3
 8005914:	2303      	movs	r3, #3
 8005916:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005926:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005936:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800593a:	bf00      	nop
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	e024      	b.n	800599e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6919      	ldr	r1, [r3, #16]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	4613      	mov	r3, r2
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	4413      	add	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	440b      	add	r3, r1
 8005964:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2200      	movs	r2, #0
 8005970:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2200      	movs	r2, #0
 8005976:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2200      	movs	r2, #0
 800597c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2200      	movs	r2, #0
 8005982:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2200      	movs	r2, #0
 8005988:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3310      	adds	r3, #16
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	440b      	add	r3, r1
 8005996:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3301      	adds	r3, #1
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d9d7      	bls.n	8005954 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ca:	461a      	mov	r2, r3
 80059cc:	2303      	movs	r3, #3
 80059ce:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059de:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80059f6:	bf00      	nop
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
	...

08005a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b089      	sub	sp, #36	; 0x24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a12:	4b89      	ldr	r3, [pc, #548]	; (8005c38 <HAL_GPIO_Init+0x234>)
 8005a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a16:	e194      	b.n	8005d42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	fa01 f303 	lsl.w	r3, r1, r3
 8005a24:	4013      	ands	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 8186 	beq.w	8005d3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d005      	beq.n	8005a48 <HAL_GPIO_Init+0x44>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d130      	bne.n	8005aaa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	2203      	movs	r2, #3
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a7e:	2201      	movs	r2, #1
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	43db      	mvns	r3, r3
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	091b      	lsrs	r3, r3, #4
 8005a94:	f003 0201 	and.w	r2, r3, #1
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d017      	beq.n	8005ae6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d123      	bne.n	8005b3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	08da      	lsrs	r2, r3, #3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3208      	adds	r2, #8
 8005afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	220f      	movs	r2, #15
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4013      	ands	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	08da      	lsrs	r2, r3, #3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3208      	adds	r2, #8
 8005b34:	69b9      	ldr	r1, [r7, #24]
 8005b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	2203      	movs	r2, #3
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	43db      	mvns	r3, r3
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f003 0203 	and.w	r2, r3, #3
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 80e0 	beq.w	8005d3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b7c:	4b2f      	ldr	r3, [pc, #188]	; (8005c3c <HAL_GPIO_Init+0x238>)
 8005b7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b82:	4a2e      	ldr	r2, [pc, #184]	; (8005c3c <HAL_GPIO_Init+0x238>)
 8005b84:	f043 0302 	orr.w	r3, r3, #2
 8005b88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b8c:	4b2b      	ldr	r3, [pc, #172]	; (8005c3c <HAL_GPIO_Init+0x238>)
 8005b8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b9a:	4a29      	ldr	r2, [pc, #164]	; (8005c40 <HAL_GPIO_Init+0x23c>)
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	089b      	lsrs	r3, r3, #2
 8005ba0:	3302      	adds	r3, #2
 8005ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	220f      	movs	r2, #15
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a20      	ldr	r2, [pc, #128]	; (8005c44 <HAL_GPIO_Init+0x240>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d052      	beq.n	8005c6c <HAL_GPIO_Init+0x268>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a1f      	ldr	r2, [pc, #124]	; (8005c48 <HAL_GPIO_Init+0x244>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d031      	beq.n	8005c32 <HAL_GPIO_Init+0x22e>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a1e      	ldr	r2, [pc, #120]	; (8005c4c <HAL_GPIO_Init+0x248>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d02b      	beq.n	8005c2e <HAL_GPIO_Init+0x22a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a1d      	ldr	r2, [pc, #116]	; (8005c50 <HAL_GPIO_Init+0x24c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d025      	beq.n	8005c2a <HAL_GPIO_Init+0x226>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1c      	ldr	r2, [pc, #112]	; (8005c54 <HAL_GPIO_Init+0x250>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01f      	beq.n	8005c26 <HAL_GPIO_Init+0x222>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a1b      	ldr	r2, [pc, #108]	; (8005c58 <HAL_GPIO_Init+0x254>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d019      	beq.n	8005c22 <HAL_GPIO_Init+0x21e>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a1a      	ldr	r2, [pc, #104]	; (8005c5c <HAL_GPIO_Init+0x258>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d013      	beq.n	8005c1e <HAL_GPIO_Init+0x21a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a19      	ldr	r2, [pc, #100]	; (8005c60 <HAL_GPIO_Init+0x25c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00d      	beq.n	8005c1a <HAL_GPIO_Init+0x216>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a18      	ldr	r2, [pc, #96]	; (8005c64 <HAL_GPIO_Init+0x260>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d007      	beq.n	8005c16 <HAL_GPIO_Init+0x212>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a17      	ldr	r2, [pc, #92]	; (8005c68 <HAL_GPIO_Init+0x264>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d101      	bne.n	8005c12 <HAL_GPIO_Init+0x20e>
 8005c0e:	2309      	movs	r3, #9
 8005c10:	e02d      	b.n	8005c6e <HAL_GPIO_Init+0x26a>
 8005c12:	230a      	movs	r3, #10
 8005c14:	e02b      	b.n	8005c6e <HAL_GPIO_Init+0x26a>
 8005c16:	2308      	movs	r3, #8
 8005c18:	e029      	b.n	8005c6e <HAL_GPIO_Init+0x26a>
 8005c1a:	2307      	movs	r3, #7
 8005c1c:	e027      	b.n	8005c6e <HAL_GPIO_Init+0x26a>
 8005c1e:	2306      	movs	r3, #6
 8005c20:	e025      	b.n	8005c6e <HAL_GPIO_Init+0x26a>
 8005c22:	2305      	movs	r3, #5
 8005c24:	e023      	b.n	8005c6e <HAL_GPIO_Init+0x26a>
 8005c26:	2304      	movs	r3, #4
 8005c28:	e021      	b.n	8005c6e <HAL_GPIO_Init+0x26a>
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e01f      	b.n	8005c6e <HAL_GPIO_Init+0x26a>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	e01d      	b.n	8005c6e <HAL_GPIO_Init+0x26a>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e01b      	b.n	8005c6e <HAL_GPIO_Init+0x26a>
 8005c36:	bf00      	nop
 8005c38:	58000080 	.word	0x58000080
 8005c3c:	58024400 	.word	0x58024400
 8005c40:	58000400 	.word	0x58000400
 8005c44:	58020000 	.word	0x58020000
 8005c48:	58020400 	.word	0x58020400
 8005c4c:	58020800 	.word	0x58020800
 8005c50:	58020c00 	.word	0x58020c00
 8005c54:	58021000 	.word	0x58021000
 8005c58:	58021400 	.word	0x58021400
 8005c5c:	58021800 	.word	0x58021800
 8005c60:	58021c00 	.word	0x58021c00
 8005c64:	58022000 	.word	0x58022000
 8005c68:	58022400 	.word	0x58022400
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	69fa      	ldr	r2, [r7, #28]
 8005c70:	f002 0203 	and.w	r2, r2, #3
 8005c74:	0092      	lsls	r2, r2, #2
 8005c76:	4093      	lsls	r3, r2
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c7e:	4938      	ldr	r1, [pc, #224]	; (8005d60 <HAL_GPIO_Init+0x35c>)
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	089b      	lsrs	r3, r3, #2
 8005c84:	3302      	adds	r3, #2
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	43db      	mvns	r3, r3
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005cb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ce0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	43db      	mvns	r3, r3
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f47f ae63 	bne.w	8005a18 <HAL_GPIO_Init+0x14>
  }
}
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	3724      	adds	r7, #36	; 0x24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	58000400 	.word	0x58000400

08005d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	807b      	strh	r3, [r7, #2]
 8005d70:	4613      	mov	r3, r2
 8005d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d74:	787b      	ldrb	r3, [r7, #1]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d7a:	887a      	ldrh	r2, [r7, #2]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d80:	e003      	b.n	8005d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d82:	887b      	ldrh	r3, [r7, #2]
 8005d84:	041a      	lsls	r2, r3, #16
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	619a      	str	r2, [r3, #24]
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b085      	sub	sp, #20
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	460b      	mov	r3, r1
 8005da0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005da8:	887a      	ldrh	r2, [r7, #2]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4013      	ands	r3, r2
 8005dae:	041a      	lsls	r2, r3, #16
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	43d9      	mvns	r1, r3
 8005db4:	887b      	ldrh	r3, [r7, #2]
 8005db6:	400b      	ands	r3, r1
 8005db8:	431a      	orrs	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	619a      	str	r2, [r3, #24]
}
 8005dbe:	bf00      	nop
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005dca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dcc:	b08f      	sub	sp, #60	; 0x3c
 8005dce:	af0a      	add	r7, sp, #40	; 0x28
 8005dd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e116      	b.n	800600a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fb fbda 	bl	80015b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2203      	movs	r2, #3
 8005e00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f005 f98a 	bl	800b134 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	603b      	str	r3, [r7, #0]
 8005e26:	687e      	ldr	r6, [r7, #4]
 8005e28:	466d      	mov	r5, sp
 8005e2a:	f106 0410 	add.w	r4, r6, #16
 8005e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e3e:	1d33      	adds	r3, r6, #4
 8005e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e42:	6838      	ldr	r0, [r7, #0]
 8005e44:	f005 f908 	bl	800b058 <USB_CoreInit>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e0d7      	b.n	800600a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2100      	movs	r1, #0
 8005e60:	4618      	mov	r0, r3
 8005e62:	f005 f978 	bl	800b156 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e66:	2300      	movs	r3, #0
 8005e68:	73fb      	strb	r3, [r7, #15]
 8005e6a:	e04a      	b.n	8005f02 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e6c:	7bfa      	ldrb	r2, [r7, #15]
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	333d      	adds	r3, #61	; 0x3d
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e80:	7bfa      	ldrb	r2, [r7, #15]
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	4613      	mov	r3, r2
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	1a9b      	subs	r3, r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	440b      	add	r3, r1
 8005e8e:	333c      	adds	r3, #60	; 0x3c
 8005e90:	7bfa      	ldrb	r2, [r7, #15]
 8005e92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e94:	7bfa      	ldrb	r2, [r7, #15]
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	b298      	uxth	r0, r3
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	1a9b      	subs	r3, r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	3342      	adds	r3, #66	; 0x42
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005eac:	7bfa      	ldrb	r2, [r7, #15]
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	1a9b      	subs	r3, r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	333f      	adds	r3, #63	; 0x3f
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ec0:	7bfa      	ldrb	r2, [r7, #15]
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	3344      	adds	r3, #68	; 0x44
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ed4:	7bfa      	ldrb	r2, [r7, #15]
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	1a9b      	subs	r3, r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	3348      	adds	r3, #72	; 0x48
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ee8:	7bfa      	ldrb	r2, [r7, #15]
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	4613      	mov	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	1a9b      	subs	r3, r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	3350      	adds	r3, #80	; 0x50
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	3301      	adds	r3, #1
 8005f00:	73fb      	strb	r3, [r7, #15]
 8005f02:	7bfa      	ldrb	r2, [r7, #15]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d3af      	bcc.n	8005e6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	73fb      	strb	r3, [r7, #15]
 8005f10:	e044      	b.n	8005f9c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f12:	7bfa      	ldrb	r2, [r7, #15]
 8005f14:	6879      	ldr	r1, [r7, #4]
 8005f16:	4613      	mov	r3, r2
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	1a9b      	subs	r3, r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	440b      	add	r3, r1
 8005f20:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f28:	7bfa      	ldrb	r2, [r7, #15]
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005f3a:	7bfa      	ldrb	r2, [r7, #15]
 8005f3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f3e:	7bfa      	ldrb	r2, [r7, #15]
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	4613      	mov	r3, r2
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f54:	7bfa      	ldrb	r2, [r7, #15]
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f6a:	7bfa      	ldrb	r2, [r7, #15]
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f80:	7bfa      	ldrb	r2, [r7, #15]
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	4613      	mov	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	1a9b      	subs	r3, r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	73fb      	strb	r3, [r7, #15]
 8005f9c:	7bfa      	ldrb	r2, [r7, #15]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d3b5      	bcc.n	8005f12 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	603b      	str	r3, [r7, #0]
 8005fac:	687e      	ldr	r6, [r7, #4]
 8005fae:	466d      	mov	r5, sp
 8005fb0:	f106 0410 	add.w	r4, r6, #16
 8005fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005fc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8005fc4:	1d33      	adds	r3, r6, #4
 8005fc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fc8:	6838      	ldr	r0, [r7, #0]
 8005fca:	f005 f911 	bl	800b1f0 <USB_DevInit>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d005      	beq.n	8005fe0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e014      	b.n	800600a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d102      	bne.n	8005ffe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f80b 	bl	8006014 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f005 facb 	bl	800b59e <USB_DevDisconnect>

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006014 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006042:	4b05      	ldr	r3, [pc, #20]	; (8006058 <HAL_PCDEx_ActivateLPM+0x44>)
 8006044:	4313      	orrs	r3, r2
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	10000003 	.word	0x10000003

0800605c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006064:	4b19      	ldr	r3, [pc, #100]	; (80060cc <HAL_PWREx_ConfigSupply+0x70>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b04      	cmp	r3, #4
 800606e:	d00a      	beq.n	8006086 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006070:	4b16      	ldr	r3, [pc, #88]	; (80060cc <HAL_PWREx_ConfigSupply+0x70>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	429a      	cmp	r2, r3
 800607c:	d001      	beq.n	8006082 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e01f      	b.n	80060c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	e01d      	b.n	80060c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006086:	4b11      	ldr	r3, [pc, #68]	; (80060cc <HAL_PWREx_ConfigSupply+0x70>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f023 0207 	bic.w	r2, r3, #7
 800608e:	490f      	ldr	r1, [pc, #60]	; (80060cc <HAL_PWREx_ConfigSupply+0x70>)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4313      	orrs	r3, r2
 8006094:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006096:	f7fb ff65 	bl	8001f64 <HAL_GetTick>
 800609a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800609c:	e009      	b.n	80060b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800609e:	f7fb ff61 	bl	8001f64 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060ac:	d901      	bls.n	80060b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e007      	b.n	80060c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80060b2:	4b06      	ldr	r3, [pc, #24]	; (80060cc <HAL_PWREx_ConfigSupply+0x70>)
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060be:	d1ee      	bne.n	800609e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	58024800 	.word	0x58024800

080060d0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	4a04      	ldr	r2, [pc, #16]	; (80060ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80060da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060de:	60d3      	str	r3, [r2, #12]
}
 80060e0:	bf00      	nop
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	58024800 	.word	0x58024800

080060f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08c      	sub	sp, #48	; 0x30
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d102      	bne.n	8006104 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f000 bc1d 	b.w	800693e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 8087 	beq.w	8006220 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006112:	4b99      	ldr	r3, [pc, #612]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800611a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800611c:	4b96      	ldr	r3, [pc, #600]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 800611e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006120:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	2b10      	cmp	r3, #16
 8006126:	d007      	beq.n	8006138 <HAL_RCC_OscConfig+0x48>
 8006128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612a:	2b18      	cmp	r3, #24
 800612c:	d110      	bne.n	8006150 <HAL_RCC_OscConfig+0x60>
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	f003 0303 	and.w	r3, r3, #3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d10b      	bne.n	8006150 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006138:	4b8f      	ldr	r3, [pc, #572]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d06c      	beq.n	800621e <HAL_RCC_OscConfig+0x12e>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d168      	bne.n	800621e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e3f6      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006158:	d106      	bne.n	8006168 <HAL_RCC_OscConfig+0x78>
 800615a:	4b87      	ldr	r3, [pc, #540]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a86      	ldr	r2, [pc, #536]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 8006160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	e02e      	b.n	80061c6 <HAL_RCC_OscConfig+0xd6>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10c      	bne.n	800618a <HAL_RCC_OscConfig+0x9a>
 8006170:	4b81      	ldr	r3, [pc, #516]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a80      	ldr	r2, [pc, #512]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 8006176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	4b7e      	ldr	r3, [pc, #504]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a7d      	ldr	r2, [pc, #500]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 8006182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	e01d      	b.n	80061c6 <HAL_RCC_OscConfig+0xd6>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006192:	d10c      	bne.n	80061ae <HAL_RCC_OscConfig+0xbe>
 8006194:	4b78      	ldr	r3, [pc, #480]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a77      	ldr	r2, [pc, #476]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 800619a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	4b75      	ldr	r3, [pc, #468]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a74      	ldr	r2, [pc, #464]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 80061a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	e00b      	b.n	80061c6 <HAL_RCC_OscConfig+0xd6>
 80061ae:	4b72      	ldr	r3, [pc, #456]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a71      	ldr	r2, [pc, #452]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 80061b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	4b6f      	ldr	r3, [pc, #444]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a6e      	ldr	r2, [pc, #440]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 80061c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d013      	beq.n	80061f6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ce:	f7fb fec9 	bl	8001f64 <HAL_GetTick>
 80061d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061d4:	e008      	b.n	80061e8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061d6:	f7fb fec5 	bl	8001f64 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b64      	cmp	r3, #100	; 0x64
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e3aa      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061e8:	4b63      	ldr	r3, [pc, #396]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0f0      	beq.n	80061d6 <HAL_RCC_OscConfig+0xe6>
 80061f4:	e014      	b.n	8006220 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f6:	f7fb feb5 	bl	8001f64 <HAL_GetTick>
 80061fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061fe:	f7fb feb1 	bl	8001f64 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b64      	cmp	r3, #100	; 0x64
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e396      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006210:	4b59      	ldr	r3, [pc, #356]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1f0      	bne.n	80061fe <HAL_RCC_OscConfig+0x10e>
 800621c:	e000      	b.n	8006220 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800621e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80cb 	beq.w	80063c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800622e:	4b52      	ldr	r3, [pc, #328]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006236:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006238:	4b4f      	ldr	r3, [pc, #316]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d007      	beq.n	8006254 <HAL_RCC_OscConfig+0x164>
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	2b18      	cmp	r3, #24
 8006248:	d156      	bne.n	80062f8 <HAL_RCC_OscConfig+0x208>
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	f003 0303 	and.w	r3, r3, #3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d151      	bne.n	80062f8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006254:	4b48      	ldr	r3, [pc, #288]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <HAL_RCC_OscConfig+0x17c>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e368      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800626c:	4b42      	ldr	r3, [pc, #264]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f023 0219 	bic.w	r2, r3, #25
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	493f      	ldr	r1, [pc, #252]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 800627a:	4313      	orrs	r3, r2
 800627c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800627e:	f7fb fe71 	bl	8001f64 <HAL_GetTick>
 8006282:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006284:	e008      	b.n	8006298 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006286:	f7fb fe6d 	bl	8001f64 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b02      	cmp	r3, #2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e352      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006298:	4b37      	ldr	r3, [pc, #220]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0f0      	beq.n	8006286 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062a4:	f7fb fe8e 	bl	8001fc4 <HAL_GetREVID>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d817      	bhi.n	80062e2 <HAL_RCC_OscConfig+0x1f2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	2b40      	cmp	r3, #64	; 0x40
 80062b8:	d108      	bne.n	80062cc <HAL_RCC_OscConfig+0x1dc>
 80062ba:	4b2f      	ldr	r3, [pc, #188]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80062c2:	4a2d      	ldr	r2, [pc, #180]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 80062c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062c8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062ca:	e07b      	b.n	80063c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062cc:	4b2a      	ldr	r3, [pc, #168]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	031b      	lsls	r3, r3, #12
 80062da:	4927      	ldr	r1, [pc, #156]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062e0:	e070      	b.n	80063c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062e2:	4b25      	ldr	r3, [pc, #148]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	061b      	lsls	r3, r3, #24
 80062f0:	4921      	ldr	r1, [pc, #132]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062f6:	e065      	b.n	80063c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d048      	beq.n	8006392 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006300:	4b1d      	ldr	r3, [pc, #116]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f023 0219 	bic.w	r2, r3, #25
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	491a      	ldr	r1, [pc, #104]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 800630e:	4313      	orrs	r3, r2
 8006310:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006312:	f7fb fe27 	bl	8001f64 <HAL_GetTick>
 8006316:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006318:	e008      	b.n	800632c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800631a:	f7fb fe23 	bl	8001f64 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d901      	bls.n	800632c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e308      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800632c:	4b12      	ldr	r3, [pc, #72]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0f0      	beq.n	800631a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006338:	f7fb fe44 	bl	8001fc4 <HAL_GetREVID>
 800633c:	4603      	mov	r3, r0
 800633e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006342:	4293      	cmp	r3, r2
 8006344:	d81a      	bhi.n	800637c <HAL_RCC_OscConfig+0x28c>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b40      	cmp	r3, #64	; 0x40
 800634c:	d108      	bne.n	8006360 <HAL_RCC_OscConfig+0x270>
 800634e:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006356:	4a08      	ldr	r2, [pc, #32]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 8006358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800635c:	6053      	str	r3, [r2, #4]
 800635e:	e031      	b.n	80063c4 <HAL_RCC_OscConfig+0x2d4>
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	031b      	lsls	r3, r3, #12
 800636e:	4902      	ldr	r1, [pc, #8]	; (8006378 <HAL_RCC_OscConfig+0x288>)
 8006370:	4313      	orrs	r3, r2
 8006372:	604b      	str	r3, [r1, #4]
 8006374:	e026      	b.n	80063c4 <HAL_RCC_OscConfig+0x2d4>
 8006376:	bf00      	nop
 8006378:	58024400 	.word	0x58024400
 800637c:	4b9a      	ldr	r3, [pc, #616]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	061b      	lsls	r3, r3, #24
 800638a:	4997      	ldr	r1, [pc, #604]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 800638c:	4313      	orrs	r3, r2
 800638e:	604b      	str	r3, [r1, #4]
 8006390:	e018      	b.n	80063c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006392:	4b95      	ldr	r3, [pc, #596]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a94      	ldr	r2, [pc, #592]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 8006398:	f023 0301 	bic.w	r3, r3, #1
 800639c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639e:	f7fb fde1 	bl	8001f64 <HAL_GetTick>
 80063a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063a4:	e008      	b.n	80063b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063a6:	f7fb fddd 	bl	8001f64 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d901      	bls.n	80063b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e2c2      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063b8:	4b8b      	ldr	r3, [pc, #556]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1f0      	bne.n	80063a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0310 	and.w	r3, r3, #16
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 80a9 	beq.w	8006524 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063d2:	4b85      	ldr	r3, [pc, #532]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063dc:	4b82      	ldr	r3, [pc, #520]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 80063de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d007      	beq.n	80063f8 <HAL_RCC_OscConfig+0x308>
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	2b18      	cmp	r3, #24
 80063ec:	d13a      	bne.n	8006464 <HAL_RCC_OscConfig+0x374>
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f003 0303 	and.w	r3, r3, #3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d135      	bne.n	8006464 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063f8:	4b7b      	ldr	r3, [pc, #492]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006400:	2b00      	cmp	r3, #0
 8006402:	d005      	beq.n	8006410 <HAL_RCC_OscConfig+0x320>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	2b80      	cmp	r3, #128	; 0x80
 800640a:	d001      	beq.n	8006410 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e296      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006410:	f7fb fdd8 	bl	8001fc4 <HAL_GetREVID>
 8006414:	4603      	mov	r3, r0
 8006416:	f241 0203 	movw	r2, #4099	; 0x1003
 800641a:	4293      	cmp	r3, r2
 800641c:	d817      	bhi.n	800644e <HAL_RCC_OscConfig+0x35e>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	2b20      	cmp	r3, #32
 8006424:	d108      	bne.n	8006438 <HAL_RCC_OscConfig+0x348>
 8006426:	4b70      	ldr	r3, [pc, #448]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800642e:	4a6e      	ldr	r2, [pc, #440]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 8006430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006434:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006436:	e075      	b.n	8006524 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006438:	4b6b      	ldr	r3, [pc, #428]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	069b      	lsls	r3, r3, #26
 8006446:	4968      	ldr	r1, [pc, #416]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 8006448:	4313      	orrs	r3, r2
 800644a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800644c:	e06a      	b.n	8006524 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800644e:	4b66      	ldr	r3, [pc, #408]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	061b      	lsls	r3, r3, #24
 800645c:	4962      	ldr	r1, [pc, #392]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 800645e:	4313      	orrs	r3, r2
 8006460:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006462:	e05f      	b.n	8006524 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d042      	beq.n	80064f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800646c:	4b5e      	ldr	r3, [pc, #376]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a5d      	ldr	r2, [pc, #372]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 8006472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006478:	f7fb fd74 	bl	8001f64 <HAL_GetTick>
 800647c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006480:	f7fb fd70 	bl	8001f64 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e255      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006492:	4b55      	ldr	r3, [pc, #340]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0f0      	beq.n	8006480 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800649e:	f7fb fd91 	bl	8001fc4 <HAL_GetREVID>
 80064a2:	4603      	mov	r3, r0
 80064a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d817      	bhi.n	80064dc <HAL_RCC_OscConfig+0x3ec>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d108      	bne.n	80064c6 <HAL_RCC_OscConfig+0x3d6>
 80064b4:	4b4c      	ldr	r3, [pc, #304]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80064bc:	4a4a      	ldr	r2, [pc, #296]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 80064be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064c2:	6053      	str	r3, [r2, #4]
 80064c4:	e02e      	b.n	8006524 <HAL_RCC_OscConfig+0x434>
 80064c6:	4b48      	ldr	r3, [pc, #288]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	069b      	lsls	r3, r3, #26
 80064d4:	4944      	ldr	r1, [pc, #272]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	604b      	str	r3, [r1, #4]
 80064da:	e023      	b.n	8006524 <HAL_RCC_OscConfig+0x434>
 80064dc:	4b42      	ldr	r3, [pc, #264]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	061b      	lsls	r3, r3, #24
 80064ea:	493f      	ldr	r1, [pc, #252]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60cb      	str	r3, [r1, #12]
 80064f0:	e018      	b.n	8006524 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80064f2:	4b3d      	ldr	r3, [pc, #244]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a3c      	ldr	r2, [pc, #240]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 80064f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fe:	f7fb fd31 	bl	8001f64 <HAL_GetTick>
 8006502:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006506:	f7fb fd2d 	bl	8001f64 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e212      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006518:	4b33      	ldr	r3, [pc, #204]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1f0      	bne.n	8006506 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0308 	and.w	r3, r3, #8
 800652c:	2b00      	cmp	r3, #0
 800652e:	d036      	beq.n	800659e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d019      	beq.n	800656c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006538:	4b2b      	ldr	r3, [pc, #172]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 800653a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800653c:	4a2a      	ldr	r2, [pc, #168]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 800653e:	f043 0301 	orr.w	r3, r3, #1
 8006542:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006544:	f7fb fd0e 	bl	8001f64 <HAL_GetTick>
 8006548:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800654c:	f7fb fd0a 	bl	8001f64 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e1ef      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800655e:	4b22      	ldr	r3, [pc, #136]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 8006560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0f0      	beq.n	800654c <HAL_RCC_OscConfig+0x45c>
 800656a:	e018      	b.n	800659e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800656c:	4b1e      	ldr	r3, [pc, #120]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 800656e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006570:	4a1d      	ldr	r2, [pc, #116]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 8006572:	f023 0301 	bic.w	r3, r3, #1
 8006576:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006578:	f7fb fcf4 	bl	8001f64 <HAL_GetTick>
 800657c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006580:	f7fb fcf0 	bl	8001f64 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e1d5      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 8006594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f0      	bne.n	8006580 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d039      	beq.n	800661e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d01c      	beq.n	80065ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80065b2:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a0c      	ldr	r2, [pc, #48]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 80065b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065be:	f7fb fcd1 	bl	8001f64 <HAL_GetTick>
 80065c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065c4:	e008      	b.n	80065d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80065c6:	f7fb fccd 	bl	8001f64 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e1b2      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065d8:	4b03      	ldr	r3, [pc, #12]	; (80065e8 <HAL_RCC_OscConfig+0x4f8>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0f0      	beq.n	80065c6 <HAL_RCC_OscConfig+0x4d6>
 80065e4:	e01b      	b.n	800661e <HAL_RCC_OscConfig+0x52e>
 80065e6:	bf00      	nop
 80065e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065ec:	4b9b      	ldr	r3, [pc, #620]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a9a      	ldr	r2, [pc, #616]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80065f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065f8:	f7fb fcb4 	bl	8001f64 <HAL_GetTick>
 80065fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006600:	f7fb fcb0 	bl	8001f64 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e195      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006612:	4b92      	ldr	r3, [pc, #584]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f0      	bne.n	8006600 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0304 	and.w	r3, r3, #4
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 8081 	beq.w	800672e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800662c:	4b8c      	ldr	r3, [pc, #560]	; (8006860 <HAL_RCC_OscConfig+0x770>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a8b      	ldr	r2, [pc, #556]	; (8006860 <HAL_RCC_OscConfig+0x770>)
 8006632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006636:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006638:	f7fb fc94 	bl	8001f64 <HAL_GetTick>
 800663c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006640:	f7fb fc90 	bl	8001f64 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b64      	cmp	r3, #100	; 0x64
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e175      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006652:	4b83      	ldr	r3, [pc, #524]	; (8006860 <HAL_RCC_OscConfig+0x770>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0f0      	beq.n	8006640 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d106      	bne.n	8006674 <HAL_RCC_OscConfig+0x584>
 8006666:	4b7d      	ldr	r3, [pc, #500]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666a:	4a7c      	ldr	r2, [pc, #496]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 800666c:	f043 0301 	orr.w	r3, r3, #1
 8006670:	6713      	str	r3, [r2, #112]	; 0x70
 8006672:	e02d      	b.n	80066d0 <HAL_RCC_OscConfig+0x5e0>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10c      	bne.n	8006696 <HAL_RCC_OscConfig+0x5a6>
 800667c:	4b77      	ldr	r3, [pc, #476]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 800667e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006680:	4a76      	ldr	r2, [pc, #472]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006682:	f023 0301 	bic.w	r3, r3, #1
 8006686:	6713      	str	r3, [r2, #112]	; 0x70
 8006688:	4b74      	ldr	r3, [pc, #464]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 800668a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668c:	4a73      	ldr	r2, [pc, #460]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 800668e:	f023 0304 	bic.w	r3, r3, #4
 8006692:	6713      	str	r3, [r2, #112]	; 0x70
 8006694:	e01c      	b.n	80066d0 <HAL_RCC_OscConfig+0x5e0>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	2b05      	cmp	r3, #5
 800669c:	d10c      	bne.n	80066b8 <HAL_RCC_OscConfig+0x5c8>
 800669e:	4b6f      	ldr	r3, [pc, #444]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80066a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a2:	4a6e      	ldr	r2, [pc, #440]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80066a4:	f043 0304 	orr.w	r3, r3, #4
 80066a8:	6713      	str	r3, [r2, #112]	; 0x70
 80066aa:	4b6c      	ldr	r3, [pc, #432]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	4a6b      	ldr	r2, [pc, #428]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80066b0:	f043 0301 	orr.w	r3, r3, #1
 80066b4:	6713      	str	r3, [r2, #112]	; 0x70
 80066b6:	e00b      	b.n	80066d0 <HAL_RCC_OscConfig+0x5e0>
 80066b8:	4b68      	ldr	r3, [pc, #416]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80066ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066bc:	4a67      	ldr	r2, [pc, #412]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80066be:	f023 0301 	bic.w	r3, r3, #1
 80066c2:	6713      	str	r3, [r2, #112]	; 0x70
 80066c4:	4b65      	ldr	r3, [pc, #404]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80066c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c8:	4a64      	ldr	r2, [pc, #400]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80066ca:	f023 0304 	bic.w	r3, r3, #4
 80066ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d015      	beq.n	8006704 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d8:	f7fb fc44 	bl	8001f64 <HAL_GetTick>
 80066dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066de:	e00a      	b.n	80066f6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e0:	f7fb fc40 	bl	8001f64 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e123      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066f6:	4b59      	ldr	r3, [pc, #356]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80066f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0ee      	beq.n	80066e0 <HAL_RCC_OscConfig+0x5f0>
 8006702:	e014      	b.n	800672e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006704:	f7fb fc2e 	bl	8001f64 <HAL_GetTick>
 8006708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800670a:	e00a      	b.n	8006722 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800670c:	f7fb fc2a 	bl	8001f64 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	f241 3288 	movw	r2, #5000	; 0x1388
 800671a:	4293      	cmp	r3, r2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e10d      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006722:	4b4e      	ldr	r3, [pc, #312]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1ee      	bne.n	800670c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 8102 	beq.w	800693c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006738:	4b48      	ldr	r3, [pc, #288]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006740:	2b18      	cmp	r3, #24
 8006742:	f000 80bd 	beq.w	80068c0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	2b02      	cmp	r3, #2
 800674c:	f040 809e 	bne.w	800688c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006750:	4b42      	ldr	r3, [pc, #264]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a41      	ldr	r2, [pc, #260]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800675a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675c:	f7fb fc02 	bl	8001f64 <HAL_GetTick>
 8006760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006762:	e008      	b.n	8006776 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006764:	f7fb fbfe 	bl	8001f64 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e0e3      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006776:	4b39      	ldr	r3, [pc, #228]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f0      	bne.n	8006764 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006782:	4b36      	ldr	r3, [pc, #216]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006786:	4b37      	ldr	r3, [pc, #220]	; (8006864 <HAL_RCC_OscConfig+0x774>)
 8006788:	4013      	ands	r3, r2
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006792:	0112      	lsls	r2, r2, #4
 8006794:	430a      	orrs	r2, r1
 8006796:	4931      	ldr	r1, [pc, #196]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006798:	4313      	orrs	r3, r2
 800679a:	628b      	str	r3, [r1, #40]	; 0x28
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	3b01      	subs	r3, #1
 80067a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067aa:	3b01      	subs	r3, #1
 80067ac:	025b      	lsls	r3, r3, #9
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	3b01      	subs	r3, #1
 80067b8:	041b      	lsls	r3, r3, #16
 80067ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c4:	3b01      	subs	r3, #1
 80067c6:	061b      	lsls	r3, r3, #24
 80067c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067cc:	4923      	ldr	r1, [pc, #140]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80067d2:	4b22      	ldr	r3, [pc, #136]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80067d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d6:	4a21      	ldr	r2, [pc, #132]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80067d8:	f023 0301 	bic.w	r3, r3, #1
 80067dc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80067de:	4b1f      	ldr	r3, [pc, #124]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80067e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067e2:	4b21      	ldr	r3, [pc, #132]	; (8006868 <HAL_RCC_OscConfig+0x778>)
 80067e4:	4013      	ands	r3, r2
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80067ea:	00d2      	lsls	r2, r2, #3
 80067ec:	491b      	ldr	r1, [pc, #108]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80067f2:	4b1a      	ldr	r3, [pc, #104]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	f023 020c 	bic.w	r2, r3, #12
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	4917      	ldr	r1, [pc, #92]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006800:	4313      	orrs	r3, r2
 8006802:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006804:	4b15      	ldr	r3, [pc, #84]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	f023 0202 	bic.w	r2, r3, #2
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006810:	4912      	ldr	r1, [pc, #72]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006812:	4313      	orrs	r3, r2
 8006814:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006816:	4b11      	ldr	r3, [pc, #68]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681a:	4a10      	ldr	r2, [pc, #64]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 800681c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006820:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006822:	4b0e      	ldr	r3, [pc, #56]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006826:	4a0d      	ldr	r2, [pc, #52]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800682c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800682e:	4b0b      	ldr	r3, [pc, #44]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006832:	4a0a      	ldr	r2, [pc, #40]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006838:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800683a:	4b08      	ldr	r3, [pc, #32]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 800683c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683e:	4a07      	ldr	r2, [pc, #28]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006840:	f043 0301 	orr.w	r3, r3, #1
 8006844:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006846:	4b05      	ldr	r3, [pc, #20]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a04      	ldr	r2, [pc, #16]	; (800685c <HAL_RCC_OscConfig+0x76c>)
 800684c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006852:	f7fb fb87 	bl	8001f64 <HAL_GetTick>
 8006856:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006858:	e011      	b.n	800687e <HAL_RCC_OscConfig+0x78e>
 800685a:	bf00      	nop
 800685c:	58024400 	.word	0x58024400
 8006860:	58024800 	.word	0x58024800
 8006864:	fffffc0c 	.word	0xfffffc0c
 8006868:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800686c:	f7fb fb7a 	bl	8001f64 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e05f      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800687e:	4b32      	ldr	r3, [pc, #200]	; (8006948 <HAL_RCC_OscConfig+0x858>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCC_OscConfig+0x77c>
 800688a:	e057      	b.n	800693c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800688c:	4b2e      	ldr	r3, [pc, #184]	; (8006948 <HAL_RCC_OscConfig+0x858>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a2d      	ldr	r2, [pc, #180]	; (8006948 <HAL_RCC_OscConfig+0x858>)
 8006892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006898:	f7fb fb64 	bl	8001f64 <HAL_GetTick>
 800689c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800689e:	e008      	b.n	80068b2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068a0:	f7fb fb60 	bl	8001f64 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e045      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068b2:	4b25      	ldr	r3, [pc, #148]	; (8006948 <HAL_RCC_OscConfig+0x858>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1f0      	bne.n	80068a0 <HAL_RCC_OscConfig+0x7b0>
 80068be:	e03d      	b.n	800693c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80068c0:	4b21      	ldr	r3, [pc, #132]	; (8006948 <HAL_RCC_OscConfig+0x858>)
 80068c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80068c6:	4b20      	ldr	r3, [pc, #128]	; (8006948 <HAL_RCC_OscConfig+0x858>)
 80068c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d031      	beq.n	8006938 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f003 0203 	and.w	r2, r3, #3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068de:	429a      	cmp	r2, r3
 80068e0:	d12a      	bne.n	8006938 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	091b      	lsrs	r3, r3, #4
 80068e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d122      	bne.n	8006938 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068fe:	429a      	cmp	r2, r3
 8006900:	d11a      	bne.n	8006938 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	0a5b      	lsrs	r3, r3, #9
 8006906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006910:	429a      	cmp	r2, r3
 8006912:	d111      	bne.n	8006938 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	0c1b      	lsrs	r3, r3, #16
 8006918:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006920:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006922:	429a      	cmp	r2, r3
 8006924:	d108      	bne.n	8006938 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	0e1b      	lsrs	r3, r3, #24
 800692a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006932:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006934:	429a      	cmp	r2, r3
 8006936:	d001      	beq.n	800693c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e000      	b.n	800693e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3730      	adds	r7, #48	; 0x30
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	58024400 	.word	0x58024400

0800694c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e19c      	b.n	8006c9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006960:	4b8a      	ldr	r3, [pc, #552]	; (8006b8c <HAL_RCC_ClockConfig+0x240>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 030f 	and.w	r3, r3, #15
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d910      	bls.n	8006990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696e:	4b87      	ldr	r3, [pc, #540]	; (8006b8c <HAL_RCC_ClockConfig+0x240>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f023 020f 	bic.w	r2, r3, #15
 8006976:	4985      	ldr	r1, [pc, #532]	; (8006b8c <HAL_RCC_ClockConfig+0x240>)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	4313      	orrs	r3, r2
 800697c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800697e:	4b83      	ldr	r3, [pc, #524]	; (8006b8c <HAL_RCC_ClockConfig+0x240>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 030f 	and.w	r3, r3, #15
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d001      	beq.n	8006990 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e184      	b.n	8006c9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d010      	beq.n	80069be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	4b7b      	ldr	r3, [pc, #492]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d908      	bls.n	80069be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069ac:	4b78      	ldr	r3, [pc, #480]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	4975      	ldr	r1, [pc, #468]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d010      	beq.n	80069ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695a      	ldr	r2, [r3, #20]
 80069ce:	4b70      	ldr	r3, [pc, #448]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d908      	bls.n	80069ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069da:	4b6d      	ldr	r3, [pc, #436]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	496a      	ldr	r1, [pc, #424]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d010      	beq.n	8006a1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	699a      	ldr	r2, [r3, #24]
 80069fc:	4b64      	ldr	r3, [pc, #400]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d908      	bls.n	8006a1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a08:	4b61      	ldr	r3, [pc, #388]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	495e      	ldr	r1, [pc, #376]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d010      	beq.n	8006a48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69da      	ldr	r2, [r3, #28]
 8006a2a:	4b59      	ldr	r3, [pc, #356]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d908      	bls.n	8006a48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a36:	4b56      	ldr	r3, [pc, #344]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	4953      	ldr	r1, [pc, #332]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d010      	beq.n	8006a76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68da      	ldr	r2, [r3, #12]
 8006a58:	4b4d      	ldr	r3, [pc, #308]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	f003 030f 	and.w	r3, r3, #15
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d908      	bls.n	8006a76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a64:	4b4a      	ldr	r3, [pc, #296]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	f023 020f 	bic.w	r2, r3, #15
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	4947      	ldr	r1, [pc, #284]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d055      	beq.n	8006b2e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006a82:	4b43      	ldr	r3, [pc, #268]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	4940      	ldr	r1, [pc, #256]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d107      	bne.n	8006aac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a9c:	4b3c      	ldr	r3, [pc, #240]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d121      	bne.n	8006aec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e0f6      	b.n	8006c9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d107      	bne.n	8006ac4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ab4:	4b36      	ldr	r3, [pc, #216]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d115      	bne.n	8006aec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e0ea      	b.n	8006c9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d107      	bne.n	8006adc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006acc:	4b30      	ldr	r3, [pc, #192]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d109      	bne.n	8006aec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e0de      	b.n	8006c9a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006adc:	4b2c      	ldr	r3, [pc, #176]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e0d6      	b.n	8006c9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006aec:	4b28      	ldr	r3, [pc, #160]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f023 0207 	bic.w	r2, r3, #7
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	4925      	ldr	r1, [pc, #148]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006afe:	f7fb fa31 	bl	8001f64 <HAL_GetTick>
 8006b02:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b04:	e00a      	b.n	8006b1c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b06:	f7fb fa2d 	bl	8001f64 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d901      	bls.n	8006b1c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e0be      	b.n	8006c9a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b1c:	4b1c      	ldr	r3, [pc, #112]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	00db      	lsls	r3, r3, #3
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d1eb      	bne.n	8006b06 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d010      	beq.n	8006b5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	4b14      	ldr	r3, [pc, #80]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d208      	bcs.n	8006b5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b4a:	4b11      	ldr	r3, [pc, #68]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f023 020f 	bic.w	r2, r3, #15
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	490e      	ldr	r1, [pc, #56]	; (8006b90 <HAL_RCC_ClockConfig+0x244>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b5c:	4b0b      	ldr	r3, [pc, #44]	; (8006b8c <HAL_RCC_ClockConfig+0x240>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d214      	bcs.n	8006b94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b6a:	4b08      	ldr	r3, [pc, #32]	; (8006b8c <HAL_RCC_ClockConfig+0x240>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f023 020f 	bic.w	r2, r3, #15
 8006b72:	4906      	ldr	r1, [pc, #24]	; (8006b8c <HAL_RCC_ClockConfig+0x240>)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7a:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <HAL_RCC_ClockConfig+0x240>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d005      	beq.n	8006b94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e086      	b.n	8006c9a <HAL_RCC_ClockConfig+0x34e>
 8006b8c:	52002000 	.word	0x52002000
 8006b90:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d010      	beq.n	8006bc2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	4b3f      	ldr	r3, [pc, #252]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d208      	bcs.n	8006bc2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006bb0:	4b3c      	ldr	r3, [pc, #240]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	4939      	ldr	r1, [pc, #228]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0308 	and.w	r3, r3, #8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d010      	beq.n	8006bf0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	695a      	ldr	r2, [r3, #20]
 8006bd2:	4b34      	ldr	r3, [pc, #208]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d208      	bcs.n	8006bf0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006bde:	4b31      	ldr	r3, [pc, #196]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	492e      	ldr	r1, [pc, #184]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0310 	and.w	r3, r3, #16
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d010      	beq.n	8006c1e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699a      	ldr	r2, [r3, #24]
 8006c00:	4b28      	ldr	r3, [pc, #160]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d208      	bcs.n	8006c1e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c0c:	4b25      	ldr	r3, [pc, #148]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	4922      	ldr	r1, [pc, #136]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d010      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69da      	ldr	r2, [r3, #28]
 8006c2e:	4b1d      	ldr	r3, [pc, #116]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d208      	bcs.n	8006c4c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006c3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	4917      	ldr	r1, [pc, #92]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c4c:	f000 f834 	bl	8006cb8 <HAL_RCC_GetSysClockFreq>
 8006c50:	4602      	mov	r2, r0
 8006c52:	4b14      	ldr	r3, [pc, #80]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	0a1b      	lsrs	r3, r3, #8
 8006c58:	f003 030f 	and.w	r3, r3, #15
 8006c5c:	4912      	ldr	r1, [pc, #72]	; (8006ca8 <HAL_RCC_ClockConfig+0x35c>)
 8006c5e:	5ccb      	ldrb	r3, [r1, r3]
 8006c60:	f003 031f 	and.w	r3, r3, #31
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
 8006c68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ca4 <HAL_RCC_ClockConfig+0x358>)
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	4a0d      	ldr	r2, [pc, #52]	; (8006ca8 <HAL_RCC_ClockConfig+0x35c>)
 8006c74:	5cd3      	ldrb	r3, [r2, r3]
 8006c76:	f003 031f 	and.w	r3, r3, #31
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c80:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <HAL_RCC_ClockConfig+0x360>)
 8006c82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c84:	4a0a      	ldr	r2, [pc, #40]	; (8006cb0 <HAL_RCC_ClockConfig+0x364>)
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006c8a:	4b0a      	ldr	r3, [pc, #40]	; (8006cb4 <HAL_RCC_ClockConfig+0x368>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fa f93a 	bl	8000f08 <HAL_InitTick>
 8006c94:	4603      	mov	r3, r0
 8006c96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	58024400 	.word	0x58024400
 8006ca8:	080104d0 	.word	0x080104d0
 8006cac:	20000004 	.word	0x20000004
 8006cb0:	20000000 	.word	0x20000000
 8006cb4:	20000008 	.word	0x20000008

08006cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b089      	sub	sp, #36	; 0x24
 8006cbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cbe:	4bb3      	ldr	r3, [pc, #716]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cc6:	2b18      	cmp	r3, #24
 8006cc8:	f200 8155 	bhi.w	8006f76 <HAL_RCC_GetSysClockFreq+0x2be>
 8006ccc:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd2:	bf00      	nop
 8006cd4:	08006d39 	.word	0x08006d39
 8006cd8:	08006f77 	.word	0x08006f77
 8006cdc:	08006f77 	.word	0x08006f77
 8006ce0:	08006f77 	.word	0x08006f77
 8006ce4:	08006f77 	.word	0x08006f77
 8006ce8:	08006f77 	.word	0x08006f77
 8006cec:	08006f77 	.word	0x08006f77
 8006cf0:	08006f77 	.word	0x08006f77
 8006cf4:	08006d5f 	.word	0x08006d5f
 8006cf8:	08006f77 	.word	0x08006f77
 8006cfc:	08006f77 	.word	0x08006f77
 8006d00:	08006f77 	.word	0x08006f77
 8006d04:	08006f77 	.word	0x08006f77
 8006d08:	08006f77 	.word	0x08006f77
 8006d0c:	08006f77 	.word	0x08006f77
 8006d10:	08006f77 	.word	0x08006f77
 8006d14:	08006d65 	.word	0x08006d65
 8006d18:	08006f77 	.word	0x08006f77
 8006d1c:	08006f77 	.word	0x08006f77
 8006d20:	08006f77 	.word	0x08006f77
 8006d24:	08006f77 	.word	0x08006f77
 8006d28:	08006f77 	.word	0x08006f77
 8006d2c:	08006f77 	.word	0x08006f77
 8006d30:	08006f77 	.word	0x08006f77
 8006d34:	08006d6b 	.word	0x08006d6b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d38:	4b94      	ldr	r3, [pc, #592]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0320 	and.w	r3, r3, #32
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d009      	beq.n	8006d58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d44:	4b91      	ldr	r3, [pc, #580]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	08db      	lsrs	r3, r3, #3
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	4a90      	ldr	r2, [pc, #576]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d50:	fa22 f303 	lsr.w	r3, r2, r3
 8006d54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006d56:	e111      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d58:	4b8d      	ldr	r3, [pc, #564]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d5a:	61bb      	str	r3, [r7, #24]
    break;
 8006d5c:	e10e      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006d5e:	4b8d      	ldr	r3, [pc, #564]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d60:	61bb      	str	r3, [r7, #24]
    break;
 8006d62:	e10b      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006d64:	4b8c      	ldr	r3, [pc, #560]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d66:	61bb      	str	r3, [r7, #24]
    break;
 8006d68:	e108      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d6a:	4b88      	ldr	r3, [pc, #544]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006d74:	4b85      	ldr	r3, [pc, #532]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	091b      	lsrs	r3, r3, #4
 8006d7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d7e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d80:	4b82      	ldr	r3, [pc, #520]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006d8a:	4b80      	ldr	r3, [pc, #512]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8e:	08db      	lsrs	r3, r3, #3
 8006d90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	fb02 f303 	mul.w	r3, r2, r3
 8006d9a:	ee07 3a90 	vmov	s15, r3
 8006d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 80e1 	beq.w	8006f70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	f000 8083 	beq.w	8006ebc <HAL_RCC_GetSysClockFreq+0x204>
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	f200 80a1 	bhi.w	8006f00 <HAL_RCC_GetSysClockFreq+0x248>
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <HAL_RCC_GetSysClockFreq+0x114>
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d056      	beq.n	8006e78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006dca:	e099      	b.n	8006f00 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dcc:	4b6f      	ldr	r3, [pc, #444]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d02d      	beq.n	8006e34 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dd8:	4b6c      	ldr	r3, [pc, #432]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	08db      	lsrs	r3, r3, #3
 8006dde:	f003 0303 	and.w	r3, r3, #3
 8006de2:	4a6b      	ldr	r2, [pc, #428]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006de4:	fa22 f303 	lsr.w	r3, r2, r3
 8006de8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	ee07 3a90 	vmov	s15, r3
 8006df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e02:	4b62      	ldr	r3, [pc, #392]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e16:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006f9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006e32:	e087      	b.n	8006f44 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	ee07 3a90 	vmov	s15, r3
 8006e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006fa0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e46:	4b51      	ldr	r3, [pc, #324]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e56:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e5a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006f9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e76:	e065      	b.n	8006f44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e82:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006fa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8a:	4b40      	ldr	r3, [pc, #256]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e9e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006f9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eba:	e043      	b.n	8006f44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006fa8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ece:	4b2f      	ldr	r3, [pc, #188]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ee2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006f9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006efe:	e021      	b.n	8006f44 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006fa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f12:	4b1e      	ldr	r3, [pc, #120]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1a:	ee07 3a90 	vmov	s15, r3
 8006f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f26:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006f9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f42:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006f44:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f48:	0a5b      	lsrs	r3, r3, #9
 8006f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f4e:	3301      	adds	r3, #1
 8006f50:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	ee07 3a90 	vmov	s15, r3
 8006f58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f68:	ee17 3a90 	vmov	r3, s15
 8006f6c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006f6e:	e005      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61bb      	str	r3, [r7, #24]
    break;
 8006f74:	e002      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006f76:	4b07      	ldr	r3, [pc, #28]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f78:	61bb      	str	r3, [r7, #24]
    break;
 8006f7a:	bf00      	nop
  }

  return sysclockfreq;
 8006f7c:	69bb      	ldr	r3, [r7, #24]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3724      	adds	r7, #36	; 0x24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	58024400 	.word	0x58024400
 8006f90:	03d09000 	.word	0x03d09000
 8006f94:	003d0900 	.word	0x003d0900
 8006f98:	007a1200 	.word	0x007a1200
 8006f9c:	46000000 	.word	0x46000000
 8006fa0:	4c742400 	.word	0x4c742400
 8006fa4:	4a742400 	.word	0x4a742400
 8006fa8:	4af42400 	.word	0x4af42400

08006fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006fb2:	f7ff fe81 	bl	8006cb8 <HAL_RCC_GetSysClockFreq>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <HAL_RCC_GetHCLKFreq+0x50>)
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	0a1b      	lsrs	r3, r3, #8
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	490f      	ldr	r1, [pc, #60]	; (8007000 <HAL_RCC_GetHCLKFreq+0x54>)
 8006fc4:	5ccb      	ldrb	r3, [r1, r3]
 8006fc6:	f003 031f 	and.w	r3, r3, #31
 8006fca:	fa22 f303 	lsr.w	r3, r2, r3
 8006fce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fd0:	4b0a      	ldr	r3, [pc, #40]	; (8006ffc <HAL_RCC_GetHCLKFreq+0x50>)
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	4a09      	ldr	r2, [pc, #36]	; (8007000 <HAL_RCC_GetHCLKFreq+0x54>)
 8006fda:	5cd3      	ldrb	r3, [r2, r3]
 8006fdc:	f003 031f 	and.w	r3, r3, #31
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe6:	4a07      	ldr	r2, [pc, #28]	; (8007004 <HAL_RCC_GetHCLKFreq+0x58>)
 8006fe8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fea:	4a07      	ldr	r2, [pc, #28]	; (8007008 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ff0:	4b04      	ldr	r3, [pc, #16]	; (8007004 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	58024400 	.word	0x58024400
 8007000:	080104d0 	.word	0x080104d0
 8007004:	20000004 	.word	0x20000004
 8007008:	20000000 	.word	0x20000000

0800700c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007010:	f7ff ffcc 	bl	8006fac <HAL_RCC_GetHCLKFreq>
 8007014:	4602      	mov	r2, r0
 8007016:	4b06      	ldr	r3, [pc, #24]	; (8007030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	091b      	lsrs	r3, r3, #4
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	4904      	ldr	r1, [pc, #16]	; (8007034 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007022:	5ccb      	ldrb	r3, [r1, r3]
 8007024:	f003 031f 	and.w	r3, r3, #31
 8007028:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800702c:	4618      	mov	r0, r3
 800702e:	bd80      	pop	{r7, pc}
 8007030:	58024400 	.word	0x58024400
 8007034:	080104d0 	.word	0x080104d0

08007038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800703c:	f7ff ffb6 	bl	8006fac <HAL_RCC_GetHCLKFreq>
 8007040:	4602      	mov	r2, r0
 8007042:	4b06      	ldr	r3, [pc, #24]	; (800705c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	0a1b      	lsrs	r3, r3, #8
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	4904      	ldr	r1, [pc, #16]	; (8007060 <HAL_RCC_GetPCLK2Freq+0x28>)
 800704e:	5ccb      	ldrb	r3, [r1, r3]
 8007050:	f003 031f 	and.w	r3, r3, #31
 8007054:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007058:	4618      	mov	r0, r3
 800705a:	bd80      	pop	{r7, pc}
 800705c:	58024400 	.word	0x58024400
 8007060:	080104d0 	.word	0x080104d0

08007064 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	223f      	movs	r2, #63	; 0x3f
 8007072:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007074:	4b1a      	ldr	r3, [pc, #104]	; (80070e0 <HAL_RCC_GetClockConfig+0x7c>)
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	f003 0207 	and.w	r2, r3, #7
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007080:	4b17      	ldr	r3, [pc, #92]	; (80070e0 <HAL_RCC_GetClockConfig+0x7c>)
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800708c:	4b14      	ldr	r3, [pc, #80]	; (80070e0 <HAL_RCC_GetClockConfig+0x7c>)
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f003 020f 	and.w	r2, r3, #15
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007098:	4b11      	ldr	r3, [pc, #68]	; (80070e0 <HAL_RCC_GetClockConfig+0x7c>)
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80070a4:	4b0e      	ldr	r3, [pc, #56]	; (80070e0 <HAL_RCC_GetClockConfig+0x7c>)
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80070b0:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <HAL_RCC_GetClockConfig+0x7c>)
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80070bc:	4b08      	ldr	r3, [pc, #32]	; (80070e0 <HAL_RCC_GetClockConfig+0x7c>)
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <HAL_RCC_GetClockConfig+0x80>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 020f 	and.w	r2, r3, #15
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	601a      	str	r2, [r3, #0]
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	58024400 	.word	0x58024400
 80070e4:	52002000 	.word	0x52002000

080070e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070f0:	2300      	movs	r3, #0
 80070f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070f4:	2300      	movs	r3, #0
 80070f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d03f      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007108:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800710c:	d02a      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800710e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007112:	d824      	bhi.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007114:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007118:	d018      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800711a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800711e:	d81e      	bhi.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007128:	d007      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800712a:	e018      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800712c:	4ba3      	ldr	r3, [pc, #652]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007130:	4aa2      	ldr	r2, [pc, #648]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007136:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007138:	e015      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3304      	adds	r3, #4
 800713e:	2102      	movs	r1, #2
 8007140:	4618      	mov	r0, r3
 8007142:	f001 f9d5 	bl	80084f0 <RCCEx_PLL2_Config>
 8007146:	4603      	mov	r3, r0
 8007148:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800714a:	e00c      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3324      	adds	r3, #36	; 0x24
 8007150:	2102      	movs	r1, #2
 8007152:	4618      	mov	r0, r3
 8007154:	f001 fa7e 	bl	8008654 <RCCEx_PLL3_Config>
 8007158:	4603      	mov	r3, r0
 800715a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800715c:	e003      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	75fb      	strb	r3, [r7, #23]
      break;
 8007162:	e000      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007166:	7dfb      	ldrb	r3, [r7, #23]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d109      	bne.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800716c:	4b93      	ldr	r3, [pc, #588]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800716e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007170:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007178:	4990      	ldr	r1, [pc, #576]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800717a:	4313      	orrs	r3, r2
 800717c:	650b      	str	r3, [r1, #80]	; 0x50
 800717e:	e001      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718c:	2b00      	cmp	r3, #0
 800718e:	d03d      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007194:	2b04      	cmp	r3, #4
 8007196:	d826      	bhi.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007198:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800719a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719e:	bf00      	nop
 80071a0:	080071b5 	.word	0x080071b5
 80071a4:	080071c3 	.word	0x080071c3
 80071a8:	080071d5 	.word	0x080071d5
 80071ac:	080071ed 	.word	0x080071ed
 80071b0:	080071ed 	.word	0x080071ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071b4:	4b81      	ldr	r3, [pc, #516]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	4a80      	ldr	r2, [pc, #512]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80071ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071c0:	e015      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	3304      	adds	r3, #4
 80071c6:	2100      	movs	r1, #0
 80071c8:	4618      	mov	r0, r3
 80071ca:	f001 f991 	bl	80084f0 <RCCEx_PLL2_Config>
 80071ce:	4603      	mov	r3, r0
 80071d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071d2:	e00c      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3324      	adds	r3, #36	; 0x24
 80071d8:	2100      	movs	r1, #0
 80071da:	4618      	mov	r0, r3
 80071dc:	f001 fa3a 	bl	8008654 <RCCEx_PLL3_Config>
 80071e0:	4603      	mov	r3, r0
 80071e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071e4:	e003      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	75fb      	strb	r3, [r7, #23]
      break;
 80071ea:	e000      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80071ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d109      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071f4:	4b71      	ldr	r3, [pc, #452]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80071f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f8:	f023 0207 	bic.w	r2, r3, #7
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007200:	496e      	ldr	r1, [pc, #440]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007202:	4313      	orrs	r3, r2
 8007204:	650b      	str	r3, [r1, #80]	; 0x50
 8007206:	e001      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007214:	2b00      	cmp	r3, #0
 8007216:	d042      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007220:	d02b      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007226:	d825      	bhi.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007228:	2bc0      	cmp	r3, #192	; 0xc0
 800722a:	d028      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800722c:	2bc0      	cmp	r3, #192	; 0xc0
 800722e:	d821      	bhi.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007230:	2b80      	cmp	r3, #128	; 0x80
 8007232:	d016      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007234:	2b80      	cmp	r3, #128	; 0x80
 8007236:	d81d      	bhi.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800723c:	2b40      	cmp	r3, #64	; 0x40
 800723e:	d007      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007240:	e018      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007242:	4b5e      	ldr	r3, [pc, #376]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	4a5d      	ldr	r2, [pc, #372]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800724c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800724e:	e017      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3304      	adds	r3, #4
 8007254:	2100      	movs	r1, #0
 8007256:	4618      	mov	r0, r3
 8007258:	f001 f94a 	bl	80084f0 <RCCEx_PLL2_Config>
 800725c:	4603      	mov	r3, r0
 800725e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007260:	e00e      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3324      	adds	r3, #36	; 0x24
 8007266:	2100      	movs	r1, #0
 8007268:	4618      	mov	r0, r3
 800726a:	f001 f9f3 	bl	8008654 <RCCEx_PLL3_Config>
 800726e:	4603      	mov	r3, r0
 8007270:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007272:	e005      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	75fb      	strb	r3, [r7, #23]
      break;
 8007278:	e002      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800727a:	bf00      	nop
 800727c:	e000      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800727e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007280:	7dfb      	ldrb	r3, [r7, #23]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d109      	bne.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007286:	4b4d      	ldr	r3, [pc, #308]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007292:	494a      	ldr	r1, [pc, #296]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007294:	4313      	orrs	r3, r2
 8007296:	650b      	str	r3, [r1, #80]	; 0x50
 8007298:	e001      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800729a:	7dfb      	ldrb	r3, [r7, #23]
 800729c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d049      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072b4:	d030      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80072b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072ba:	d82a      	bhi.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80072bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072c0:	d02c      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80072c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072c6:	d824      	bhi.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80072c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072cc:	d018      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80072ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072d2:	d81e      	bhi.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80072d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072dc:	d007      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80072de:	e018      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072e0:	4b36      	ldr	r3, [pc, #216]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80072e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e4:	4a35      	ldr	r2, [pc, #212]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80072e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072ec:	e017      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3304      	adds	r3, #4
 80072f2:	2100      	movs	r1, #0
 80072f4:	4618      	mov	r0, r3
 80072f6:	f001 f8fb 	bl	80084f0 <RCCEx_PLL2_Config>
 80072fa:	4603      	mov	r3, r0
 80072fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80072fe:	e00e      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	3324      	adds	r3, #36	; 0x24
 8007304:	2100      	movs	r1, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f001 f9a4 	bl	8008654 <RCCEx_PLL3_Config>
 800730c:	4603      	mov	r3, r0
 800730e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007310:	e005      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	75fb      	strb	r3, [r7, #23]
      break;
 8007316:	e002      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007318:	bf00      	nop
 800731a:	e000      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800731c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800731e:	7dfb      	ldrb	r3, [r7, #23]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10a      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007324:	4b25      	ldr	r3, [pc, #148]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007328:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007332:	4922      	ldr	r1, [pc, #136]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007334:	4313      	orrs	r3, r2
 8007336:	658b      	str	r3, [r1, #88]	; 0x58
 8007338:	e001      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007346:	2b00      	cmp	r3, #0
 8007348:	d04b      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007350:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007354:	d030      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007356:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800735a:	d82a      	bhi.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800735c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007360:	d02e      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007362:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007366:	d824      	bhi.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800736c:	d018      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800736e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007372:	d81e      	bhi.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800737c:	d007      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800737e:	e018      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007380:	4b0e      	ldr	r3, [pc, #56]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	4a0d      	ldr	r2, [pc, #52]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800738a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800738c:	e019      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3304      	adds	r3, #4
 8007392:	2100      	movs	r1, #0
 8007394:	4618      	mov	r0, r3
 8007396:	f001 f8ab 	bl	80084f0 <RCCEx_PLL2_Config>
 800739a:	4603      	mov	r3, r0
 800739c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800739e:	e010      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	3324      	adds	r3, #36	; 0x24
 80073a4:	2100      	movs	r1, #0
 80073a6:	4618      	mov	r0, r3
 80073a8:	f001 f954 	bl	8008654 <RCCEx_PLL3_Config>
 80073ac:	4603      	mov	r3, r0
 80073ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073b0:	e007      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	75fb      	strb	r3, [r7, #23]
      break;
 80073b6:	e004      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80073b8:	bf00      	nop
 80073ba:	e002      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80073bc:	58024400 	.word	0x58024400
      break;
 80073c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80073c8:	4b99      	ldr	r3, [pc, #612]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80073ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073d6:	4996      	ldr	r1, [pc, #600]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	658b      	str	r3, [r1, #88]	; 0x58
 80073dc:	e001      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073de:	7dfb      	ldrb	r3, [r7, #23]
 80073e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d032      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f2:	2b30      	cmp	r3, #48	; 0x30
 80073f4:	d01c      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80073f6:	2b30      	cmp	r3, #48	; 0x30
 80073f8:	d817      	bhi.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d00c      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80073fe:	2b20      	cmp	r3, #32
 8007400:	d813      	bhi.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007402:	2b00      	cmp	r3, #0
 8007404:	d016      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007406:	2b10      	cmp	r3, #16
 8007408:	d10f      	bne.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800740a:	4b89      	ldr	r3, [pc, #548]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800740c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740e:	4a88      	ldr	r2, [pc, #544]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007414:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007416:	e00e      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3304      	adds	r3, #4
 800741c:	2102      	movs	r1, #2
 800741e:	4618      	mov	r0, r3
 8007420:	f001 f866 	bl	80084f0 <RCCEx_PLL2_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007428:	e005      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	75fb      	strb	r3, [r7, #23]
      break;
 800742e:	e002      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007430:	bf00      	nop
 8007432:	e000      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d109      	bne.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800743c:	4b7c      	ldr	r3, [pc, #496]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800743e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007440:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007448:	4979      	ldr	r1, [pc, #484]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800744a:	4313      	orrs	r3, r2
 800744c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800744e:	e001      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d047      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007468:	d030      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800746a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800746e:	d82a      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007470:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007474:	d02c      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007476:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800747a:	d824      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800747c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007480:	d018      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007486:	d81e      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800748c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007490:	d007      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007492:	e018      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007494:	4b66      	ldr	r3, [pc, #408]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	4a65      	ldr	r2, [pc, #404]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800749a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800749e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074a0:	e017      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3304      	adds	r3, #4
 80074a6:	2100      	movs	r1, #0
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 f821 	bl	80084f0 <RCCEx_PLL2_Config>
 80074ae:	4603      	mov	r3, r0
 80074b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074b2:	e00e      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3324      	adds	r3, #36	; 0x24
 80074b8:	2100      	movs	r1, #0
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 f8ca 	bl	8008654 <RCCEx_PLL3_Config>
 80074c0:	4603      	mov	r3, r0
 80074c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074c4:	e005      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	75fb      	strb	r3, [r7, #23]
      break;
 80074ca:	e002      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80074cc:	bf00      	nop
 80074ce:	e000      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80074d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d109      	bne.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80074d8:	4b55      	ldr	r3, [pc, #340]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80074da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e4:	4952      	ldr	r1, [pc, #328]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	650b      	str	r3, [r1, #80]	; 0x50
 80074ea:	e001      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d049      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007504:	d02e      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007506:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800750a:	d828      	bhi.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800750c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007510:	d02a      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007512:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007516:	d822      	bhi.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007518:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800751c:	d026      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800751e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007522:	d81c      	bhi.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007524:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007528:	d010      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800752a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800752e:	d816      	bhi.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007530:	2b00      	cmp	r3, #0
 8007532:	d01d      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007538:	d111      	bne.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3304      	adds	r3, #4
 800753e:	2101      	movs	r1, #1
 8007540:	4618      	mov	r0, r3
 8007542:	f000 ffd5 	bl	80084f0 <RCCEx_PLL2_Config>
 8007546:	4603      	mov	r3, r0
 8007548:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800754a:	e012      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3324      	adds	r3, #36	; 0x24
 8007550:	2101      	movs	r1, #1
 8007552:	4618      	mov	r0, r3
 8007554:	f001 f87e 	bl	8008654 <RCCEx_PLL3_Config>
 8007558:	4603      	mov	r3, r0
 800755a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800755c:	e009      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	75fb      	strb	r3, [r7, #23]
      break;
 8007562:	e006      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007564:	bf00      	nop
 8007566:	e004      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007568:	bf00      	nop
 800756a:	e002      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800756c:	bf00      	nop
 800756e:	e000      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d109      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007578:	4b2d      	ldr	r3, [pc, #180]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800757a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007584:	492a      	ldr	r1, [pc, #168]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007586:	4313      	orrs	r3, r2
 8007588:	650b      	str	r3, [r1, #80]	; 0x50
 800758a:	e001      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800758c:	7dfb      	ldrb	r3, [r7, #23]
 800758e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d04d      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80075a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075a6:	d02e      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80075a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075ac:	d828      	bhi.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80075ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b2:	d02a      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80075b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b8:	d822      	bhi.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80075ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075be:	d026      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80075c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075c4:	d81c      	bhi.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80075c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ca:	d010      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0x506>
 80075cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075d0:	d816      	bhi.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01d      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80075d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075da:	d111      	bne.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3304      	adds	r3, #4
 80075e0:	2101      	movs	r1, #1
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 ff84 	bl	80084f0 <RCCEx_PLL2_Config>
 80075e8:	4603      	mov	r3, r0
 80075ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80075ec:	e012      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	3324      	adds	r3, #36	; 0x24
 80075f2:	2101      	movs	r1, #1
 80075f4:	4618      	mov	r0, r3
 80075f6:	f001 f82d 	bl	8008654 <RCCEx_PLL3_Config>
 80075fa:	4603      	mov	r3, r0
 80075fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80075fe:	e009      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	75fb      	strb	r3, [r7, #23]
      break;
 8007604:	e006      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007606:	bf00      	nop
 8007608:	e004      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800760a:	bf00      	nop
 800760c:	e002      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800760e:	bf00      	nop
 8007610:	e000      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10c      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800761a:	4b05      	ldr	r3, [pc, #20]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800761c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800761e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007628:	4901      	ldr	r1, [pc, #4]	; (8007630 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800762a:	4313      	orrs	r3, r2
 800762c:	658b      	str	r3, [r1, #88]	; 0x58
 800762e:	e003      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007630:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007634:	7dfb      	ldrb	r3, [r7, #23]
 8007636:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d02f      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800764c:	d00e      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800764e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007652:	d814      	bhi.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007654:	2b00      	cmp	r3, #0
 8007656:	d015      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800765c:	d10f      	bne.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800765e:	4baf      	ldr	r3, [pc, #700]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007662:	4aae      	ldr	r2, [pc, #696]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007668:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800766a:	e00c      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3304      	adds	r3, #4
 8007670:	2101      	movs	r1, #1
 8007672:	4618      	mov	r0, r3
 8007674:	f000 ff3c 	bl	80084f0 <RCCEx_PLL2_Config>
 8007678:	4603      	mov	r3, r0
 800767a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800767c:	e003      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	75fb      	strb	r3, [r7, #23]
      break;
 8007682:	e000      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007686:	7dfb      	ldrb	r3, [r7, #23]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d109      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800768c:	4ba3      	ldr	r3, [pc, #652]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800768e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007690:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007698:	49a0      	ldr	r1, [pc, #640]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800769a:	4313      	orrs	r3, r2
 800769c:	650b      	str	r3, [r1, #80]	; 0x50
 800769e:	e001      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d032      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d81b      	bhi.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80076b8:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076be:	bf00      	nop
 80076c0:	080076f7 	.word	0x080076f7
 80076c4:	080076d1 	.word	0x080076d1
 80076c8:	080076df 	.word	0x080076df
 80076cc:	080076f7 	.word	0x080076f7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d0:	4b92      	ldr	r3, [pc, #584]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	4a91      	ldr	r2, [pc, #580]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80076d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80076dc:	e00c      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3304      	adds	r3, #4
 80076e2:	2102      	movs	r1, #2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 ff03 	bl	80084f0 <RCCEx_PLL2_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80076ee:	e003      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	75fb      	strb	r3, [r7, #23]
      break;
 80076f4:	e000      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80076f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d109      	bne.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80076fe:	4b87      	ldr	r3, [pc, #540]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007702:	f023 0203 	bic.w	r2, r3, #3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770a:	4984      	ldr	r1, [pc, #528]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800770c:	4313      	orrs	r3, r2
 800770e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007710:	e001      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800771e:	2b00      	cmp	r3, #0
 8007720:	f000 8086 	beq.w	8007830 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007724:	4b7e      	ldr	r3, [pc, #504]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a7d      	ldr	r2, [pc, #500]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800772a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800772e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007730:	f7fa fc18 	bl	8001f64 <HAL_GetTick>
 8007734:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007736:	e009      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007738:	f7fa fc14 	bl	8001f64 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b64      	cmp	r3, #100	; 0x64
 8007744:	d902      	bls.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	75fb      	strb	r3, [r7, #23]
        break;
 800774a:	e005      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800774c:	4b74      	ldr	r3, [pc, #464]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0ef      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007758:	7dfb      	ldrb	r3, [r7, #23]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d166      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800775e:	4b6f      	ldr	r3, [pc, #444]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007760:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007768:	4053      	eors	r3, r2
 800776a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800776e:	2b00      	cmp	r3, #0
 8007770:	d013      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007772:	4b6a      	ldr	r3, [pc, #424]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800777a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800777c:	4b67      	ldr	r3, [pc, #412]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800777e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007780:	4a66      	ldr	r2, [pc, #408]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007786:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007788:	4b64      	ldr	r3, [pc, #400]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800778a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800778c:	4a63      	ldr	r2, [pc, #396]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800778e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007792:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007794:	4a61      	ldr	r2, [pc, #388]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a4:	d115      	bne.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a6:	f7fa fbdd 	bl	8001f64 <HAL_GetTick>
 80077aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077ac:	e00b      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077ae:	f7fa fbd9 	bl	8001f64 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077bc:	4293      	cmp	r3, r2
 80077be:	d902      	bls.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	75fb      	strb	r3, [r7, #23]
            break;
 80077c4:	e005      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077c6:	4b55      	ldr	r3, [pc, #340]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80077c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0ed      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d126      	bne.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077e6:	d10d      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80077e8:	4b4c      	ldr	r3, [pc, #304]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077f6:	0919      	lsrs	r1, r3, #4
 80077f8:	4b4a      	ldr	r3, [pc, #296]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80077fa:	400b      	ands	r3, r1
 80077fc:	4947      	ldr	r1, [pc, #284]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	610b      	str	r3, [r1, #16]
 8007802:	e005      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007804:	4b45      	ldr	r3, [pc, #276]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	4a44      	ldr	r2, [pc, #272]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800780a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800780e:	6113      	str	r3, [r2, #16]
 8007810:	4b42      	ldr	r3, [pc, #264]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800781a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800781e:	493f      	ldr	r1, [pc, #252]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007820:	4313      	orrs	r3, r2
 8007822:	670b      	str	r3, [r1, #112]	; 0x70
 8007824:	e004      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007826:	7dfb      	ldrb	r3, [r7, #23]
 8007828:	75bb      	strb	r3, [r7, #22]
 800782a:	e001      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
 800782e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 8085 	beq.w	8007948 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007842:	2b28      	cmp	r3, #40	; 0x28
 8007844:	d866      	bhi.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	08007929 	.word	0x08007929
 8007850:	08007915 	.word	0x08007915
 8007854:	08007915 	.word	0x08007915
 8007858:	08007915 	.word	0x08007915
 800785c:	08007915 	.word	0x08007915
 8007860:	08007915 	.word	0x08007915
 8007864:	08007915 	.word	0x08007915
 8007868:	08007915 	.word	0x08007915
 800786c:	080078f1 	.word	0x080078f1
 8007870:	08007915 	.word	0x08007915
 8007874:	08007915 	.word	0x08007915
 8007878:	08007915 	.word	0x08007915
 800787c:	08007915 	.word	0x08007915
 8007880:	08007915 	.word	0x08007915
 8007884:	08007915 	.word	0x08007915
 8007888:	08007915 	.word	0x08007915
 800788c:	08007903 	.word	0x08007903
 8007890:	08007915 	.word	0x08007915
 8007894:	08007915 	.word	0x08007915
 8007898:	08007915 	.word	0x08007915
 800789c:	08007915 	.word	0x08007915
 80078a0:	08007915 	.word	0x08007915
 80078a4:	08007915 	.word	0x08007915
 80078a8:	08007915 	.word	0x08007915
 80078ac:	08007929 	.word	0x08007929
 80078b0:	08007915 	.word	0x08007915
 80078b4:	08007915 	.word	0x08007915
 80078b8:	08007915 	.word	0x08007915
 80078bc:	08007915 	.word	0x08007915
 80078c0:	08007915 	.word	0x08007915
 80078c4:	08007915 	.word	0x08007915
 80078c8:	08007915 	.word	0x08007915
 80078cc:	08007929 	.word	0x08007929
 80078d0:	08007915 	.word	0x08007915
 80078d4:	08007915 	.word	0x08007915
 80078d8:	08007915 	.word	0x08007915
 80078dc:	08007915 	.word	0x08007915
 80078e0:	08007915 	.word	0x08007915
 80078e4:	08007915 	.word	0x08007915
 80078e8:	08007915 	.word	0x08007915
 80078ec:	08007929 	.word	0x08007929
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3304      	adds	r3, #4
 80078f4:	2101      	movs	r1, #1
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fdfa 	bl	80084f0 <RCCEx_PLL2_Config>
 80078fc:	4603      	mov	r3, r0
 80078fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007900:	e013      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3324      	adds	r3, #36	; 0x24
 8007906:	2101      	movs	r1, #1
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fea3 	bl	8008654 <RCCEx_PLL3_Config>
 800790e:	4603      	mov	r3, r0
 8007910:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007912:	e00a      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	75fb      	strb	r3, [r7, #23]
      break;
 8007918:	e007      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800791a:	bf00      	nop
 800791c:	58024400 	.word	0x58024400
 8007920:	58024800 	.word	0x58024800
 8007924:	00ffffcf 	.word	0x00ffffcf
      break;
 8007928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800792a:	7dfb      	ldrb	r3, [r7, #23]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d109      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007930:	4b96      	ldr	r3, [pc, #600]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007934:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800793c:	4993      	ldr	r1, [pc, #588]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800793e:	4313      	orrs	r3, r2
 8007940:	654b      	str	r3, [r1, #84]	; 0x54
 8007942:	e001      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007944:	7dfb      	ldrb	r3, [r7, #23]
 8007946:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d038      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007958:	2b05      	cmp	r3, #5
 800795a:	d821      	bhi.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800795c:	a201      	add	r2, pc, #4	; (adr r2, 8007964 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800795e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007962:	bf00      	nop
 8007964:	080079a7 	.word	0x080079a7
 8007968:	0800797d 	.word	0x0800797d
 800796c:	0800798f 	.word	0x0800798f
 8007970:	080079a7 	.word	0x080079a7
 8007974:	080079a7 	.word	0x080079a7
 8007978:	080079a7 	.word	0x080079a7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3304      	adds	r3, #4
 8007980:	2101      	movs	r1, #1
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fdb4 	bl	80084f0 <RCCEx_PLL2_Config>
 8007988:	4603      	mov	r3, r0
 800798a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800798c:	e00c      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3324      	adds	r3, #36	; 0x24
 8007992:	2101      	movs	r1, #1
 8007994:	4618      	mov	r0, r3
 8007996:	f000 fe5d 	bl	8008654 <RCCEx_PLL3_Config>
 800799a:	4603      	mov	r3, r0
 800799c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800799e:	e003      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	75fb      	strb	r3, [r7, #23]
      break;
 80079a4:	e000      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80079a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d109      	bne.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80079ae:	4b77      	ldr	r3, [pc, #476]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80079b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b2:	f023 0207 	bic.w	r2, r3, #7
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ba:	4974      	ldr	r1, [pc, #464]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	654b      	str	r3, [r1, #84]	; 0x54
 80079c0:	e001      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c2:	7dfb      	ldrb	r3, [r7, #23]
 80079c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0304 	and.w	r3, r3, #4
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d03a      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d8:	2b05      	cmp	r3, #5
 80079da:	d821      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80079dc:	a201      	add	r2, pc, #4	; (adr r2, 80079e4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80079de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e2:	bf00      	nop
 80079e4:	08007a27 	.word	0x08007a27
 80079e8:	080079fd 	.word	0x080079fd
 80079ec:	08007a0f 	.word	0x08007a0f
 80079f0:	08007a27 	.word	0x08007a27
 80079f4:	08007a27 	.word	0x08007a27
 80079f8:	08007a27 	.word	0x08007a27
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3304      	adds	r3, #4
 8007a00:	2101      	movs	r1, #1
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fd74 	bl	80084f0 <RCCEx_PLL2_Config>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a0c:	e00c      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3324      	adds	r3, #36	; 0x24
 8007a12:	2101      	movs	r1, #1
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 fe1d 	bl	8008654 <RCCEx_PLL3_Config>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a1e:	e003      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	75fb      	strb	r3, [r7, #23]
      break;
 8007a24:	e000      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10a      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a2e:	4b57      	ldr	r3, [pc, #348]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a32:	f023 0207 	bic.w	r2, r3, #7
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3c:	4953      	ldr	r1, [pc, #332]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	658b      	str	r3, [r1, #88]	; 0x58
 8007a42:	e001      	b.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
 8007a46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0320 	and.w	r3, r3, #32
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d04b      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a5e:	d02e      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a64:	d828      	bhi.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a6a:	d02a      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a70:	d822      	bhi.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007a72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a76:	d026      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007a78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a7c:	d81c      	bhi.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a82:	d010      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a88:	d816      	bhi.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d01d      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a92:	d111      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3304      	adds	r3, #4
 8007a98:	2100      	movs	r1, #0
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fd28 	bl	80084f0 <RCCEx_PLL2_Config>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007aa4:	e012      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	3324      	adds	r3, #36	; 0x24
 8007aaa:	2102      	movs	r1, #2
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 fdd1 	bl	8008654 <RCCEx_PLL3_Config>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007ab6:	e009      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	75fb      	strb	r3, [r7, #23]
      break;
 8007abc:	e006      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007abe:	bf00      	nop
 8007ac0:	e004      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007ac2:	bf00      	nop
 8007ac4:	e002      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007ac6:	bf00      	nop
 8007ac8:	e000      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10a      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ad2:	4b2e      	ldr	r3, [pc, #184]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ae0:	492a      	ldr	r1, [pc, #168]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	654b      	str	r3, [r1, #84]	; 0x54
 8007ae6:	e001      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d04d      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007afe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b02:	d02e      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007b04:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b08:	d828      	bhi.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0e:	d02a      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b14:	d822      	bhi.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007b16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b1a:	d026      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007b1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b20:	d81c      	bhi.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b26:	d010      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b2c:	d816      	bhi.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d01d      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b36:	d111      	bne.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 fcd6 	bl	80084f0 <RCCEx_PLL2_Config>
 8007b44:	4603      	mov	r3, r0
 8007b46:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b48:	e012      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	3324      	adds	r3, #36	; 0x24
 8007b4e:	2102      	movs	r1, #2
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 fd7f 	bl	8008654 <RCCEx_PLL3_Config>
 8007b56:	4603      	mov	r3, r0
 8007b58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b5a:	e009      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b60:	e006      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007b62:	bf00      	nop
 8007b64:	e004      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007b66:	bf00      	nop
 8007b68:	e002      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007b6a:	bf00      	nop
 8007b6c:	e000      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007b6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10c      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b76:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b7a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b84:	4901      	ldr	r1, [pc, #4]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	658b      	str	r3, [r1, #88]	; 0x58
 8007b8a:	e003      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007b8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d04b      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ba6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007baa:	d02e      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007bac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007bb0:	d828      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb6:	d02a      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bbc:	d822      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007bbe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007bc2:	d026      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007bc4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007bc8:	d81c      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007bca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bce:	d010      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bd4:	d816      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d01d      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bde:	d111      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3304      	adds	r3, #4
 8007be4:	2100      	movs	r1, #0
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fc82 	bl	80084f0 <RCCEx_PLL2_Config>
 8007bec:	4603      	mov	r3, r0
 8007bee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007bf0:	e012      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3324      	adds	r3, #36	; 0x24
 8007bf6:	2102      	movs	r1, #2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fd2b 	bl	8008654 <RCCEx_PLL3_Config>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c02:	e009      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	75fb      	strb	r3, [r7, #23]
      break;
 8007c08:	e006      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007c0a:	bf00      	nop
 8007c0c:	e004      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007c0e:	bf00      	nop
 8007c10:	e002      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007c12:	bf00      	nop
 8007c14:	e000      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c1e:	4b9d      	ldr	r3, [pc, #628]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c2c:	4999      	ldr	r1, [pc, #612]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	658b      	str	r3, [r1, #88]	; 0x58
 8007c32:	e001      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0308 	and.w	r3, r3, #8
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d01a      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c4e:	d10a      	bne.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	3324      	adds	r3, #36	; 0x24
 8007c54:	2102      	movs	r1, #2
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 fcfc 	bl	8008654 <RCCEx_PLL3_Config>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c66:	4b8b      	ldr	r3, [pc, #556]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c74:	4987      	ldr	r1, [pc, #540]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0310 	and.w	r3, r3, #16
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d01a      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c90:	d10a      	bne.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3324      	adds	r3, #36	; 0x24
 8007c96:	2102      	movs	r1, #2
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 fcdb 	bl	8008654 <RCCEx_PLL3_Config>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ca8:	4b7a      	ldr	r3, [pc, #488]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cb6:	4977      	ldr	r1, [pc, #476]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d034      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007cce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cd2:	d01d      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cd8:	d817      	bhi.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce2:	d009      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007ce4:	e011      	b.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	3304      	adds	r3, #4
 8007cea:	2100      	movs	r1, #0
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fbff 	bl	80084f0 <RCCEx_PLL2_Config>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007cf6:	e00c      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3324      	adds	r3, #36	; 0x24
 8007cfc:	2102      	movs	r1, #2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 fca8 	bl	8008654 <RCCEx_PLL3_Config>
 8007d04:	4603      	mov	r3, r0
 8007d06:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d08:	e003      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d0e:	e000      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10a      	bne.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d18:	4b5e      	ldr	r3, [pc, #376]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d26:	495b      	ldr	r1, [pc, #364]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	658b      	str	r3, [r1, #88]	; 0x58
 8007d2c:	e001      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
 8007d30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d033      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d48:	d01c      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007d4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d4e:	d816      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d54:	d003      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007d56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d5a:	d007      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007d5c:	e00f      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d5e:	4b4d      	ldr	r3, [pc, #308]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d62:	4a4c      	ldr	r2, [pc, #304]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d6a:	e00c      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	3324      	adds	r3, #36	; 0x24
 8007d70:	2101      	movs	r1, #1
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 fc6e 	bl	8008654 <RCCEx_PLL3_Config>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d7c:	e003      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	75fb      	strb	r3, [r7, #23]
      break;
 8007d82:	e000      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d8c:	4b41      	ldr	r3, [pc, #260]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d9a:	493e      	ldr	r1, [pc, #248]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	654b      	str	r3, [r1, #84]	; 0x54
 8007da0:	e001      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d029      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dbe:	d007      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007dc0:	e00f      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dc2:	4b34      	ldr	r3, [pc, #208]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc6:	4a33      	ldr	r2, [pc, #204]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007dce:	e00b      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	2102      	movs	r1, #2
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 fb8a 	bl	80084f0 <RCCEx_PLL2_Config>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007de0:	e002      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	75fb      	strb	r3, [r7, #23]
      break;
 8007de6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d109      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007dee:	4b29      	ldr	r3, [pc, #164]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dfa:	4926      	ldr	r1, [pc, #152]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e00:	e001      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3324      	adds	r3, #36	; 0x24
 8007e16:	2102      	movs	r1, #2
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 fc1b 	bl	8008654 <RCCEx_PLL3_Config>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d033      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e3c:	d017      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e42:	d811      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e48:	d013      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e4e:	d80b      	bhi.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d010      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e58:	d106      	bne.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e5a:	4b0e      	ldr	r3, [pc, #56]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5e:	4a0d      	ldr	r2, [pc, #52]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007e66:	e007      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e6c:	e004      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007e6e:	bf00      	nop
 8007e70:	e002      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007e72:	bf00      	nop
 8007e74:	e000      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007e76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10c      	bne.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e7e:	4b05      	ldr	r3, [pc, #20]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e8a:	4902      	ldr	r1, [pc, #8]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	654b      	str	r3, [r1, #84]	; 0x54
 8007e90:	e004      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007e92:	bf00      	nop
 8007e94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
 8007e9a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d008      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ea8:	4b31      	ldr	r3, [pc, #196]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb4:	492e      	ldr	r1, [pc, #184]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d009      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007ec6:	4b2a      	ldr	r3, [pc, #168]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ed4:	4926      	ldr	r1, [pc, #152]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d008      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ee6:	4b22      	ldr	r3, [pc, #136]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ef2:	491f      	ldr	r1, [pc, #124]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00d      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f04:	4b1a      	ldr	r3, [pc, #104]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	4a19      	ldr	r2, [pc, #100]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f0e:	6113      	str	r3, [r2, #16]
 8007f10:	4b17      	ldr	r3, [pc, #92]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f12:	691a      	ldr	r2, [r3, #16]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f1a:	4915      	ldr	r1, [pc, #84]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	da08      	bge.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f28:	4b11      	ldr	r3, [pc, #68]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f34:	490e      	ldr	r1, [pc, #56]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d009      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f46:	4b0a      	ldr	r3, [pc, #40]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f54:	4906      	ldr	r1, [pc, #24]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007f5a:	7dbb      	ldrb	r3, [r7, #22]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	e000      	b.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	58024400 	.word	0x58024400

08007f74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f78:	f7ff f818 	bl	8006fac <HAL_RCC_GetHCLKFreq>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	4b06      	ldr	r3, [pc, #24]	; (8007f98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	091b      	lsrs	r3, r3, #4
 8007f84:	f003 0307 	and.w	r3, r3, #7
 8007f88:	4904      	ldr	r1, [pc, #16]	; (8007f9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f8a:	5ccb      	ldrb	r3, [r1, r3]
 8007f8c:	f003 031f 	and.w	r3, r3, #31
 8007f90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	58024400 	.word	0x58024400
 8007f9c:	080104d0 	.word	0x080104d0

08007fa0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b089      	sub	sp, #36	; 0x24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fa8:	4ba1      	ldr	r3, [pc, #644]	; (8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fac:	f003 0303 	and.w	r3, r3, #3
 8007fb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007fb2:	4b9f      	ldr	r3, [pc, #636]	; (8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb6:	0b1b      	lsrs	r3, r3, #12
 8007fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007fbe:	4b9c      	ldr	r3, [pc, #624]	; (8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc2:	091b      	lsrs	r3, r3, #4
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007fca:	4b99      	ldr	r3, [pc, #612]	; (8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fce:	08db      	lsrs	r3, r3, #3
 8007fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	fb02 f303 	mul.w	r3, r2, r3
 8007fda:	ee07 3a90 	vmov	s15, r3
 8007fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 8111 	beq.w	8008210 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	f000 8083 	beq.w	80080fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	f200 80a1 	bhi.w	8008140 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d056      	beq.n	80080b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800800a:	e099      	b.n	8008140 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800800c:	4b88      	ldr	r3, [pc, #544]	; (8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0320 	and.w	r3, r3, #32
 8008014:	2b00      	cmp	r3, #0
 8008016:	d02d      	beq.n	8008074 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008018:	4b85      	ldr	r3, [pc, #532]	; (8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	08db      	lsrs	r3, r3, #3
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	4a84      	ldr	r2, [pc, #528]	; (8008234 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008024:	fa22 f303 	lsr.w	r3, r2, r3
 8008028:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	ee07 3a90 	vmov	s15, r3
 8008030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	ee07 3a90 	vmov	s15, r3
 800803a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008042:	4b7b      	ldr	r3, [pc, #492]	; (8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008052:	ed97 6a03 	vldr	s12, [r7, #12]
 8008056:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800805a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800805e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800806a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800806e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008072:	e087      	b.n	8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	ee07 3a90 	vmov	s15, r3
 800807a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800807e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800823c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008086:	4b6a      	ldr	r3, [pc, #424]	; (8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800808e:	ee07 3a90 	vmov	s15, r3
 8008092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008096:	ed97 6a03 	vldr	s12, [r7, #12]
 800809a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800809e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080b6:	e065      	b.n	8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	ee07 3a90 	vmov	s15, r3
 80080be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ca:	4b59      	ldr	r3, [pc, #356]	; (8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d2:	ee07 3a90 	vmov	s15, r3
 80080d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080da:	ed97 6a03 	vldr	s12, [r7, #12]
 80080de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080fa:	e043      	b.n	8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	ee07 3a90 	vmov	s15, r3
 8008102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008106:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800810a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800810e:	4b48      	ldr	r3, [pc, #288]	; (8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800811e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008122:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800812a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800812e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800813a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800813e:	e021      	b.n	8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800814e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008152:	4b37      	ldr	r3, [pc, #220]	; (8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815a:	ee07 3a90 	vmov	s15, r3
 800815e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008162:	ed97 6a03 	vldr	s12, [r7, #12]
 8008166:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800816a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800816e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800817a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800817e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008182:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008184:	4b2a      	ldr	r3, [pc, #168]	; (8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008188:	0a5b      	lsrs	r3, r3, #9
 800818a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800818e:	ee07 3a90 	vmov	s15, r3
 8008192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800819a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800819e:	edd7 6a07 	vldr	s13, [r7, #28]
 80081a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081aa:	ee17 2a90 	vmov	r2, s15
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80081b2:	4b1f      	ldr	r3, [pc, #124]	; (8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b6:	0c1b      	lsrs	r3, r3, #16
 80081b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081bc:	ee07 3a90 	vmov	s15, r3
 80081c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80081d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081d8:	ee17 2a90 	vmov	r2, s15
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80081e0:	4b13      	ldr	r3, [pc, #76]	; (8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e4:	0e1b      	lsrs	r3, r3, #24
 80081e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ea:	ee07 3a90 	vmov	s15, r3
 80081ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80081fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008206:	ee17 2a90 	vmov	r2, s15
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800820e:	e008      	b.n	8008222 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	609a      	str	r2, [r3, #8]
}
 8008222:	bf00      	nop
 8008224:	3724      	adds	r7, #36	; 0x24
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	58024400 	.word	0x58024400
 8008234:	03d09000 	.word	0x03d09000
 8008238:	46000000 	.word	0x46000000
 800823c:	4c742400 	.word	0x4c742400
 8008240:	4a742400 	.word	0x4a742400
 8008244:	4af42400 	.word	0x4af42400

08008248 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008248:	b480      	push	{r7}
 800824a:	b089      	sub	sp, #36	; 0x24
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008250:	4ba1      	ldr	r3, [pc, #644]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008254:	f003 0303 	and.w	r3, r3, #3
 8008258:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800825a:	4b9f      	ldr	r3, [pc, #636]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800825c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825e:	0d1b      	lsrs	r3, r3, #20
 8008260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008264:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008266:	4b9c      	ldr	r3, [pc, #624]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826a:	0a1b      	lsrs	r3, r3, #8
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008272:	4b99      	ldr	r3, [pc, #612]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008276:	08db      	lsrs	r3, r3, #3
 8008278:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	fb02 f303 	mul.w	r3, r2, r3
 8008282:	ee07 3a90 	vmov	s15, r3
 8008286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 8111 	beq.w	80084b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	2b02      	cmp	r3, #2
 800829a:	f000 8083 	beq.w	80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	f200 80a1 	bhi.w	80083e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d056      	beq.n	8008360 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80082b2:	e099      	b.n	80083e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082b4:	4b88      	ldr	r3, [pc, #544]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0320 	and.w	r3, r3, #32
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d02d      	beq.n	800831c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082c0:	4b85      	ldr	r3, [pc, #532]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	08db      	lsrs	r3, r3, #3
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	4a84      	ldr	r2, [pc, #528]	; (80084dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80082cc:	fa22 f303 	lsr.w	r3, r2, r3
 80082d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	ee07 3a90 	vmov	s15, r3
 80082d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	ee07 3a90 	vmov	s15, r3
 80082e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ea:	4b7b      	ldr	r3, [pc, #492]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80082fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800830a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800830e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008316:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800831a:	e087      	b.n	800842c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	ee07 3a90 	vmov	s15, r3
 8008322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008326:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800832a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800832e:	4b6a      	ldr	r3, [pc, #424]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008336:	ee07 3a90 	vmov	s15, r3
 800833a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800833e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008342:	eddf 5a67 	vldr	s11, [pc, #412]	; 80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800834a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800834e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800835a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800835e:	e065      	b.n	800842c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	ee07 3a90 	vmov	s15, r3
 8008366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800836a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80084e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800836e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008372:	4b59      	ldr	r3, [pc, #356]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800837a:	ee07 3a90 	vmov	s15, r3
 800837e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008382:	ed97 6a03 	vldr	s12, [r7, #12]
 8008386:	eddf 5a56 	vldr	s11, [pc, #344]	; 80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800838a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800838e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800839a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800839e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083a2:	e043      	b.n	800842c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	ee07 3a90 	vmov	s15, r3
 80083aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80083b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083b6:	4b48      	ldr	r3, [pc, #288]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083e6:	e021      	b.n	800842c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	ee07 3a90 	vmov	s15, r3
 80083ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80084e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083fa:	4b37      	ldr	r3, [pc, #220]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008402:	ee07 3a90 	vmov	s15, r3
 8008406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800840a:	ed97 6a03 	vldr	s12, [r7, #12]
 800840e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800841a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800841e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008426:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800842a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800842c:	4b2a      	ldr	r3, [pc, #168]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800842e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008430:	0a5b      	lsrs	r3, r3, #9
 8008432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008442:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008446:	edd7 6a07 	vldr	s13, [r7, #28]
 800844a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800844e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008452:	ee17 2a90 	vmov	r2, s15
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800845a:	4b1f      	ldr	r3, [pc, #124]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	0c1b      	lsrs	r3, r3, #16
 8008460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008464:	ee07 3a90 	vmov	s15, r3
 8008468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008470:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008474:	edd7 6a07 	vldr	s13, [r7, #28]
 8008478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800847c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008480:	ee17 2a90 	vmov	r2, s15
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008488:	4b13      	ldr	r3, [pc, #76]	; (80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800848a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848c:	0e1b      	lsrs	r3, r3, #24
 800848e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008492:	ee07 3a90 	vmov	s15, r3
 8008496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800849e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80084a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ae:	ee17 2a90 	vmov	r2, s15
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80084b6:	e008      	b.n	80084ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	609a      	str	r2, [r3, #8]
}
 80084ca:	bf00      	nop
 80084cc:	3724      	adds	r7, #36	; 0x24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	58024400 	.word	0x58024400
 80084dc:	03d09000 	.word	0x03d09000
 80084e0:	46000000 	.word	0x46000000
 80084e4:	4c742400 	.word	0x4c742400
 80084e8:	4a742400 	.word	0x4a742400
 80084ec:	4af42400 	.word	0x4af42400

080084f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084fe:	4b53      	ldr	r3, [pc, #332]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 8008500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008502:	f003 0303 	and.w	r3, r3, #3
 8008506:	2b03      	cmp	r3, #3
 8008508:	d101      	bne.n	800850e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e099      	b.n	8008642 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800850e:	4b4f      	ldr	r3, [pc, #316]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a4e      	ldr	r2, [pc, #312]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 8008514:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800851a:	f7f9 fd23 	bl	8001f64 <HAL_GetTick>
 800851e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008520:	e008      	b.n	8008534 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008522:	f7f9 fd1f 	bl	8001f64 <HAL_GetTick>
 8008526:	4602      	mov	r2, r0
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	2b02      	cmp	r3, #2
 800852e:	d901      	bls.n	8008534 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008530:	2303      	movs	r3, #3
 8008532:	e086      	b.n	8008642 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008534:	4b45      	ldr	r3, [pc, #276]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1f0      	bne.n	8008522 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008540:	4b42      	ldr	r3, [pc, #264]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 8008542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008544:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	031b      	lsls	r3, r3, #12
 800854e:	493f      	ldr	r1, [pc, #252]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 8008550:	4313      	orrs	r3, r2
 8008552:	628b      	str	r3, [r1, #40]	; 0x28
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	3b01      	subs	r3, #1
 800855a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	3b01      	subs	r3, #1
 8008564:	025b      	lsls	r3, r3, #9
 8008566:	b29b      	uxth	r3, r3
 8008568:	431a      	orrs	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	3b01      	subs	r3, #1
 8008570:	041b      	lsls	r3, r3, #16
 8008572:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008576:	431a      	orrs	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	3b01      	subs	r3, #1
 800857e:	061b      	lsls	r3, r3, #24
 8008580:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008584:	4931      	ldr	r1, [pc, #196]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 8008586:	4313      	orrs	r3, r2
 8008588:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800858a:	4b30      	ldr	r3, [pc, #192]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 800858c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	492d      	ldr	r1, [pc, #180]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 8008598:	4313      	orrs	r3, r2
 800859a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800859c:	4b2b      	ldr	r3, [pc, #172]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 800859e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a0:	f023 0220 	bic.w	r2, r3, #32
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	4928      	ldr	r1, [pc, #160]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80085ae:	4b27      	ldr	r3, [pc, #156]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 80085b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b2:	4a26      	ldr	r2, [pc, #152]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 80085b4:	f023 0310 	bic.w	r3, r3, #16
 80085b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80085ba:	4b24      	ldr	r3, [pc, #144]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 80085bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085be:	4b24      	ldr	r3, [pc, #144]	; (8008650 <RCCEx_PLL2_Config+0x160>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	69d2      	ldr	r2, [r2, #28]
 80085c6:	00d2      	lsls	r2, r2, #3
 80085c8:	4920      	ldr	r1, [pc, #128]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 80085ca:	4313      	orrs	r3, r2
 80085cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80085ce:	4b1f      	ldr	r3, [pc, #124]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 80085d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d2:	4a1e      	ldr	r2, [pc, #120]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 80085d4:	f043 0310 	orr.w	r3, r3, #16
 80085d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d106      	bne.n	80085ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80085e0:	4b1a      	ldr	r3, [pc, #104]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 80085e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e4:	4a19      	ldr	r2, [pc, #100]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 80085e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085ec:	e00f      	b.n	800860e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d106      	bne.n	8008602 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80085f4:	4b15      	ldr	r3, [pc, #84]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 80085f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f8:	4a14      	ldr	r2, [pc, #80]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 80085fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008600:	e005      	b.n	800860e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008602:	4b12      	ldr	r3, [pc, #72]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 8008604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008606:	4a11      	ldr	r2, [pc, #68]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 8008608:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800860c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800860e:	4b0f      	ldr	r3, [pc, #60]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a0e      	ldr	r2, [pc, #56]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 8008614:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800861a:	f7f9 fca3 	bl	8001f64 <HAL_GetTick>
 800861e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008620:	e008      	b.n	8008634 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008622:	f7f9 fc9f 	bl	8001f64 <HAL_GetTick>
 8008626:	4602      	mov	r2, r0
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	2b02      	cmp	r3, #2
 800862e:	d901      	bls.n	8008634 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008630:	2303      	movs	r3, #3
 8008632:	e006      	b.n	8008642 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008634:	4b05      	ldr	r3, [pc, #20]	; (800864c <RCCEx_PLL2_Config+0x15c>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d0f0      	beq.n	8008622 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008640:	7bfb      	ldrb	r3, [r7, #15]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	58024400 	.word	0x58024400
 8008650:	ffff0007 	.word	0xffff0007

08008654 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008662:	4b53      	ldr	r3, [pc, #332]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 8008664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008666:	f003 0303 	and.w	r3, r3, #3
 800866a:	2b03      	cmp	r3, #3
 800866c:	d101      	bne.n	8008672 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e099      	b.n	80087a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008672:	4b4f      	ldr	r3, [pc, #316]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a4e      	ldr	r2, [pc, #312]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 8008678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800867c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800867e:	f7f9 fc71 	bl	8001f64 <HAL_GetTick>
 8008682:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008684:	e008      	b.n	8008698 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008686:	f7f9 fc6d 	bl	8001f64 <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	2b02      	cmp	r3, #2
 8008692:	d901      	bls.n	8008698 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e086      	b.n	80087a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008698:	4b45      	ldr	r3, [pc, #276]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1f0      	bne.n	8008686 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80086a4:	4b42      	ldr	r3, [pc, #264]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 80086a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	051b      	lsls	r3, r3, #20
 80086b2:	493f      	ldr	r1, [pc, #252]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 80086b4:	4313      	orrs	r3, r2
 80086b6:	628b      	str	r3, [r1, #40]	; 0x28
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	3b01      	subs	r3, #1
 80086be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	025b      	lsls	r3, r3, #9
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	431a      	orrs	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	041b      	lsls	r3, r3, #16
 80086d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80086da:	431a      	orrs	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	3b01      	subs	r3, #1
 80086e2:	061b      	lsls	r3, r3, #24
 80086e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80086e8:	4931      	ldr	r1, [pc, #196]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80086ee:	4b30      	ldr	r3, [pc, #192]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 80086f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	492d      	ldr	r1, [pc, #180]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008700:	4b2b      	ldr	r3, [pc, #172]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	4928      	ldr	r1, [pc, #160]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 800870e:	4313      	orrs	r3, r2
 8008710:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008712:	4b27      	ldr	r3, [pc, #156]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 8008714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008716:	4a26      	ldr	r2, [pc, #152]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 8008718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800871c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800871e:	4b24      	ldr	r3, [pc, #144]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 8008720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008722:	4b24      	ldr	r3, [pc, #144]	; (80087b4 <RCCEx_PLL3_Config+0x160>)
 8008724:	4013      	ands	r3, r2
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	69d2      	ldr	r2, [r2, #28]
 800872a:	00d2      	lsls	r2, r2, #3
 800872c:	4920      	ldr	r1, [pc, #128]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 800872e:	4313      	orrs	r3, r2
 8008730:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008732:	4b1f      	ldr	r3, [pc, #124]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 8008734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008736:	4a1e      	ldr	r2, [pc, #120]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 8008738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800873c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d106      	bne.n	8008752 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008744:	4b1a      	ldr	r3, [pc, #104]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	4a19      	ldr	r2, [pc, #100]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 800874a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800874e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008750:	e00f      	b.n	8008772 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d106      	bne.n	8008766 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008758:	4b15      	ldr	r3, [pc, #84]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	4a14      	ldr	r2, [pc, #80]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 800875e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008762:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008764:	e005      	b.n	8008772 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008766:	4b12      	ldr	r3, [pc, #72]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 8008768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876a:	4a11      	ldr	r2, [pc, #68]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 800876c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008770:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008772:	4b0f      	ldr	r3, [pc, #60]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a0e      	ldr	r2, [pc, #56]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 8008778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800877c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800877e:	f7f9 fbf1 	bl	8001f64 <HAL_GetTick>
 8008782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008784:	e008      	b.n	8008798 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008786:	f7f9 fbed 	bl	8001f64 <HAL_GetTick>
 800878a:	4602      	mov	r2, r0
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	2b02      	cmp	r3, #2
 8008792:	d901      	bls.n	8008798 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e006      	b.n	80087a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008798:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <RCCEx_PLL3_Config+0x15c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d0f0      	beq.n	8008786 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	58024400 	.word	0x58024400
 80087b4:	ffff0007 	.word	0xffff0007

080087b8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e054      	b.n	8008874 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	7a5b      	ldrb	r3, [r3, #9]
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d105      	bne.n	80087e0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7f8 fb3e 	bl	8000e5c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2202      	movs	r2, #2
 80087e4:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f023 0120 	bic.w	r1, r3, #32
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685a      	ldr	r2, [r3, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f042 0204 	orr.w	r2, r2, #4
 800880a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008816:	2b40      	cmp	r3, #64	; 0x40
 8008818:	d104      	bne.n	8008824 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2204      	movs	r2, #4
 800881e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e027      	b.n	8008874 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8008824:	f7f9 fb9e 	bl	8001f64 <HAL_GetTick>
 8008828:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800882a:	e015      	b.n	8008858 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800882c:	f7f9 fb9a 	bl	8001f64 <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	2b02      	cmp	r3, #2
 8008838:	d90e      	bls.n	8008858 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b04      	cmp	r3, #4
 8008846:	d107      	bne.n	8008858 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2204      	movs	r2, #4
 800884c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2202      	movs	r2, #2
 8008852:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e00d      	b.n	8008874 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f003 0304 	and.w	r3, r3, #4
 8008862:	2b04      	cmp	r3, #4
 8008864:	d0e2      	beq.n	800882c <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	7a1b      	ldrb	r3, [r3, #8]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d101      	bne.n	8008896 <HAL_RNG_GenerateRandomNumber+0x1a>
 8008892:	2302      	movs	r3, #2
 8008894:	e044      	b.n	8008920 <HAL_RNG_GenerateRandomNumber+0xa4>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	7a5b      	ldrb	r3, [r3, #9]
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d133      	bne.n	800890e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2202      	movs	r2, #2
 80088aa:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 80088ac:	f7f9 fb5a 	bl	8001f64 <HAL_GetTick>
 80088b0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80088b2:	e018      	b.n	80088e6 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80088b4:	f7f9 fb56 	bl	8001f64 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d911      	bls.n	80088e6 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d00a      	beq.n	80088e6 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2202      	movs	r2, #2
 80088da:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e01c      	b.n	8008920 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f003 0301 	and.w	r3, r3, #1
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d1df      	bne.n	80088b4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689a      	ldr	r2, [r3, #8]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	691a      	ldr	r2, [r3, #16]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	725a      	strb	r2, [r3, #9]
 800890c:	e004      	b.n	8008918 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2204      	movs	r2, #4
 8008912:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	721a      	strb	r2, [r3, #8]

  return status;
 800891e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e049      	b.n	80089ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d106      	bne.n	8008954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f841 	bl	80089d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2202      	movs	r2, #2
 8008958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3304      	adds	r3, #4
 8008964:	4619      	mov	r1, r3
 8008966:	4610      	mov	r0, r2
 8008968:	f000 fa00 	bl	8008d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80089de:	bf00      	nop
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
	...

080089ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d001      	beq.n	8008a04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e054      	b.n	8008aae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0201 	orr.w	r2, r2, #1
 8008a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a26      	ldr	r2, [pc, #152]	; (8008abc <HAL_TIM_Base_Start_IT+0xd0>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d022      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a2e:	d01d      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a22      	ldr	r2, [pc, #136]	; (8008ac0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d018      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a21      	ldr	r2, [pc, #132]	; (8008ac4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d013      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a1f      	ldr	r2, [pc, #124]	; (8008ac8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d00e      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a1e      	ldr	r2, [pc, #120]	; (8008acc <HAL_TIM_Base_Start_IT+0xe0>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d009      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a1c      	ldr	r2, [pc, #112]	; (8008ad0 <HAL_TIM_Base_Start_IT+0xe4>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d004      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x80>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a1b      	ldr	r2, [pc, #108]	; (8008ad4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d115      	bne.n	8008a98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689a      	ldr	r2, [r3, #8]
 8008a72:	4b19      	ldr	r3, [pc, #100]	; (8008ad8 <HAL_TIM_Base_Start_IT+0xec>)
 8008a74:	4013      	ands	r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b06      	cmp	r3, #6
 8008a7c:	d015      	beq.n	8008aaa <HAL_TIM_Base_Start_IT+0xbe>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a84:	d011      	beq.n	8008aaa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f042 0201 	orr.w	r2, r2, #1
 8008a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a96:	e008      	b.n	8008aaa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f042 0201 	orr.w	r2, r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	e000      	b.n	8008aac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	40010000 	.word	0x40010000
 8008ac0:	40000400 	.word	0x40000400
 8008ac4:	40000800 	.word	0x40000800
 8008ac8:	40000c00 	.word	0x40000c00
 8008acc:	40010400 	.word	0x40010400
 8008ad0:	40001800 	.word	0x40001800
 8008ad4:	40014000 	.word	0x40014000
 8008ad8:	00010007 	.word	0x00010007

08008adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	f003 0302 	and.w	r3, r3, #2
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d122      	bne.n	8008b38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d11b      	bne.n	8008b38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f06f 0202 	mvn.w	r2, #2
 8008b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f905 	bl	8008d2e <HAL_TIM_IC_CaptureCallback>
 8008b24:	e005      	b.n	8008b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f8f7 	bl	8008d1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f908 	bl	8008d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	f003 0304 	and.w	r3, r3, #4
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	d122      	bne.n	8008b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f003 0304 	and.w	r3, r3, #4
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	d11b      	bne.n	8008b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f06f 0204 	mvn.w	r2, #4
 8008b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2202      	movs	r2, #2
 8008b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f8db 	bl	8008d2e <HAL_TIM_IC_CaptureCallback>
 8008b78:	e005      	b.n	8008b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f8cd 	bl	8008d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f8de 	bl	8008d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	f003 0308 	and.w	r3, r3, #8
 8008b96:	2b08      	cmp	r3, #8
 8008b98:	d122      	bne.n	8008be0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	f003 0308 	and.w	r3, r3, #8
 8008ba4:	2b08      	cmp	r3, #8
 8008ba6:	d11b      	bne.n	8008be0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f06f 0208 	mvn.w	r2, #8
 8008bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2204      	movs	r2, #4
 8008bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	f003 0303 	and.w	r3, r3, #3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d003      	beq.n	8008bce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f8b1 	bl	8008d2e <HAL_TIM_IC_CaptureCallback>
 8008bcc:	e005      	b.n	8008bda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f8a3 	bl	8008d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f8b4 	bl	8008d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	f003 0310 	and.w	r3, r3, #16
 8008bea:	2b10      	cmp	r3, #16
 8008bec:	d122      	bne.n	8008c34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	f003 0310 	and.w	r3, r3, #16
 8008bf8:	2b10      	cmp	r3, #16
 8008bfa:	d11b      	bne.n	8008c34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f06f 0210 	mvn.w	r2, #16
 8008c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2208      	movs	r2, #8
 8008c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f887 	bl	8008d2e <HAL_TIM_IC_CaptureCallback>
 8008c20:	e005      	b.n	8008c2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f879 	bl	8008d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f88a 	bl	8008d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d10e      	bne.n	8008c60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	f003 0301 	and.w	r3, r3, #1
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d107      	bne.n	8008c60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f06f 0201 	mvn.w	r2, #1
 8008c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7f8 f8d0 	bl	8000e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c6a:	2b80      	cmp	r3, #128	; 0x80
 8008c6c:	d10e      	bne.n	8008c8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c78:	2b80      	cmp	r3, #128	; 0x80
 8008c7a:	d107      	bne.n	8008c8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f914 	bl	8008eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c9a:	d10e      	bne.n	8008cba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca6:	2b80      	cmp	r3, #128	; 0x80
 8008ca8:	d107      	bne.n	8008cba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f907 	bl	8008ec8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc4:	2b40      	cmp	r3, #64	; 0x40
 8008cc6:	d10e      	bne.n	8008ce6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd2:	2b40      	cmp	r3, #64	; 0x40
 8008cd4:	d107      	bne.n	8008ce6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f838 	bl	8008d56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	f003 0320 	and.w	r3, r3, #32
 8008cf0:	2b20      	cmp	r3, #32
 8008cf2:	d10e      	bne.n	8008d12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b20      	cmp	r3, #32
 8008d00:	d107      	bne.n	8008d12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f06f 0220 	mvn.w	r2, #32
 8008d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f8c7 	bl	8008ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d12:	bf00      	nop
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b083      	sub	sp, #12
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d22:	bf00      	nop
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d36:	bf00      	nop
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b083      	sub	sp, #12
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d4a:	bf00      	nop
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b083      	sub	sp, #12
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d5e:	bf00      	nop
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
	...

08008d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a40      	ldr	r2, [pc, #256]	; (8008e80 <TIM_Base_SetConfig+0x114>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d013      	beq.n	8008dac <TIM_Base_SetConfig+0x40>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d8a:	d00f      	beq.n	8008dac <TIM_Base_SetConfig+0x40>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a3d      	ldr	r2, [pc, #244]	; (8008e84 <TIM_Base_SetConfig+0x118>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d00b      	beq.n	8008dac <TIM_Base_SetConfig+0x40>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a3c      	ldr	r2, [pc, #240]	; (8008e88 <TIM_Base_SetConfig+0x11c>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d007      	beq.n	8008dac <TIM_Base_SetConfig+0x40>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a3b      	ldr	r2, [pc, #236]	; (8008e8c <TIM_Base_SetConfig+0x120>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d003      	beq.n	8008dac <TIM_Base_SetConfig+0x40>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a3a      	ldr	r2, [pc, #232]	; (8008e90 <TIM_Base_SetConfig+0x124>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d108      	bne.n	8008dbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a2f      	ldr	r2, [pc, #188]	; (8008e80 <TIM_Base_SetConfig+0x114>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d01f      	beq.n	8008e06 <TIM_Base_SetConfig+0x9a>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dcc:	d01b      	beq.n	8008e06 <TIM_Base_SetConfig+0x9a>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a2c      	ldr	r2, [pc, #176]	; (8008e84 <TIM_Base_SetConfig+0x118>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d017      	beq.n	8008e06 <TIM_Base_SetConfig+0x9a>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a2b      	ldr	r2, [pc, #172]	; (8008e88 <TIM_Base_SetConfig+0x11c>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d013      	beq.n	8008e06 <TIM_Base_SetConfig+0x9a>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a2a      	ldr	r2, [pc, #168]	; (8008e8c <TIM_Base_SetConfig+0x120>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d00f      	beq.n	8008e06 <TIM_Base_SetConfig+0x9a>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a29      	ldr	r2, [pc, #164]	; (8008e90 <TIM_Base_SetConfig+0x124>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d00b      	beq.n	8008e06 <TIM_Base_SetConfig+0x9a>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a28      	ldr	r2, [pc, #160]	; (8008e94 <TIM_Base_SetConfig+0x128>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d007      	beq.n	8008e06 <TIM_Base_SetConfig+0x9a>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a27      	ldr	r2, [pc, #156]	; (8008e98 <TIM_Base_SetConfig+0x12c>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d003      	beq.n	8008e06 <TIM_Base_SetConfig+0x9a>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a26      	ldr	r2, [pc, #152]	; (8008e9c <TIM_Base_SetConfig+0x130>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d108      	bne.n	8008e18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	689a      	ldr	r2, [r3, #8]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a10      	ldr	r2, [pc, #64]	; (8008e80 <TIM_Base_SetConfig+0x114>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d00f      	beq.n	8008e64 <TIM_Base_SetConfig+0xf8>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a12      	ldr	r2, [pc, #72]	; (8008e90 <TIM_Base_SetConfig+0x124>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d00b      	beq.n	8008e64 <TIM_Base_SetConfig+0xf8>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a11      	ldr	r2, [pc, #68]	; (8008e94 <TIM_Base_SetConfig+0x128>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d007      	beq.n	8008e64 <TIM_Base_SetConfig+0xf8>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a10      	ldr	r2, [pc, #64]	; (8008e98 <TIM_Base_SetConfig+0x12c>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d003      	beq.n	8008e64 <TIM_Base_SetConfig+0xf8>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a0f      	ldr	r2, [pc, #60]	; (8008e9c <TIM_Base_SetConfig+0x130>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d103      	bne.n	8008e6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	691a      	ldr	r2, [r3, #16]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	615a      	str	r2, [r3, #20]
}
 8008e72:	bf00      	nop
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	40010000 	.word	0x40010000
 8008e84:	40000400 	.word	0x40000400
 8008e88:	40000800 	.word	0x40000800
 8008e8c:	40000c00 	.word	0x40000c00
 8008e90:	40010400 	.word	0x40010400
 8008e94:	40014000 	.word	0x40014000
 8008e98:	40014400 	.word	0x40014400
 8008e9c:	40014800 	.word	0x40014800

08008ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e042      	b.n	8008f74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d106      	bne.n	8008f06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7f8 fa51 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2224      	movs	r2, #36	; 0x24
 8008f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 0201 	bic.w	r2, r2, #1
 8008f1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fd84 	bl	8009a2c <UART_SetConfig>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d101      	bne.n	8008f2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e022      	b.n	8008f74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d002      	beq.n	8008f3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f001 fae0 	bl	800a4fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	689a      	ldr	r2, [r3, #8]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f042 0201 	orr.w	r2, r2, #1
 8008f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 fb67 	bl	800a640 <UART_CheckIdleState>
 8008f72:	4603      	mov	r3, r0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08a      	sub	sp, #40	; 0x28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	4613      	mov	r3, r2
 8008f88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f90:	2b20      	cmp	r3, #32
 8008f92:	d17a      	bne.n	800908a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d002      	beq.n	8008fa0 <HAL_UART_Transmit_DMA+0x24>
 8008f9a:	88fb      	ldrh	r3, [r7, #6]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d101      	bne.n	8008fa4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e073      	b.n	800908c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d101      	bne.n	8008fb2 <HAL_UART_Transmit_DMA+0x36>
 8008fae:	2302      	movs	r3, #2
 8008fb0:	e06c      	b.n	800908c <HAL_UART_Transmit_DMA+0x110>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	88fa      	ldrh	r2, [r7, #6]
 8008fc4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	88fa      	ldrh	r2, [r7, #6]
 8008fcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2221      	movs	r2, #33	; 0x21
 8008fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d02c      	beq.n	8009042 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fec:	4a29      	ldr	r2, [pc, #164]	; (8009094 <HAL_UART_Transmit_DMA+0x118>)
 8008fee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ff4:	4a28      	ldr	r2, [pc, #160]	; (8009098 <HAL_UART_Transmit_DMA+0x11c>)
 8008ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ffc:	4a27      	ldr	r2, [pc, #156]	; (800909c <HAL_UART_Transmit_DMA+0x120>)
 8008ffe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009004:	2200      	movs	r2, #0
 8009006:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009010:	4619      	mov	r1, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3328      	adds	r3, #40	; 0x28
 8009018:	461a      	mov	r2, r3
 800901a:	88fb      	ldrh	r3, [r7, #6]
 800901c:	f7f9 fcaa 	bl	8002974 <HAL_DMA_Start_IT>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00d      	beq.n	8009042 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2210      	movs	r2, #16
 800902a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2220      	movs	r2, #32
 800903a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e024      	b.n	800908c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2240      	movs	r2, #64	; 0x40
 8009048:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3308      	adds	r3, #8
 8009058:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	e853 3f00 	ldrex	r3, [r3]
 8009060:	613b      	str	r3, [r7, #16]
   return(result);
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009068:	627b      	str	r3, [r7, #36]	; 0x24
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3308      	adds	r3, #8
 8009070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009072:	623a      	str	r2, [r7, #32]
 8009074:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009076:	69f9      	ldr	r1, [r7, #28]
 8009078:	6a3a      	ldr	r2, [r7, #32]
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e5      	bne.n	8009052 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	e000      	b.n	800908c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800908a:	2302      	movs	r3, #2
  }
}
 800908c:	4618      	mov	r0, r3
 800908e:	3728      	adds	r7, #40	; 0x28
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	0800ab09 	.word	0x0800ab09
 8009098:	0800ab9f 	.word	0x0800ab9f
 800909c:	0800ad15 	.word	0x0800ad15

080090a0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b08a      	sub	sp, #40	; 0x28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	4613      	mov	r3, r2
 80090ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090b4:	2b20      	cmp	r3, #32
 80090b6:	d142      	bne.n	800913e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <HAL_UART_Receive_DMA+0x24>
 80090be:	88fb      	ldrh	r3, [r7, #6]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e03b      	b.n	8009140 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d101      	bne.n	80090d6 <HAL_UART_Receive_DMA+0x36>
 80090d2:	2302      	movs	r3, #2
 80090d4:	e034      	b.n	8009140 <HAL_UART_Receive_DMA+0xa0>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a17      	ldr	r2, [pc, #92]	; (8009148 <HAL_UART_Receive_DMA+0xa8>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d01f      	beq.n	800912e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d018      	beq.n	800912e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	e853 3f00 	ldrex	r3, [r3]
 8009108:	613b      	str	r3, [r7, #16]
   return(result);
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009110:	627b      	str	r3, [r7, #36]	; 0x24
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	623b      	str	r3, [r7, #32]
 800911c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911e:	69f9      	ldr	r1, [r7, #28]
 8009120:	6a3a      	ldr	r2, [r7, #32]
 8009122:	e841 2300 	strex	r3, r2, [r1]
 8009126:	61bb      	str	r3, [r7, #24]
   return(result);
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1e6      	bne.n	80090fc <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	461a      	mov	r2, r3
 8009132:	68b9      	ldr	r1, [r7, #8]
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f001 fb97 	bl	800a868 <UART_Start_Receive_DMA>
 800913a:	4603      	mov	r3, r0
 800913c:	e000      	b.n	8009140 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800913e:	2302      	movs	r3, #2
  }
}
 8009140:	4618      	mov	r0, r3
 8009142:	3728      	adds	r7, #40	; 0x28
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	58000c00 	.word	0x58000c00

0800914c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b090      	sub	sp, #64	; 0x40
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800915a:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009162:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800916e:	2b80      	cmp	r3, #128	; 0x80
 8009170:	d139      	bne.n	80091e6 <HAL_UART_DMAStop+0x9a>
 8009172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009174:	2b21      	cmp	r3, #33	; 0x21
 8009176:	d136      	bne.n	80091e6 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3308      	adds	r3, #8
 800917e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	e853 3f00 	ldrex	r3, [r3]
 8009186:	61fb      	str	r3, [r7, #28]
   return(result);
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800918e:	637b      	str	r3, [r7, #52]	; 0x34
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3308      	adds	r3, #8
 8009196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009198:	62fa      	str	r2, [r7, #44]	; 0x2c
 800919a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800919e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091a0:	e841 2300 	strex	r3, r2, [r1]
 80091a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1e5      	bne.n	8009178 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d015      	beq.n	80091e0 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7f9 fe45 	bl	8002e48 <HAL_DMA_Abort>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00d      	beq.n	80091e0 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fb facb 	bl	8004764 <HAL_DMA_GetError>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b20      	cmp	r3, #32
 80091d2:	d105      	bne.n	80091e0 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2210      	movs	r2, #16
 80091d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e044      	b.n	800926a <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f001 fbe9 	bl	800a9b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f0:	2b40      	cmp	r3, #64	; 0x40
 80091f2:	d139      	bne.n	8009268 <HAL_UART_DMAStop+0x11c>
 80091f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f6:	2b22      	cmp	r3, #34	; 0x22
 80091f8:	d136      	bne.n	8009268 <HAL_UART_DMAStop+0x11c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	3308      	adds	r3, #8
 8009200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	e853 3f00 	ldrex	r3, [r3]
 8009208:	60bb      	str	r3, [r7, #8]
   return(result);
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009210:	633b      	str	r3, [r7, #48]	; 0x30
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3308      	adds	r3, #8
 8009218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800921a:	61ba      	str	r2, [r7, #24]
 800921c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921e:	6979      	ldr	r1, [r7, #20]
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	e841 2300 	strex	r3, r2, [r1]
 8009226:	613b      	str	r3, [r7, #16]
   return(result);
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1e5      	bne.n	80091fa <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009232:	2b00      	cmp	r3, #0
 8009234:	d015      	beq.n	8009262 <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800923a:	4618      	mov	r0, r3
 800923c:	f7f9 fe04 	bl	8002e48 <HAL_DMA_Abort>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00d      	beq.n	8009262 <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800924a:	4618      	mov	r0, r3
 800924c:	f7fb fa8a 	bl	8004764 <HAL_DMA_GetError>
 8009250:	4603      	mov	r3, r0
 8009252:	2b20      	cmp	r3, #32
 8009254:	d105      	bne.n	8009262 <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2210      	movs	r2, #16
 800925a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800925e:	2303      	movs	r3, #3
 8009260:	e003      	b.n	800926a <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f001 fbea 	bl	800aa3c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3740      	adds	r7, #64	; 0x40
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
	...

08009274 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b0ba      	sub	sp, #232	; 0xe8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	69db      	ldr	r3, [r3, #28]
 8009282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800929a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800929e:	f640 030f 	movw	r3, #2063	; 0x80f
 80092a2:	4013      	ands	r3, r2
 80092a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80092a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d11b      	bne.n	80092e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b4:	f003 0320 	and.w	r3, r3, #32
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d015      	beq.n	80092e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092c0:	f003 0320 	and.w	r3, r3, #32
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d105      	bne.n	80092d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d009      	beq.n	80092e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 835a 	beq.w	8009992 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	4798      	blx	r3
      }
      return;
 80092e6:	e354      	b.n	8009992 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80092e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 811f 	beq.w	8009530 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80092f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80092f6:	4b8b      	ldr	r3, [pc, #556]	; (8009524 <HAL_UART_IRQHandler+0x2b0>)
 80092f8:	4013      	ands	r3, r2
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d106      	bne.n	800930c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80092fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009302:	4b89      	ldr	r3, [pc, #548]	; (8009528 <HAL_UART_IRQHandler+0x2b4>)
 8009304:	4013      	ands	r3, r2
 8009306:	2b00      	cmp	r3, #0
 8009308:	f000 8112 	beq.w	8009530 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800930c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009310:	f003 0301 	and.w	r3, r3, #1
 8009314:	2b00      	cmp	r3, #0
 8009316:	d011      	beq.n	800933c <HAL_UART_IRQHandler+0xc8>
 8009318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800931c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00b      	beq.n	800933c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2201      	movs	r2, #1
 800932a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009332:	f043 0201 	orr.w	r2, r3, #1
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800933c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b00      	cmp	r3, #0
 8009346:	d011      	beq.n	800936c <HAL_UART_IRQHandler+0xf8>
 8009348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800934c:	f003 0301 	and.w	r3, r3, #1
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00b      	beq.n	800936c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2202      	movs	r2, #2
 800935a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009362:	f043 0204 	orr.w	r2, r3, #4
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800936c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009370:	f003 0304 	and.w	r3, r3, #4
 8009374:	2b00      	cmp	r3, #0
 8009376:	d011      	beq.n	800939c <HAL_UART_IRQHandler+0x128>
 8009378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00b      	beq.n	800939c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2204      	movs	r2, #4
 800938a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009392:	f043 0202 	orr.w	r2, r3, #2
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800939c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093a0:	f003 0308 	and.w	r3, r3, #8
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d017      	beq.n	80093d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80093a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093ac:	f003 0320 	and.w	r3, r3, #32
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d105      	bne.n	80093c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80093b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80093b8:	4b5a      	ldr	r3, [pc, #360]	; (8009524 <HAL_UART_IRQHandler+0x2b0>)
 80093ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00b      	beq.n	80093d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2208      	movs	r2, #8
 80093c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093ce:	f043 0208 	orr.w	r2, r3, #8
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80093d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d012      	beq.n	800940a <HAL_UART_IRQHandler+0x196>
 80093e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00c      	beq.n	800940a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009400:	f043 0220 	orr.w	r2, r3, #32
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 82c0 	beq.w	8009996 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800941a:	f003 0320 	and.w	r3, r3, #32
 800941e:	2b00      	cmp	r3, #0
 8009420:	d013      	beq.n	800944a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009426:	f003 0320 	and.w	r3, r3, #32
 800942a:	2b00      	cmp	r3, #0
 800942c:	d105      	bne.n	800943a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800942e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d007      	beq.n	800944a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800943e:	2b00      	cmp	r3, #0
 8009440:	d003      	beq.n	800944a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009450:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800945e:	2b40      	cmp	r3, #64	; 0x40
 8009460:	d005      	beq.n	800946e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009466:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800946a:	2b00      	cmp	r3, #0
 800946c:	d04f      	beq.n	800950e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f001 fae4 	bl	800aa3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800947e:	2b40      	cmp	r3, #64	; 0x40
 8009480:	d141      	bne.n	8009506 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3308      	adds	r3, #8
 8009488:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800949c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3308      	adds	r3, #8
 80094aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80094ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80094b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80094ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80094be:	e841 2300 	strex	r3, r2, [r1]
 80094c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80094c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1d9      	bne.n	8009482 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d013      	beq.n	80094fe <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094da:	4a14      	ldr	r2, [pc, #80]	; (800952c <HAL_UART_IRQHandler+0x2b8>)
 80094dc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7f9 ffce 	bl	8003484 <HAL_DMA_Abort_IT>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d017      	beq.n	800951e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80094f8:	4610      	mov	r0, r2
 80094fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094fc:	e00f      	b.n	800951e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fa7e 	bl	8009a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009504:	e00b      	b.n	800951e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fa7a 	bl	8009a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800950c:	e007      	b.n	800951e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fa76 	bl	8009a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800951c:	e23b      	b.n	8009996 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800951e:	bf00      	nop
    return;
 8009520:	e239      	b.n	8009996 <HAL_UART_IRQHandler+0x722>
 8009522:	bf00      	nop
 8009524:	10000001 	.word	0x10000001
 8009528:	04000120 	.word	0x04000120
 800952c:	0800ad95 	.word	0x0800ad95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009534:	2b01      	cmp	r3, #1
 8009536:	f040 81ce 	bne.w	80098d6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800953a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800953e:	f003 0310 	and.w	r3, r3, #16
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 81c7 	beq.w	80098d6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800954c:	f003 0310 	and.w	r3, r3, #16
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 81c0 	beq.w	80098d6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2210      	movs	r2, #16
 800955c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009568:	2b40      	cmp	r3, #64	; 0x40
 800956a:	f040 813b 	bne.w	80097e4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a8b      	ldr	r2, [pc, #556]	; (80097a4 <HAL_UART_IRQHandler+0x530>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d059      	beq.n	800962e <HAL_UART_IRQHandler+0x3ba>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a89      	ldr	r2, [pc, #548]	; (80097a8 <HAL_UART_IRQHandler+0x534>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d053      	beq.n	800962e <HAL_UART_IRQHandler+0x3ba>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a87      	ldr	r2, [pc, #540]	; (80097ac <HAL_UART_IRQHandler+0x538>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d04d      	beq.n	800962e <HAL_UART_IRQHandler+0x3ba>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a85      	ldr	r2, [pc, #532]	; (80097b0 <HAL_UART_IRQHandler+0x53c>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d047      	beq.n	800962e <HAL_UART_IRQHandler+0x3ba>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a83      	ldr	r2, [pc, #524]	; (80097b4 <HAL_UART_IRQHandler+0x540>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d041      	beq.n	800962e <HAL_UART_IRQHandler+0x3ba>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a81      	ldr	r2, [pc, #516]	; (80097b8 <HAL_UART_IRQHandler+0x544>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d03b      	beq.n	800962e <HAL_UART_IRQHandler+0x3ba>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a7f      	ldr	r2, [pc, #508]	; (80097bc <HAL_UART_IRQHandler+0x548>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d035      	beq.n	800962e <HAL_UART_IRQHandler+0x3ba>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a7d      	ldr	r2, [pc, #500]	; (80097c0 <HAL_UART_IRQHandler+0x54c>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d02f      	beq.n	800962e <HAL_UART_IRQHandler+0x3ba>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a7b      	ldr	r2, [pc, #492]	; (80097c4 <HAL_UART_IRQHandler+0x550>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d029      	beq.n	800962e <HAL_UART_IRQHandler+0x3ba>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a79      	ldr	r2, [pc, #484]	; (80097c8 <HAL_UART_IRQHandler+0x554>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d023      	beq.n	800962e <HAL_UART_IRQHandler+0x3ba>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a77      	ldr	r2, [pc, #476]	; (80097cc <HAL_UART_IRQHandler+0x558>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d01d      	beq.n	800962e <HAL_UART_IRQHandler+0x3ba>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a75      	ldr	r2, [pc, #468]	; (80097d0 <HAL_UART_IRQHandler+0x55c>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d017      	beq.n	800962e <HAL_UART_IRQHandler+0x3ba>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a73      	ldr	r2, [pc, #460]	; (80097d4 <HAL_UART_IRQHandler+0x560>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d011      	beq.n	800962e <HAL_UART_IRQHandler+0x3ba>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a71      	ldr	r2, [pc, #452]	; (80097d8 <HAL_UART_IRQHandler+0x564>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d00b      	beq.n	800962e <HAL_UART_IRQHandler+0x3ba>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a6f      	ldr	r2, [pc, #444]	; (80097dc <HAL_UART_IRQHandler+0x568>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d005      	beq.n	800962e <HAL_UART_IRQHandler+0x3ba>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a6d      	ldr	r2, [pc, #436]	; (80097e0 <HAL_UART_IRQHandler+0x56c>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d105      	bne.n	800963a <HAL_UART_IRQHandler+0x3c6>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	b29b      	uxth	r3, r3
 8009638:	e004      	b.n	8009644 <HAL_UART_IRQHandler+0x3d0>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	b29b      	uxth	r3, r3
 8009644:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009648:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 81a4 	beq.w	800999a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009658:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800965c:	429a      	cmp	r2, r3
 800965e:	f080 819c 	bcs.w	800999a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009668:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009676:	f000 8086 	beq.w	8009786 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009682:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009686:	e853 3f00 	ldrex	r3, [r3]
 800968a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800968e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009692:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009696:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80096a8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80096b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80096b4:	e841 2300 	strex	r3, r2, [r1]
 80096b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80096bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1da      	bne.n	800967a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	3308      	adds	r3, #8
 80096ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096ce:	e853 3f00 	ldrex	r3, [r3]
 80096d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80096d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096d6:	f023 0301 	bic.w	r3, r3, #1
 80096da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3308      	adds	r3, #8
 80096e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80096e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80096ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80096f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80096f4:	e841 2300 	strex	r3, r2, [r1]
 80096f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80096fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1e1      	bne.n	80096c4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	3308      	adds	r3, #8
 8009706:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009708:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800970a:	e853 3f00 	ldrex	r3, [r3]
 800970e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3308      	adds	r3, #8
 8009720:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009724:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009726:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009728:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800972a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800972c:	e841 2300 	strex	r3, r2, [r1]
 8009730:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009732:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1e3      	bne.n	8009700 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2220      	movs	r2, #32
 800973c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800974e:	e853 3f00 	ldrex	r3, [r3]
 8009752:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009756:	f023 0310 	bic.w	r3, r3, #16
 800975a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009768:	65bb      	str	r3, [r7, #88]	; 0x58
 800976a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800976e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009770:	e841 2300 	strex	r3, r2, [r1]
 8009774:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1e4      	bne.n	8009746 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009780:	4618      	mov	r0, r3
 8009782:	f7f9 fb61 	bl	8002e48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009792:	b29b      	uxth	r3, r3
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	b29b      	uxth	r3, r3
 8009798:	4619      	mov	r1, r3
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f93a 	bl	8009a14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097a0:	e0fb      	b.n	800999a <HAL_UART_IRQHandler+0x726>
 80097a2:	bf00      	nop
 80097a4:	40020010 	.word	0x40020010
 80097a8:	40020028 	.word	0x40020028
 80097ac:	40020040 	.word	0x40020040
 80097b0:	40020058 	.word	0x40020058
 80097b4:	40020070 	.word	0x40020070
 80097b8:	40020088 	.word	0x40020088
 80097bc:	400200a0 	.word	0x400200a0
 80097c0:	400200b8 	.word	0x400200b8
 80097c4:	40020410 	.word	0x40020410
 80097c8:	40020428 	.word	0x40020428
 80097cc:	40020440 	.word	0x40020440
 80097d0:	40020458 	.word	0x40020458
 80097d4:	40020470 	.word	0x40020470
 80097d8:	40020488 	.word	0x40020488
 80097dc:	400204a0 	.word	0x400204a0
 80097e0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097fe:	b29b      	uxth	r3, r3
 8009800:	2b00      	cmp	r3, #0
 8009802:	f000 80cc 	beq.w	800999e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009806:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 80c7 	beq.w	800999e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009818:	e853 3f00 	ldrex	r3, [r3]
 800981c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800981e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009820:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009824:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	461a      	mov	r2, r3
 800982e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009832:	647b      	str	r3, [r7, #68]	; 0x44
 8009834:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009836:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800983a:	e841 2300 	strex	r3, r2, [r1]
 800983e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1e4      	bne.n	8009810 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	3308      	adds	r3, #8
 800984c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	623b      	str	r3, [r7, #32]
   return(result);
 8009856:	6a3a      	ldr	r2, [r7, #32]
 8009858:	4b54      	ldr	r3, [pc, #336]	; (80099ac <HAL_UART_IRQHandler+0x738>)
 800985a:	4013      	ands	r3, r2
 800985c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3308      	adds	r3, #8
 8009866:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800986a:	633a      	str	r2, [r7, #48]	; 0x30
 800986c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009872:	e841 2300 	strex	r3, r2, [r1]
 8009876:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1e3      	bne.n	8009846 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2220      	movs	r2, #32
 8009882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	e853 3f00 	ldrex	r3, [r3]
 800989e:	60fb      	str	r3, [r7, #12]
   return(result);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f023 0310 	bic.w	r3, r3, #16
 80098a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	461a      	mov	r2, r3
 80098b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80098b4:	61fb      	str	r3, [r7, #28]
 80098b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b8:	69b9      	ldr	r1, [r7, #24]
 80098ba:	69fa      	ldr	r2, [r7, #28]
 80098bc:	e841 2300 	strex	r3, r2, [r1]
 80098c0:	617b      	str	r3, [r7, #20]
   return(result);
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1e4      	bne.n	8009892 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f8a0 	bl	8009a14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098d4:	e063      	b.n	800999e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80098d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00e      	beq.n	8009900 <HAL_UART_IRQHandler+0x68c>
 80098e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d008      	beq.n	8009900 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80098f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f001 fa8c 	bl	800ae16 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098fe:	e051      	b.n	80099a4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009908:	2b00      	cmp	r3, #0
 800990a:	d014      	beq.n	8009936 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800990c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009914:	2b00      	cmp	r3, #0
 8009916:	d105      	bne.n	8009924 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800991c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d008      	beq.n	8009936 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009928:	2b00      	cmp	r3, #0
 800992a:	d03a      	beq.n	80099a2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	4798      	blx	r3
    }
    return;
 8009934:	e035      	b.n	80099a2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800993a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800993e:	2b00      	cmp	r3, #0
 8009940:	d009      	beq.n	8009956 <HAL_UART_IRQHandler+0x6e2>
 8009942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800994a:	2b00      	cmp	r3, #0
 800994c:	d003      	beq.n	8009956 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f001 fa36 	bl	800adc0 <UART_EndTransmit_IT>
    return;
 8009954:	e026      	b.n	80099a4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800995a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800995e:	2b00      	cmp	r3, #0
 8009960:	d009      	beq.n	8009976 <HAL_UART_IRQHandler+0x702>
 8009962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009966:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800996a:	2b00      	cmp	r3, #0
 800996c:	d003      	beq.n	8009976 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f001 fa65 	bl	800ae3e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009974:	e016      	b.n	80099a4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800997a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d010      	beq.n	80099a4 <HAL_UART_IRQHandler+0x730>
 8009982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009986:	2b00      	cmp	r3, #0
 8009988:	da0c      	bge.n	80099a4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f001 fa4d 	bl	800ae2a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009990:	e008      	b.n	80099a4 <HAL_UART_IRQHandler+0x730>
      return;
 8009992:	bf00      	nop
 8009994:	e006      	b.n	80099a4 <HAL_UART_IRQHandler+0x730>
    return;
 8009996:	bf00      	nop
 8009998:	e004      	b.n	80099a4 <HAL_UART_IRQHandler+0x730>
      return;
 800999a:	bf00      	nop
 800999c:	e002      	b.n	80099a4 <HAL_UART_IRQHandler+0x730>
      return;
 800999e:	bf00      	nop
 80099a0:	e000      	b.n	80099a4 <HAL_UART_IRQHandler+0x730>
    return;
 80099a2:	bf00      	nop
  }
}
 80099a4:	37e8      	adds	r7, #232	; 0xe8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	effffffe 	.word	0xeffffffe

080099b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a30:	b092      	sub	sp, #72	; 0x48
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	689a      	ldr	r2, [r3, #8]
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	431a      	orrs	r2, r3
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	69db      	ldr	r3, [r3, #28]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	4bbe      	ldr	r3, [pc, #760]	; (8009d54 <UART_SetConfig+0x328>)
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	6812      	ldr	r2, [r2, #0]
 8009a62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a64:	430b      	orrs	r3, r1
 8009a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	68da      	ldr	r2, [r3, #12]
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4ab3      	ldr	r2, [pc, #716]	; (8009d58 <UART_SetConfig+0x32c>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d004      	beq.n	8009a98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a94:	4313      	orrs	r3, r2
 8009a96:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689a      	ldr	r2, [r3, #8]
 8009a9e:	4baf      	ldr	r3, [pc, #700]	; (8009d5c <UART_SetConfig+0x330>)
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	6812      	ldr	r2, [r2, #0]
 8009aa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009aa8:	430b      	orrs	r3, r1
 8009aaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab2:	f023 010f 	bic.w	r1, r3, #15
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	430a      	orrs	r2, r1
 8009ac0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4aa6      	ldr	r2, [pc, #664]	; (8009d60 <UART_SetConfig+0x334>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d177      	bne.n	8009bbc <UART_SetConfig+0x190>
 8009acc:	4ba5      	ldr	r3, [pc, #660]	; (8009d64 <UART_SetConfig+0x338>)
 8009ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ad0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ad4:	2b28      	cmp	r3, #40	; 0x28
 8009ad6:	d86d      	bhi.n	8009bb4 <UART_SetConfig+0x188>
 8009ad8:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <UART_SetConfig+0xb4>)
 8009ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ade:	bf00      	nop
 8009ae0:	08009b85 	.word	0x08009b85
 8009ae4:	08009bb5 	.word	0x08009bb5
 8009ae8:	08009bb5 	.word	0x08009bb5
 8009aec:	08009bb5 	.word	0x08009bb5
 8009af0:	08009bb5 	.word	0x08009bb5
 8009af4:	08009bb5 	.word	0x08009bb5
 8009af8:	08009bb5 	.word	0x08009bb5
 8009afc:	08009bb5 	.word	0x08009bb5
 8009b00:	08009b8d 	.word	0x08009b8d
 8009b04:	08009bb5 	.word	0x08009bb5
 8009b08:	08009bb5 	.word	0x08009bb5
 8009b0c:	08009bb5 	.word	0x08009bb5
 8009b10:	08009bb5 	.word	0x08009bb5
 8009b14:	08009bb5 	.word	0x08009bb5
 8009b18:	08009bb5 	.word	0x08009bb5
 8009b1c:	08009bb5 	.word	0x08009bb5
 8009b20:	08009b95 	.word	0x08009b95
 8009b24:	08009bb5 	.word	0x08009bb5
 8009b28:	08009bb5 	.word	0x08009bb5
 8009b2c:	08009bb5 	.word	0x08009bb5
 8009b30:	08009bb5 	.word	0x08009bb5
 8009b34:	08009bb5 	.word	0x08009bb5
 8009b38:	08009bb5 	.word	0x08009bb5
 8009b3c:	08009bb5 	.word	0x08009bb5
 8009b40:	08009b9d 	.word	0x08009b9d
 8009b44:	08009bb5 	.word	0x08009bb5
 8009b48:	08009bb5 	.word	0x08009bb5
 8009b4c:	08009bb5 	.word	0x08009bb5
 8009b50:	08009bb5 	.word	0x08009bb5
 8009b54:	08009bb5 	.word	0x08009bb5
 8009b58:	08009bb5 	.word	0x08009bb5
 8009b5c:	08009bb5 	.word	0x08009bb5
 8009b60:	08009ba5 	.word	0x08009ba5
 8009b64:	08009bb5 	.word	0x08009bb5
 8009b68:	08009bb5 	.word	0x08009bb5
 8009b6c:	08009bb5 	.word	0x08009bb5
 8009b70:	08009bb5 	.word	0x08009bb5
 8009b74:	08009bb5 	.word	0x08009bb5
 8009b78:	08009bb5 	.word	0x08009bb5
 8009b7c:	08009bb5 	.word	0x08009bb5
 8009b80:	08009bad 	.word	0x08009bad
 8009b84:	2301      	movs	r3, #1
 8009b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b8a:	e222      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009b8c:	2304      	movs	r3, #4
 8009b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b92:	e21e      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009b94:	2308      	movs	r3, #8
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b9a:	e21a      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009b9c:	2310      	movs	r3, #16
 8009b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ba2:	e216      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009ba4:	2320      	movs	r3, #32
 8009ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009baa:	e212      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009bac:	2340      	movs	r3, #64	; 0x40
 8009bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bb2:	e20e      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009bb4:	2380      	movs	r3, #128	; 0x80
 8009bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bba:	e20a      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a69      	ldr	r2, [pc, #420]	; (8009d68 <UART_SetConfig+0x33c>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d130      	bne.n	8009c28 <UART_SetConfig+0x1fc>
 8009bc6:	4b67      	ldr	r3, [pc, #412]	; (8009d64 <UART_SetConfig+0x338>)
 8009bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bca:	f003 0307 	and.w	r3, r3, #7
 8009bce:	2b05      	cmp	r3, #5
 8009bd0:	d826      	bhi.n	8009c20 <UART_SetConfig+0x1f4>
 8009bd2:	a201      	add	r2, pc, #4	; (adr r2, 8009bd8 <UART_SetConfig+0x1ac>)
 8009bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd8:	08009bf1 	.word	0x08009bf1
 8009bdc:	08009bf9 	.word	0x08009bf9
 8009be0:	08009c01 	.word	0x08009c01
 8009be4:	08009c09 	.word	0x08009c09
 8009be8:	08009c11 	.word	0x08009c11
 8009bec:	08009c19 	.word	0x08009c19
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf6:	e1ec      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009bf8:	2304      	movs	r3, #4
 8009bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfe:	e1e8      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009c00:	2308      	movs	r3, #8
 8009c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c06:	e1e4      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009c08:	2310      	movs	r3, #16
 8009c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c0e:	e1e0      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009c10:	2320      	movs	r3, #32
 8009c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c16:	e1dc      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009c18:	2340      	movs	r3, #64	; 0x40
 8009c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c1e:	e1d8      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009c20:	2380      	movs	r3, #128	; 0x80
 8009c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c26:	e1d4      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a4f      	ldr	r2, [pc, #316]	; (8009d6c <UART_SetConfig+0x340>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d130      	bne.n	8009c94 <UART_SetConfig+0x268>
 8009c32:	4b4c      	ldr	r3, [pc, #304]	; (8009d64 <UART_SetConfig+0x338>)
 8009c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c36:	f003 0307 	and.w	r3, r3, #7
 8009c3a:	2b05      	cmp	r3, #5
 8009c3c:	d826      	bhi.n	8009c8c <UART_SetConfig+0x260>
 8009c3e:	a201      	add	r2, pc, #4	; (adr r2, 8009c44 <UART_SetConfig+0x218>)
 8009c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c44:	08009c5d 	.word	0x08009c5d
 8009c48:	08009c65 	.word	0x08009c65
 8009c4c:	08009c6d 	.word	0x08009c6d
 8009c50:	08009c75 	.word	0x08009c75
 8009c54:	08009c7d 	.word	0x08009c7d
 8009c58:	08009c85 	.word	0x08009c85
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c62:	e1b6      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009c64:	2304      	movs	r3, #4
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6a:	e1b2      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009c6c:	2308      	movs	r3, #8
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c72:	e1ae      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009c74:	2310      	movs	r3, #16
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7a:	e1aa      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009c7c:	2320      	movs	r3, #32
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c82:	e1a6      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009c84:	2340      	movs	r3, #64	; 0x40
 8009c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c8a:	e1a2      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009c8c:	2380      	movs	r3, #128	; 0x80
 8009c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c92:	e19e      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a35      	ldr	r2, [pc, #212]	; (8009d70 <UART_SetConfig+0x344>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d130      	bne.n	8009d00 <UART_SetConfig+0x2d4>
 8009c9e:	4b31      	ldr	r3, [pc, #196]	; (8009d64 <UART_SetConfig+0x338>)
 8009ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca2:	f003 0307 	and.w	r3, r3, #7
 8009ca6:	2b05      	cmp	r3, #5
 8009ca8:	d826      	bhi.n	8009cf8 <UART_SetConfig+0x2cc>
 8009caa:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <UART_SetConfig+0x284>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009cc9 	.word	0x08009cc9
 8009cb4:	08009cd1 	.word	0x08009cd1
 8009cb8:	08009cd9 	.word	0x08009cd9
 8009cbc:	08009ce1 	.word	0x08009ce1
 8009cc0:	08009ce9 	.word	0x08009ce9
 8009cc4:	08009cf1 	.word	0x08009cf1
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cce:	e180      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009cd0:	2304      	movs	r3, #4
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd6:	e17c      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009cd8:	2308      	movs	r3, #8
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cde:	e178      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009ce0:	2310      	movs	r3, #16
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce6:	e174      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009ce8:	2320      	movs	r3, #32
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cee:	e170      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009cf0:	2340      	movs	r3, #64	; 0x40
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf6:	e16c      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009cf8:	2380      	movs	r3, #128	; 0x80
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cfe:	e168      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a1b      	ldr	r2, [pc, #108]	; (8009d74 <UART_SetConfig+0x348>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d142      	bne.n	8009d90 <UART_SetConfig+0x364>
 8009d0a:	4b16      	ldr	r3, [pc, #88]	; (8009d64 <UART_SetConfig+0x338>)
 8009d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d0e:	f003 0307 	and.w	r3, r3, #7
 8009d12:	2b05      	cmp	r3, #5
 8009d14:	d838      	bhi.n	8009d88 <UART_SetConfig+0x35c>
 8009d16:	a201      	add	r2, pc, #4	; (adr r2, 8009d1c <UART_SetConfig+0x2f0>)
 8009d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1c:	08009d35 	.word	0x08009d35
 8009d20:	08009d3d 	.word	0x08009d3d
 8009d24:	08009d45 	.word	0x08009d45
 8009d28:	08009d4d 	.word	0x08009d4d
 8009d2c:	08009d79 	.word	0x08009d79
 8009d30:	08009d81 	.word	0x08009d81
 8009d34:	2300      	movs	r3, #0
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d3a:	e14a      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009d3c:	2304      	movs	r3, #4
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d42:	e146      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009d44:	2308      	movs	r3, #8
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d4a:	e142      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009d4c:	2310      	movs	r3, #16
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d52:	e13e      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009d54:	cfff69f3 	.word	0xcfff69f3
 8009d58:	58000c00 	.word	0x58000c00
 8009d5c:	11fff4ff 	.word	0x11fff4ff
 8009d60:	40011000 	.word	0x40011000
 8009d64:	58024400 	.word	0x58024400
 8009d68:	40004400 	.word	0x40004400
 8009d6c:	40004800 	.word	0x40004800
 8009d70:	40004c00 	.word	0x40004c00
 8009d74:	40005000 	.word	0x40005000
 8009d78:	2320      	movs	r3, #32
 8009d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d7e:	e128      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009d80:	2340      	movs	r3, #64	; 0x40
 8009d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d86:	e124      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009d88:	2380      	movs	r3, #128	; 0x80
 8009d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d8e:	e120      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4acb      	ldr	r2, [pc, #812]	; (800a0c4 <UART_SetConfig+0x698>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d176      	bne.n	8009e88 <UART_SetConfig+0x45c>
 8009d9a:	4bcb      	ldr	r3, [pc, #812]	; (800a0c8 <UART_SetConfig+0x69c>)
 8009d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009da2:	2b28      	cmp	r3, #40	; 0x28
 8009da4:	d86c      	bhi.n	8009e80 <UART_SetConfig+0x454>
 8009da6:	a201      	add	r2, pc, #4	; (adr r2, 8009dac <UART_SetConfig+0x380>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009e51 	.word	0x08009e51
 8009db0:	08009e81 	.word	0x08009e81
 8009db4:	08009e81 	.word	0x08009e81
 8009db8:	08009e81 	.word	0x08009e81
 8009dbc:	08009e81 	.word	0x08009e81
 8009dc0:	08009e81 	.word	0x08009e81
 8009dc4:	08009e81 	.word	0x08009e81
 8009dc8:	08009e81 	.word	0x08009e81
 8009dcc:	08009e59 	.word	0x08009e59
 8009dd0:	08009e81 	.word	0x08009e81
 8009dd4:	08009e81 	.word	0x08009e81
 8009dd8:	08009e81 	.word	0x08009e81
 8009ddc:	08009e81 	.word	0x08009e81
 8009de0:	08009e81 	.word	0x08009e81
 8009de4:	08009e81 	.word	0x08009e81
 8009de8:	08009e81 	.word	0x08009e81
 8009dec:	08009e61 	.word	0x08009e61
 8009df0:	08009e81 	.word	0x08009e81
 8009df4:	08009e81 	.word	0x08009e81
 8009df8:	08009e81 	.word	0x08009e81
 8009dfc:	08009e81 	.word	0x08009e81
 8009e00:	08009e81 	.word	0x08009e81
 8009e04:	08009e81 	.word	0x08009e81
 8009e08:	08009e81 	.word	0x08009e81
 8009e0c:	08009e69 	.word	0x08009e69
 8009e10:	08009e81 	.word	0x08009e81
 8009e14:	08009e81 	.word	0x08009e81
 8009e18:	08009e81 	.word	0x08009e81
 8009e1c:	08009e81 	.word	0x08009e81
 8009e20:	08009e81 	.word	0x08009e81
 8009e24:	08009e81 	.word	0x08009e81
 8009e28:	08009e81 	.word	0x08009e81
 8009e2c:	08009e71 	.word	0x08009e71
 8009e30:	08009e81 	.word	0x08009e81
 8009e34:	08009e81 	.word	0x08009e81
 8009e38:	08009e81 	.word	0x08009e81
 8009e3c:	08009e81 	.word	0x08009e81
 8009e40:	08009e81 	.word	0x08009e81
 8009e44:	08009e81 	.word	0x08009e81
 8009e48:	08009e81 	.word	0x08009e81
 8009e4c:	08009e79 	.word	0x08009e79
 8009e50:	2301      	movs	r3, #1
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e56:	e0bc      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009e58:	2304      	movs	r3, #4
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e5e:	e0b8      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009e60:	2308      	movs	r3, #8
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e66:	e0b4      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009e68:	2310      	movs	r3, #16
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e6e:	e0b0      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009e70:	2320      	movs	r3, #32
 8009e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e76:	e0ac      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009e78:	2340      	movs	r3, #64	; 0x40
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e7e:	e0a8      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009e80:	2380      	movs	r3, #128	; 0x80
 8009e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e86:	e0a4      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a8f      	ldr	r2, [pc, #572]	; (800a0cc <UART_SetConfig+0x6a0>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d130      	bne.n	8009ef4 <UART_SetConfig+0x4c8>
 8009e92:	4b8d      	ldr	r3, [pc, #564]	; (800a0c8 <UART_SetConfig+0x69c>)
 8009e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e96:	f003 0307 	and.w	r3, r3, #7
 8009e9a:	2b05      	cmp	r3, #5
 8009e9c:	d826      	bhi.n	8009eec <UART_SetConfig+0x4c0>
 8009e9e:	a201      	add	r2, pc, #4	; (adr r2, 8009ea4 <UART_SetConfig+0x478>)
 8009ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea4:	08009ebd 	.word	0x08009ebd
 8009ea8:	08009ec5 	.word	0x08009ec5
 8009eac:	08009ecd 	.word	0x08009ecd
 8009eb0:	08009ed5 	.word	0x08009ed5
 8009eb4:	08009edd 	.word	0x08009edd
 8009eb8:	08009ee5 	.word	0x08009ee5
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec2:	e086      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009ec4:	2304      	movs	r3, #4
 8009ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eca:	e082      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009ecc:	2308      	movs	r3, #8
 8009ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ed2:	e07e      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009ed4:	2310      	movs	r3, #16
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eda:	e07a      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009edc:	2320      	movs	r3, #32
 8009ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ee2:	e076      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009ee4:	2340      	movs	r3, #64	; 0x40
 8009ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eea:	e072      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009eec:	2380      	movs	r3, #128	; 0x80
 8009eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ef2:	e06e      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a75      	ldr	r2, [pc, #468]	; (800a0d0 <UART_SetConfig+0x6a4>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d130      	bne.n	8009f60 <UART_SetConfig+0x534>
 8009efe:	4b72      	ldr	r3, [pc, #456]	; (800a0c8 <UART_SetConfig+0x69c>)
 8009f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f02:	f003 0307 	and.w	r3, r3, #7
 8009f06:	2b05      	cmp	r3, #5
 8009f08:	d826      	bhi.n	8009f58 <UART_SetConfig+0x52c>
 8009f0a:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <UART_SetConfig+0x4e4>)
 8009f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f10:	08009f29 	.word	0x08009f29
 8009f14:	08009f31 	.word	0x08009f31
 8009f18:	08009f39 	.word	0x08009f39
 8009f1c:	08009f41 	.word	0x08009f41
 8009f20:	08009f49 	.word	0x08009f49
 8009f24:	08009f51 	.word	0x08009f51
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2e:	e050      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009f30:	2304      	movs	r3, #4
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f36:	e04c      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009f38:	2308      	movs	r3, #8
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f3e:	e048      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009f40:	2310      	movs	r3, #16
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f46:	e044      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009f48:	2320      	movs	r3, #32
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4e:	e040      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009f50:	2340      	movs	r3, #64	; 0x40
 8009f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f56:	e03c      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009f58:	2380      	movs	r3, #128	; 0x80
 8009f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f5e:	e038      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a5b      	ldr	r2, [pc, #364]	; (800a0d4 <UART_SetConfig+0x6a8>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d130      	bne.n	8009fcc <UART_SetConfig+0x5a0>
 8009f6a:	4b57      	ldr	r3, [pc, #348]	; (800a0c8 <UART_SetConfig+0x69c>)
 8009f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f6e:	f003 0307 	and.w	r3, r3, #7
 8009f72:	2b05      	cmp	r3, #5
 8009f74:	d826      	bhi.n	8009fc4 <UART_SetConfig+0x598>
 8009f76:	a201      	add	r2, pc, #4	; (adr r2, 8009f7c <UART_SetConfig+0x550>)
 8009f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7c:	08009f95 	.word	0x08009f95
 8009f80:	08009f9d 	.word	0x08009f9d
 8009f84:	08009fa5 	.word	0x08009fa5
 8009f88:	08009fad 	.word	0x08009fad
 8009f8c:	08009fb5 	.word	0x08009fb5
 8009f90:	08009fbd 	.word	0x08009fbd
 8009f94:	2302      	movs	r3, #2
 8009f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f9a:	e01a      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009f9c:	2304      	movs	r3, #4
 8009f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fa2:	e016      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009fa4:	2308      	movs	r3, #8
 8009fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009faa:	e012      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009fac:	2310      	movs	r3, #16
 8009fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fb2:	e00e      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009fb4:	2320      	movs	r3, #32
 8009fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fba:	e00a      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009fbc:	2340      	movs	r3, #64	; 0x40
 8009fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fc2:	e006      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009fc4:	2380      	movs	r3, #128	; 0x80
 8009fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fca:	e002      	b.n	8009fd2 <UART_SetConfig+0x5a6>
 8009fcc:	2380      	movs	r3, #128	; 0x80
 8009fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a3f      	ldr	r2, [pc, #252]	; (800a0d4 <UART_SetConfig+0x6a8>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	f040 80f8 	bne.w	800a1ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fde:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009fe2:	2b20      	cmp	r3, #32
 8009fe4:	dc46      	bgt.n	800a074 <UART_SetConfig+0x648>
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	f2c0 8082 	blt.w	800a0f0 <UART_SetConfig+0x6c4>
 8009fec:	3b02      	subs	r3, #2
 8009fee:	2b1e      	cmp	r3, #30
 8009ff0:	d87e      	bhi.n	800a0f0 <UART_SetConfig+0x6c4>
 8009ff2:	a201      	add	r2, pc, #4	; (adr r2, 8009ff8 <UART_SetConfig+0x5cc>)
 8009ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff8:	0800a07b 	.word	0x0800a07b
 8009ffc:	0800a0f1 	.word	0x0800a0f1
 800a000:	0800a083 	.word	0x0800a083
 800a004:	0800a0f1 	.word	0x0800a0f1
 800a008:	0800a0f1 	.word	0x0800a0f1
 800a00c:	0800a0f1 	.word	0x0800a0f1
 800a010:	0800a093 	.word	0x0800a093
 800a014:	0800a0f1 	.word	0x0800a0f1
 800a018:	0800a0f1 	.word	0x0800a0f1
 800a01c:	0800a0f1 	.word	0x0800a0f1
 800a020:	0800a0f1 	.word	0x0800a0f1
 800a024:	0800a0f1 	.word	0x0800a0f1
 800a028:	0800a0f1 	.word	0x0800a0f1
 800a02c:	0800a0f1 	.word	0x0800a0f1
 800a030:	0800a0a3 	.word	0x0800a0a3
 800a034:	0800a0f1 	.word	0x0800a0f1
 800a038:	0800a0f1 	.word	0x0800a0f1
 800a03c:	0800a0f1 	.word	0x0800a0f1
 800a040:	0800a0f1 	.word	0x0800a0f1
 800a044:	0800a0f1 	.word	0x0800a0f1
 800a048:	0800a0f1 	.word	0x0800a0f1
 800a04c:	0800a0f1 	.word	0x0800a0f1
 800a050:	0800a0f1 	.word	0x0800a0f1
 800a054:	0800a0f1 	.word	0x0800a0f1
 800a058:	0800a0f1 	.word	0x0800a0f1
 800a05c:	0800a0f1 	.word	0x0800a0f1
 800a060:	0800a0f1 	.word	0x0800a0f1
 800a064:	0800a0f1 	.word	0x0800a0f1
 800a068:	0800a0f1 	.word	0x0800a0f1
 800a06c:	0800a0f1 	.word	0x0800a0f1
 800a070:	0800a0e3 	.word	0x0800a0e3
 800a074:	2b40      	cmp	r3, #64	; 0x40
 800a076:	d037      	beq.n	800a0e8 <UART_SetConfig+0x6bc>
 800a078:	e03a      	b.n	800a0f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a07a:	f7fd ff7b 	bl	8007f74 <HAL_RCCEx_GetD3PCLK1Freq>
 800a07e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a080:	e03c      	b.n	800a0fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a086:	4618      	mov	r0, r3
 800a088:	f7fd ff8a 	bl	8007fa0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a090:	e034      	b.n	800a0fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a092:	f107 0318 	add.w	r3, r7, #24
 800a096:	4618      	mov	r0, r3
 800a098:	f7fe f8d6 	bl	8008248 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0a0:	e02c      	b.n	800a0fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0a2:	4b09      	ldr	r3, [pc, #36]	; (800a0c8 <UART_SetConfig+0x69c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 0320 	and.w	r3, r3, #32
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d016      	beq.n	800a0dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0ae:	4b06      	ldr	r3, [pc, #24]	; (800a0c8 <UART_SetConfig+0x69c>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	08db      	lsrs	r3, r3, #3
 800a0b4:	f003 0303 	and.w	r3, r3, #3
 800a0b8:	4a07      	ldr	r2, [pc, #28]	; (800a0d8 <UART_SetConfig+0x6ac>)
 800a0ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0c0:	e01c      	b.n	800a0fc <UART_SetConfig+0x6d0>
 800a0c2:	bf00      	nop
 800a0c4:	40011400 	.word	0x40011400
 800a0c8:	58024400 	.word	0x58024400
 800a0cc:	40007800 	.word	0x40007800
 800a0d0:	40007c00 	.word	0x40007c00
 800a0d4:	58000c00 	.word	0x58000c00
 800a0d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a0dc:	4b9d      	ldr	r3, [pc, #628]	; (800a354 <UART_SetConfig+0x928>)
 800a0de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0e0:	e00c      	b.n	800a0fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0e2:	4b9d      	ldr	r3, [pc, #628]	; (800a358 <UART_SetConfig+0x92c>)
 800a0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0e6:	e009      	b.n	800a0fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0ee:	e005      	b.n	800a0fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a0fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f000 81de 	beq.w	800a4c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a108:	4a94      	ldr	r2, [pc, #592]	; (800a35c <UART_SetConfig+0x930>)
 800a10a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a10e:	461a      	mov	r2, r3
 800a110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a112:	fbb3 f3f2 	udiv	r3, r3, r2
 800a116:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	685a      	ldr	r2, [r3, #4]
 800a11c:	4613      	mov	r3, r2
 800a11e:	005b      	lsls	r3, r3, #1
 800a120:	4413      	add	r3, r2
 800a122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a124:	429a      	cmp	r2, r3
 800a126:	d305      	bcc.n	800a134 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a12e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a130:	429a      	cmp	r2, r3
 800a132:	d903      	bls.n	800a13c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a13a:	e1c1      	b.n	800a4c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a13e:	2200      	movs	r2, #0
 800a140:	60bb      	str	r3, [r7, #8]
 800a142:	60fa      	str	r2, [r7, #12]
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a148:	4a84      	ldr	r2, [pc, #528]	; (800a35c <UART_SetConfig+0x930>)
 800a14a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a14e:	b29b      	uxth	r3, r3
 800a150:	2200      	movs	r2, #0
 800a152:	603b      	str	r3, [r7, #0]
 800a154:	607a      	str	r2, [r7, #4]
 800a156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a15a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a15e:	f7f6 f917 	bl	8000390 <__aeabi_uldivmod>
 800a162:	4602      	mov	r2, r0
 800a164:	460b      	mov	r3, r1
 800a166:	4610      	mov	r0, r2
 800a168:	4619      	mov	r1, r3
 800a16a:	f04f 0200 	mov.w	r2, #0
 800a16e:	f04f 0300 	mov.w	r3, #0
 800a172:	020b      	lsls	r3, r1, #8
 800a174:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a178:	0202      	lsls	r2, r0, #8
 800a17a:	6979      	ldr	r1, [r7, #20]
 800a17c:	6849      	ldr	r1, [r1, #4]
 800a17e:	0849      	lsrs	r1, r1, #1
 800a180:	2000      	movs	r0, #0
 800a182:	460c      	mov	r4, r1
 800a184:	4605      	mov	r5, r0
 800a186:	eb12 0804 	adds.w	r8, r2, r4
 800a18a:	eb43 0905 	adc.w	r9, r3, r5
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	469a      	mov	sl, r3
 800a196:	4693      	mov	fp, r2
 800a198:	4652      	mov	r2, sl
 800a19a:	465b      	mov	r3, fp
 800a19c:	4640      	mov	r0, r8
 800a19e:	4649      	mov	r1, r9
 800a1a0:	f7f6 f8f6 	bl	8000390 <__aeabi_uldivmod>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1b2:	d308      	bcc.n	800a1c6 <UART_SetConfig+0x79a>
 800a1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1ba:	d204      	bcs.n	800a1c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1c2:	60da      	str	r2, [r3, #12]
 800a1c4:	e17c      	b.n	800a4c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a1cc:	e178      	b.n	800a4c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	69db      	ldr	r3, [r3, #28]
 800a1d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1d6:	f040 80c5 	bne.w	800a364 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a1da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a1de:	2b20      	cmp	r3, #32
 800a1e0:	dc48      	bgt.n	800a274 <UART_SetConfig+0x848>
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	db7b      	blt.n	800a2de <UART_SetConfig+0x8b2>
 800a1e6:	2b20      	cmp	r3, #32
 800a1e8:	d879      	bhi.n	800a2de <UART_SetConfig+0x8b2>
 800a1ea:	a201      	add	r2, pc, #4	; (adr r2, 800a1f0 <UART_SetConfig+0x7c4>)
 800a1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f0:	0800a27b 	.word	0x0800a27b
 800a1f4:	0800a283 	.word	0x0800a283
 800a1f8:	0800a2df 	.word	0x0800a2df
 800a1fc:	0800a2df 	.word	0x0800a2df
 800a200:	0800a28b 	.word	0x0800a28b
 800a204:	0800a2df 	.word	0x0800a2df
 800a208:	0800a2df 	.word	0x0800a2df
 800a20c:	0800a2df 	.word	0x0800a2df
 800a210:	0800a29b 	.word	0x0800a29b
 800a214:	0800a2df 	.word	0x0800a2df
 800a218:	0800a2df 	.word	0x0800a2df
 800a21c:	0800a2df 	.word	0x0800a2df
 800a220:	0800a2df 	.word	0x0800a2df
 800a224:	0800a2df 	.word	0x0800a2df
 800a228:	0800a2df 	.word	0x0800a2df
 800a22c:	0800a2df 	.word	0x0800a2df
 800a230:	0800a2ab 	.word	0x0800a2ab
 800a234:	0800a2df 	.word	0x0800a2df
 800a238:	0800a2df 	.word	0x0800a2df
 800a23c:	0800a2df 	.word	0x0800a2df
 800a240:	0800a2df 	.word	0x0800a2df
 800a244:	0800a2df 	.word	0x0800a2df
 800a248:	0800a2df 	.word	0x0800a2df
 800a24c:	0800a2df 	.word	0x0800a2df
 800a250:	0800a2df 	.word	0x0800a2df
 800a254:	0800a2df 	.word	0x0800a2df
 800a258:	0800a2df 	.word	0x0800a2df
 800a25c:	0800a2df 	.word	0x0800a2df
 800a260:	0800a2df 	.word	0x0800a2df
 800a264:	0800a2df 	.word	0x0800a2df
 800a268:	0800a2df 	.word	0x0800a2df
 800a26c:	0800a2df 	.word	0x0800a2df
 800a270:	0800a2d1 	.word	0x0800a2d1
 800a274:	2b40      	cmp	r3, #64	; 0x40
 800a276:	d02e      	beq.n	800a2d6 <UART_SetConfig+0x8aa>
 800a278:	e031      	b.n	800a2de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a27a:	f7fc fec7 	bl	800700c <HAL_RCC_GetPCLK1Freq>
 800a27e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a280:	e033      	b.n	800a2ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a282:	f7fc fed9 	bl	8007038 <HAL_RCC_GetPCLK2Freq>
 800a286:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a288:	e02f      	b.n	800a2ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a28a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fd fe86 	bl	8007fa0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a298:	e027      	b.n	800a2ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a29a:	f107 0318 	add.w	r3, r7, #24
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7fd ffd2 	bl	8008248 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2a8:	e01f      	b.n	800a2ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2aa:	4b2d      	ldr	r3, [pc, #180]	; (800a360 <UART_SetConfig+0x934>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 0320 	and.w	r3, r3, #32
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d009      	beq.n	800a2ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2b6:	4b2a      	ldr	r3, [pc, #168]	; (800a360 <UART_SetConfig+0x934>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	08db      	lsrs	r3, r3, #3
 800a2bc:	f003 0303 	and.w	r3, r3, #3
 800a2c0:	4a24      	ldr	r2, [pc, #144]	; (800a354 <UART_SetConfig+0x928>)
 800a2c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2c8:	e00f      	b.n	800a2ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a2ca:	4b22      	ldr	r3, [pc, #136]	; (800a354 <UART_SetConfig+0x928>)
 800a2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2ce:	e00c      	b.n	800a2ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2d0:	4b21      	ldr	r3, [pc, #132]	; (800a358 <UART_SetConfig+0x92c>)
 800a2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2d4:	e009      	b.n	800a2ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2dc:	e005      	b.n	800a2ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a2e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 80e7 	beq.w	800a4c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f6:	4a19      	ldr	r2, [pc, #100]	; (800a35c <UART_SetConfig+0x930>)
 800a2f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a300:	fbb3 f3f2 	udiv	r3, r3, r2
 800a304:	005a      	lsls	r2, r3, #1
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	085b      	lsrs	r3, r3, #1
 800a30c:	441a      	add	r2, r3
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	fbb2 f3f3 	udiv	r3, r2, r3
 800a316:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31a:	2b0f      	cmp	r3, #15
 800a31c:	d916      	bls.n	800a34c <UART_SetConfig+0x920>
 800a31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a324:	d212      	bcs.n	800a34c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a328:	b29b      	uxth	r3, r3
 800a32a:	f023 030f 	bic.w	r3, r3, #15
 800a32e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a332:	085b      	lsrs	r3, r3, #1
 800a334:	b29b      	uxth	r3, r3
 800a336:	f003 0307 	and.w	r3, r3, #7
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a33e:	4313      	orrs	r3, r2
 800a340:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a348:	60da      	str	r2, [r3, #12]
 800a34a:	e0b9      	b.n	800a4c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a352:	e0b5      	b.n	800a4c0 <UART_SetConfig+0xa94>
 800a354:	03d09000 	.word	0x03d09000
 800a358:	003d0900 	.word	0x003d0900
 800a35c:	08010520 	.word	0x08010520
 800a360:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a364:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a368:	2b20      	cmp	r3, #32
 800a36a:	dc49      	bgt.n	800a400 <UART_SetConfig+0x9d4>
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	db7c      	blt.n	800a46a <UART_SetConfig+0xa3e>
 800a370:	2b20      	cmp	r3, #32
 800a372:	d87a      	bhi.n	800a46a <UART_SetConfig+0xa3e>
 800a374:	a201      	add	r2, pc, #4	; (adr r2, 800a37c <UART_SetConfig+0x950>)
 800a376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37a:	bf00      	nop
 800a37c:	0800a407 	.word	0x0800a407
 800a380:	0800a40f 	.word	0x0800a40f
 800a384:	0800a46b 	.word	0x0800a46b
 800a388:	0800a46b 	.word	0x0800a46b
 800a38c:	0800a417 	.word	0x0800a417
 800a390:	0800a46b 	.word	0x0800a46b
 800a394:	0800a46b 	.word	0x0800a46b
 800a398:	0800a46b 	.word	0x0800a46b
 800a39c:	0800a427 	.word	0x0800a427
 800a3a0:	0800a46b 	.word	0x0800a46b
 800a3a4:	0800a46b 	.word	0x0800a46b
 800a3a8:	0800a46b 	.word	0x0800a46b
 800a3ac:	0800a46b 	.word	0x0800a46b
 800a3b0:	0800a46b 	.word	0x0800a46b
 800a3b4:	0800a46b 	.word	0x0800a46b
 800a3b8:	0800a46b 	.word	0x0800a46b
 800a3bc:	0800a437 	.word	0x0800a437
 800a3c0:	0800a46b 	.word	0x0800a46b
 800a3c4:	0800a46b 	.word	0x0800a46b
 800a3c8:	0800a46b 	.word	0x0800a46b
 800a3cc:	0800a46b 	.word	0x0800a46b
 800a3d0:	0800a46b 	.word	0x0800a46b
 800a3d4:	0800a46b 	.word	0x0800a46b
 800a3d8:	0800a46b 	.word	0x0800a46b
 800a3dc:	0800a46b 	.word	0x0800a46b
 800a3e0:	0800a46b 	.word	0x0800a46b
 800a3e4:	0800a46b 	.word	0x0800a46b
 800a3e8:	0800a46b 	.word	0x0800a46b
 800a3ec:	0800a46b 	.word	0x0800a46b
 800a3f0:	0800a46b 	.word	0x0800a46b
 800a3f4:	0800a46b 	.word	0x0800a46b
 800a3f8:	0800a46b 	.word	0x0800a46b
 800a3fc:	0800a45d 	.word	0x0800a45d
 800a400:	2b40      	cmp	r3, #64	; 0x40
 800a402:	d02e      	beq.n	800a462 <UART_SetConfig+0xa36>
 800a404:	e031      	b.n	800a46a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a406:	f7fc fe01 	bl	800700c <HAL_RCC_GetPCLK1Freq>
 800a40a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a40c:	e033      	b.n	800a476 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a40e:	f7fc fe13 	bl	8007038 <HAL_RCC_GetPCLK2Freq>
 800a412:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a414:	e02f      	b.n	800a476 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7fd fdc0 	bl	8007fa0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a424:	e027      	b.n	800a476 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a426:	f107 0318 	add.w	r3, r7, #24
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fd ff0c 	bl	8008248 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a434:	e01f      	b.n	800a476 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a436:	4b2d      	ldr	r3, [pc, #180]	; (800a4ec <UART_SetConfig+0xac0>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 0320 	and.w	r3, r3, #32
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d009      	beq.n	800a456 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a442:	4b2a      	ldr	r3, [pc, #168]	; (800a4ec <UART_SetConfig+0xac0>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	08db      	lsrs	r3, r3, #3
 800a448:	f003 0303 	and.w	r3, r3, #3
 800a44c:	4a28      	ldr	r2, [pc, #160]	; (800a4f0 <UART_SetConfig+0xac4>)
 800a44e:	fa22 f303 	lsr.w	r3, r2, r3
 800a452:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a454:	e00f      	b.n	800a476 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a456:	4b26      	ldr	r3, [pc, #152]	; (800a4f0 <UART_SetConfig+0xac4>)
 800a458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a45a:	e00c      	b.n	800a476 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a45c:	4b25      	ldr	r3, [pc, #148]	; (800a4f4 <UART_SetConfig+0xac8>)
 800a45e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a460:	e009      	b.n	800a476 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a468:	e005      	b.n	800a476 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a46a:	2300      	movs	r3, #0
 800a46c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a474:	bf00      	nop
    }

    if (pclk != 0U)
 800a476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d021      	beq.n	800a4c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	4a1d      	ldr	r2, [pc, #116]	; (800a4f8 <UART_SetConfig+0xacc>)
 800a482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a486:	461a      	mov	r2, r3
 800a488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a48a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	085b      	lsrs	r3, r3, #1
 800a494:	441a      	add	r2, r3
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a49e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a2:	2b0f      	cmp	r3, #15
 800a4a4:	d909      	bls.n	800a4ba <UART_SetConfig+0xa8e>
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4ac:	d205      	bcs.n	800a4ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	60da      	str	r2, [r3, #12]
 800a4b8:	e002      	b.n	800a4c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a4dc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3748      	adds	r7, #72	; 0x48
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4ea:	bf00      	nop
 800a4ec:	58024400 	.word	0x58024400
 800a4f0:	03d09000 	.word	0x03d09000
 800a4f4:	003d0900 	.word	0x003d0900
 800a4f8:	08010520 	.word	0x08010520

0800a4fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a508:	f003 0301 	and.w	r3, r3, #1
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00a      	beq.n	800a526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	430a      	orrs	r2, r1
 800a524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a52a:	f003 0302 	and.w	r3, r3, #2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00a      	beq.n	800a548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	430a      	orrs	r2, r1
 800a546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a54c:	f003 0304 	and.w	r3, r3, #4
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00a      	beq.n	800a56a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	430a      	orrs	r2, r1
 800a568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56e:	f003 0308 	and.w	r3, r3, #8
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00a      	beq.n	800a58c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	430a      	orrs	r2, r1
 800a58a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a590:	f003 0310 	and.w	r3, r3, #16
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00a      	beq.n	800a5ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	430a      	orrs	r2, r1
 800a5ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b2:	f003 0320 	and.w	r3, r3, #32
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00a      	beq.n	800a5d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d01a      	beq.n	800a612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5fa:	d10a      	bne.n	800a612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	430a      	orrs	r2, r1
 800a610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00a      	beq.n	800a634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	430a      	orrs	r2, r1
 800a632:	605a      	str	r2, [r3, #4]
  }
}
 800a634:	bf00      	nop
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af02      	add	r7, sp, #8
 800a646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a650:	f7f7 fc88 	bl	8001f64 <HAL_GetTick>
 800a654:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f003 0308 	and.w	r3, r3, #8
 800a660:	2b08      	cmp	r3, #8
 800a662:	d10e      	bne.n	800a682 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 f82f 	bl	800a6d6 <UART_WaitOnFlagUntilTimeout>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d001      	beq.n	800a682 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a67e:	2303      	movs	r3, #3
 800a680:	e025      	b.n	800a6ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 0304 	and.w	r3, r3, #4
 800a68c:	2b04      	cmp	r3, #4
 800a68e:	d10e      	bne.n	800a6ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f819 	bl	800a6d6 <UART_WaitOnFlagUntilTimeout>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6aa:	2303      	movs	r3, #3
 800a6ac:	e00f      	b.n	800a6ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2220      	movs	r2, #32
 800a6b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2220      	movs	r2, #32
 800a6ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b09c      	sub	sp, #112	; 0x70
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	60f8      	str	r0, [r7, #12]
 800a6de:	60b9      	str	r1, [r7, #8]
 800a6e0:	603b      	str	r3, [r7, #0]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6e6:	e0a9      	b.n	800a83c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ee:	f000 80a5 	beq.w	800a83c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6f2:	f7f7 fc37 	bl	8001f64 <HAL_GetTick>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d302      	bcc.n	800a708 <UART_WaitOnFlagUntilTimeout+0x32>
 800a702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a704:	2b00      	cmp	r3, #0
 800a706:	d140      	bne.n	800a78a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a710:	e853 3f00 	ldrex	r3, [r3]
 800a714:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a718:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a71c:	667b      	str	r3, [r7, #100]	; 0x64
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	461a      	mov	r2, r3
 800a724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a726:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a728:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a72c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a72e:	e841 2300 	strex	r3, r2, [r1]
 800a732:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1e6      	bne.n	800a708 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	3308      	adds	r3, #8
 800a740:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a744:	e853 3f00 	ldrex	r3, [r3]
 800a748:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74c:	f023 0301 	bic.w	r3, r3, #1
 800a750:	663b      	str	r3, [r7, #96]	; 0x60
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3308      	adds	r3, #8
 800a758:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a75a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a75c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a760:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a762:	e841 2300 	strex	r3, r2, [r1]
 800a766:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1e5      	bne.n	800a73a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2220      	movs	r2, #32
 800a772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2220      	movs	r2, #32
 800a77a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a786:	2303      	movs	r3, #3
 800a788:	e069      	b.n	800a85e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 0304 	and.w	r3, r3, #4
 800a794:	2b00      	cmp	r3, #0
 800a796:	d051      	beq.n	800a83c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7a6:	d149      	bne.n	800a83c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ba:	e853 3f00 	ldrex	r3, [r3]
 800a7be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a7c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a7d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a7d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7d8:	e841 2300 	strex	r3, r2, [r1]
 800a7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d1e6      	bne.n	800a7b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3308      	adds	r3, #8
 800a7ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	e853 3f00 	ldrex	r3, [r3]
 800a7f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	f023 0301 	bic.w	r3, r3, #1
 800a7fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3308      	adds	r3, #8
 800a802:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a804:	623a      	str	r2, [r7, #32]
 800a806:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a808:	69f9      	ldr	r1, [r7, #28]
 800a80a:	6a3a      	ldr	r2, [r7, #32]
 800a80c:	e841 2300 	strex	r3, r2, [r1]
 800a810:	61bb      	str	r3, [r7, #24]
   return(result);
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1e5      	bne.n	800a7e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2220      	movs	r2, #32
 800a81c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2220      	movs	r2, #32
 800a824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2220      	movs	r2, #32
 800a82c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2200      	movs	r2, #0
 800a834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a838:	2303      	movs	r3, #3
 800a83a:	e010      	b.n	800a85e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	69da      	ldr	r2, [r3, #28]
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	4013      	ands	r3, r2
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	429a      	cmp	r2, r3
 800a84a:	bf0c      	ite	eq
 800a84c:	2301      	moveq	r3, #1
 800a84e:	2300      	movne	r3, #0
 800a850:	b2db      	uxtb	r3, r3
 800a852:	461a      	mov	r2, r3
 800a854:	79fb      	ldrb	r3, [r7, #7]
 800a856:	429a      	cmp	r2, r3
 800a858:	f43f af46 	beq.w	800a6e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3770      	adds	r7, #112	; 0x70
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
	...

0800a868 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b096      	sub	sp, #88	; 0x58
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	4613      	mov	r3, r2
 800a874:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	88fa      	ldrh	r2, [r7, #6]
 800a880:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2222      	movs	r2, #34	; 0x22
 800a890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d02c      	beq.n	800a8f6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8a0:	4a42      	ldr	r2, [pc, #264]	; (800a9ac <UART_Start_Receive_DMA+0x144>)
 800a8a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8a8:	4a41      	ldr	r2, [pc, #260]	; (800a9b0 <UART_Start_Receive_DMA+0x148>)
 800a8aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8b0:	4a40      	ldr	r2, [pc, #256]	; (800a9b4 <UART_Start_Receive_DMA+0x14c>)
 800a8b2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	3324      	adds	r3, #36	; 0x24
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	88fb      	ldrh	r3, [r7, #6]
 800a8d0:	f7f8 f850 	bl	8002974 <HAL_DMA_Start_IT>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00d      	beq.n	800a8f6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2210      	movs	r2, #16
 800a8de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2220      	movs	r2, #32
 800a8ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e055      	b.n	800a9a2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d018      	beq.n	800a938 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a90e:	e853 3f00 	ldrex	r3, [r3]
 800a912:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a91a:	657b      	str	r3, [r7, #84]	; 0x54
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	461a      	mov	r2, r3
 800a922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a924:	64bb      	str	r3, [r7, #72]	; 0x48
 800a926:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a928:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a92a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a92c:	e841 2300 	strex	r3, r2, [r1]
 800a930:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1e6      	bne.n	800a906 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	3308      	adds	r3, #8
 800a93e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a942:	e853 3f00 	ldrex	r3, [r3]
 800a946:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	f043 0301 	orr.w	r3, r3, #1
 800a94e:	653b      	str	r3, [r7, #80]	; 0x50
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	3308      	adds	r3, #8
 800a956:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a958:	637a      	str	r2, [r7, #52]	; 0x34
 800a95a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a95e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a960:	e841 2300 	strex	r3, r2, [r1]
 800a964:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1e5      	bne.n	800a938 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	3308      	adds	r3, #8
 800a972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	e853 3f00 	ldrex	r3, [r3]
 800a97a:	613b      	str	r3, [r7, #16]
   return(result);
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a982:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	3308      	adds	r3, #8
 800a98a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a98c:	623a      	str	r2, [r7, #32]
 800a98e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a990:	69f9      	ldr	r1, [r7, #28]
 800a992:	6a3a      	ldr	r2, [r7, #32]
 800a994:	e841 2300 	strex	r3, r2, [r1]
 800a998:	61bb      	str	r3, [r7, #24]
   return(result);
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d1e5      	bne.n	800a96c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3758      	adds	r7, #88	; 0x58
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	0800abbb 	.word	0x0800abbb
 800a9b0:	0800acdd 	.word	0x0800acdd
 800a9b4:	0800ad15 	.word	0x0800ad15

0800a9b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b08f      	sub	sp, #60	; 0x3c
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c6:	6a3b      	ldr	r3, [r7, #32]
 800a9c8:	e853 3f00 	ldrex	r3, [r3]
 800a9cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a9d4:	637b      	str	r3, [r7, #52]	; 0x34
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9e0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e6      	bne.n	800a9c0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3308      	adds	r3, #8
 800a9f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	e853 3f00 	ldrex	r3, [r3]
 800aa00:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aa08:	633b      	str	r3, [r7, #48]	; 0x30
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3308      	adds	r3, #8
 800aa10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa12:	61ba      	str	r2, [r7, #24]
 800aa14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa16:	6979      	ldr	r1, [r7, #20]
 800aa18:	69ba      	ldr	r2, [r7, #24]
 800aa1a:	e841 2300 	strex	r3, r2, [r1]
 800aa1e:	613b      	str	r3, [r7, #16]
   return(result);
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1e5      	bne.n	800a9f2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2220      	movs	r2, #32
 800aa2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800aa2e:	bf00      	nop
 800aa30:	373c      	adds	r7, #60	; 0x3c
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr
	...

0800aa3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b095      	sub	sp, #84	; 0x54
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa4c:	e853 3f00 	ldrex	r3, [r3]
 800aa50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa58:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	461a      	mov	r2, r3
 800aa60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa62:	643b      	str	r3, [r7, #64]	; 0x40
 800aa64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa6a:	e841 2300 	strex	r3, r2, [r1]
 800aa6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1e6      	bne.n	800aa44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	3308      	adds	r3, #8
 800aa7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	e853 3f00 	ldrex	r3, [r3]
 800aa84:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa86:	69fa      	ldr	r2, [r7, #28]
 800aa88:	4b1e      	ldr	r3, [pc, #120]	; (800ab04 <UART_EndRxTransfer+0xc8>)
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	3308      	adds	r3, #8
 800aa94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa96:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa9e:	e841 2300 	strex	r3, r2, [r1]
 800aaa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1e5      	bne.n	800aa76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d118      	bne.n	800aae4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	e853 3f00 	ldrex	r3, [r3]
 800aabe:	60bb      	str	r3, [r7, #8]
   return(result);
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	f023 0310 	bic.w	r3, r3, #16
 800aac6:	647b      	str	r3, [r7, #68]	; 0x44
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	461a      	mov	r2, r3
 800aace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aad0:	61bb      	str	r3, [r7, #24]
 800aad2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad4:	6979      	ldr	r1, [r7, #20]
 800aad6:	69ba      	ldr	r2, [r7, #24]
 800aad8:	e841 2300 	strex	r3, r2, [r1]
 800aadc:	613b      	str	r3, [r7, #16]
   return(result);
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1e6      	bne.n	800aab2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2220      	movs	r2, #32
 800aae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800aaf8:	bf00      	nop
 800aafa:	3754      	adds	r7, #84	; 0x54
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	effffffe 	.word	0xeffffffe

0800ab08 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b090      	sub	sp, #64	; 0x40
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab14:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	69db      	ldr	r3, [r3, #28]
 800ab1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab1e:	d037      	beq.n	800ab90 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800ab20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab22:	2200      	movs	r2, #0
 800ab24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3308      	adds	r3, #8
 800ab2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	e853 3f00 	ldrex	r3, [r3]
 800ab36:	623b      	str	r3, [r7, #32]
   return(result);
 800ab38:	6a3b      	ldr	r3, [r7, #32]
 800ab3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab3e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	3308      	adds	r3, #8
 800ab46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab48:	633a      	str	r2, [r7, #48]	; 0x30
 800ab4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab50:	e841 2300 	strex	r3, r2, [r1]
 800ab54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1e5      	bne.n	800ab28 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	e853 3f00 	ldrex	r3, [r3]
 800ab68:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab70:	637b      	str	r3, [r7, #52]	; 0x34
 800ab72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	461a      	mov	r2, r3
 800ab78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab7a:	61fb      	str	r3, [r7, #28]
 800ab7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7e:	69b9      	ldr	r1, [r7, #24]
 800ab80:	69fa      	ldr	r2, [r7, #28]
 800ab82:	e841 2300 	strex	r3, r2, [r1]
 800ab86:	617b      	str	r3, [r7, #20]
   return(result);
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1e6      	bne.n	800ab5c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab8e:	e002      	b.n	800ab96 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ab90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ab92:	f7fe ff0d 	bl	80099b0 <HAL_UART_TxCpltCallback>
}
 800ab96:	bf00      	nop
 800ab98:	3740      	adds	r7, #64	; 0x40
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b084      	sub	sp, #16
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abaa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f7fe ff09 	bl	80099c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abb2:	bf00      	nop
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b09c      	sub	sp, #112	; 0x70
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	69db      	ldr	r3, [r3, #28]
 800abcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abd0:	d071      	beq.n	800acb6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800abd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abd4:	2200      	movs	r2, #0
 800abd6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abe2:	e853 3f00 	ldrex	r3, [r3]
 800abe6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800abe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abee:	66bb      	str	r3, [r7, #104]	; 0x68
 800abf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	461a      	mov	r2, r3
 800abf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abf8:	65bb      	str	r3, [r7, #88]	; 0x58
 800abfa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800abfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac00:	e841 2300 	strex	r3, r2, [r1]
 800ac04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1e6      	bne.n	800abda <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	3308      	adds	r3, #8
 800ac12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac16:	e853 3f00 	ldrex	r3, [r3]
 800ac1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac1e:	f023 0301 	bic.w	r3, r3, #1
 800ac22:	667b      	str	r3, [r7, #100]	; 0x64
 800ac24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	3308      	adds	r3, #8
 800ac2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ac2c:	647a      	str	r2, [r7, #68]	; 0x44
 800ac2e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac34:	e841 2300 	strex	r3, r2, [r1]
 800ac38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1e5      	bne.n	800ac0c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	3308      	adds	r3, #8
 800ac46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4a:	e853 3f00 	ldrex	r3, [r3]
 800ac4e:	623b      	str	r3, [r7, #32]
   return(result);
 800ac50:	6a3b      	ldr	r3, [r7, #32]
 800ac52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac56:	663b      	str	r3, [r7, #96]	; 0x60
 800ac58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	3308      	adds	r3, #8
 800ac5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ac60:	633a      	str	r2, [r7, #48]	; 0x30
 800ac62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac68:	e841 2300 	strex	r3, r2, [r1]
 800ac6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d1e5      	bne.n	800ac40 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ac74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac76:	2220      	movs	r2, #32
 800ac78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d118      	bne.n	800acb6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	e853 3f00 	ldrex	r3, [r3]
 800ac90:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f023 0310 	bic.w	r3, r3, #16
 800ac98:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aca2:	61fb      	str	r3, [r7, #28]
 800aca4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca6:	69b9      	ldr	r1, [r7, #24]
 800aca8:	69fa      	ldr	r2, [r7, #28]
 800acaa:	e841 2300 	strex	r3, r2, [r1]
 800acae:	617b      	str	r3, [r7, #20]
   return(result);
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1e6      	bne.n	800ac84 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d107      	bne.n	800acce <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acc4:	4619      	mov	r1, r3
 800acc6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800acc8:	f7fe fea4 	bl	8009a14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800accc:	e002      	b.n	800acd4 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800acce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800acd0:	f7fe fe82 	bl	80099d8 <HAL_UART_RxCpltCallback>
}
 800acd4:	bf00      	nop
 800acd6:	3770      	adds	r7, #112	; 0x70
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d109      	bne.n	800ad06 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acf8:	085b      	lsrs	r3, r3, #1
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	4619      	mov	r1, r3
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	f7fe fe88 	bl	8009a14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad04:	e002      	b.n	800ad0c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f7fe fe70 	bl	80099ec <HAL_UART_RxHalfCpltCallback>
}
 800ad0c:	bf00      	nop
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad20:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad28:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad30:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad3c:	2b80      	cmp	r3, #128	; 0x80
 800ad3e:	d109      	bne.n	800ad54 <UART_DMAError+0x40>
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	2b21      	cmp	r3, #33	; 0x21
 800ad44:	d106      	bne.n	800ad54 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ad4e:	6978      	ldr	r0, [r7, #20]
 800ad50:	f7ff fe32 	bl	800a9b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad5e:	2b40      	cmp	r3, #64	; 0x40
 800ad60:	d109      	bne.n	800ad76 <UART_DMAError+0x62>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2b22      	cmp	r3, #34	; 0x22
 800ad66:	d106      	bne.n	800ad76 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ad70:	6978      	ldr	r0, [r7, #20]
 800ad72:	f7ff fe63 	bl	800aa3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad7c:	f043 0210 	orr.w	r2, r3, #16
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad86:	6978      	ldr	r0, [r7, #20]
 800ad88:	f7fe fe3a 	bl	8009a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad8c:	bf00      	nop
 800ad8e:	3718      	adds	r7, #24
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f7fe fe24 	bl	8009a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adb8:	bf00      	nop
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b088      	sub	sp, #32
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	e853 3f00 	ldrex	r3, [r3]
 800add4:	60bb      	str	r3, [r7, #8]
   return(result);
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800addc:	61fb      	str	r3, [r7, #28]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	61bb      	str	r3, [r7, #24]
 800ade8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adea:	6979      	ldr	r1, [r7, #20]
 800adec:	69ba      	ldr	r2, [r7, #24]
 800adee:	e841 2300 	strex	r3, r2, [r1]
 800adf2:	613b      	str	r3, [r7, #16]
   return(result);
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1e6      	bne.n	800adc8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2220      	movs	r2, #32
 800adfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7fe fdd1 	bl	80099b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae0e:	bf00      	nop
 800ae10:	3720      	adds	r7, #32
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae16:	b480      	push	{r7}
 800ae18:	b083      	sub	sp, #12
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae1e:	bf00      	nop
 800ae20:	370c      	adds	r7, #12
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr

0800ae2a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b083      	sub	sp, #12
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae32:	bf00      	nop
 800ae34:	370c      	adds	r7, #12
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr

0800ae3e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ae3e:	b480      	push	{r7}
 800ae40:	b083      	sub	sp, #12
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ae46:	bf00      	nop
 800ae48:	370c      	adds	r7, #12
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr

0800ae52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae52:	b480      	push	{r7}
 800ae54:	b085      	sub	sp, #20
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d101      	bne.n	800ae68 <HAL_UARTEx_DisableFifoMode+0x16>
 800ae64:	2302      	movs	r3, #2
 800ae66:	e027      	b.n	800aeb8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2224      	movs	r2, #36	; 0x24
 800ae74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f022 0201 	bic.w	r2, r2, #1
 800ae8e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ae96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2220      	movs	r2, #32
 800aeaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d101      	bne.n	800aedc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aed8:	2302      	movs	r3, #2
 800aeda:	e02d      	b.n	800af38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2224      	movs	r2, #36	; 0x24
 800aee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f022 0201 	bic.w	r2, r2, #1
 800af02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	683a      	ldr	r2, [r7, #0]
 800af14:	430a      	orrs	r2, r1
 800af16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f84f 	bl	800afbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2220      	movs	r2, #32
 800af2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2200      	movs	r2, #0
 800af32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af50:	2b01      	cmp	r3, #1
 800af52:	d101      	bne.n	800af58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af54:	2302      	movs	r3, #2
 800af56:	e02d      	b.n	800afb4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2224      	movs	r2, #36	; 0x24
 800af64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f022 0201 	bic.w	r2, r2, #1
 800af7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	430a      	orrs	r2, r1
 800af92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 f811 	bl	800afbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2220      	movs	r2, #32
 800afa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3710      	adds	r7, #16
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d108      	bne.n	800afde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800afdc:	e031      	b.n	800b042 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800afde:	2310      	movs	r3, #16
 800afe0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800afe2:	2310      	movs	r3, #16
 800afe4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	0e5b      	lsrs	r3, r3, #25
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	f003 0307 	and.w	r3, r3, #7
 800aff4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	0f5b      	lsrs	r3, r3, #29
 800affe:	b2db      	uxtb	r3, r3
 800b000:	f003 0307 	and.w	r3, r3, #7
 800b004:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b006:	7bbb      	ldrb	r3, [r7, #14]
 800b008:	7b3a      	ldrb	r2, [r7, #12]
 800b00a:	4911      	ldr	r1, [pc, #68]	; (800b050 <UARTEx_SetNbDataToProcess+0x94>)
 800b00c:	5c8a      	ldrb	r2, [r1, r2]
 800b00e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b012:	7b3a      	ldrb	r2, [r7, #12]
 800b014:	490f      	ldr	r1, [pc, #60]	; (800b054 <UARTEx_SetNbDataToProcess+0x98>)
 800b016:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b018:	fb93 f3f2 	sdiv	r3, r3, r2
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b024:	7bfb      	ldrb	r3, [r7, #15]
 800b026:	7b7a      	ldrb	r2, [r7, #13]
 800b028:	4909      	ldr	r1, [pc, #36]	; (800b050 <UARTEx_SetNbDataToProcess+0x94>)
 800b02a:	5c8a      	ldrb	r2, [r1, r2]
 800b02c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b030:	7b7a      	ldrb	r2, [r7, #13]
 800b032:	4908      	ldr	r1, [pc, #32]	; (800b054 <UARTEx_SetNbDataToProcess+0x98>)
 800b034:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b036:	fb93 f3f2 	sdiv	r3, r3, r2
 800b03a:	b29a      	uxth	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b042:	bf00      	nop
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	08010538 	.word	0x08010538
 800b054:	08010540 	.word	0x08010540

0800b058 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b058:	b084      	sub	sp, #16
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b084      	sub	sp, #16
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
 800b062:	f107 001c 	add.w	r0, r7, #28
 800b066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d120      	bne.n	800b0b2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b074:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	68da      	ldr	r2, [r3, #12]
 800b080:	4b2a      	ldr	r3, [pc, #168]	; (800b12c <USB_CoreInit+0xd4>)
 800b082:	4013      	ands	r3, r2
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b096:	2b01      	cmp	r3, #1
 800b098:	d105      	bne.n	800b0a6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 faa8 	bl	800b5fc <USB_CoreReset>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	73fb      	strb	r3, [r7, #15]
 800b0b0:	e01a      	b.n	800b0e8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 fa9c 	bl	800b5fc <USB_CoreReset>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d106      	bne.n	800b0dc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	639a      	str	r2, [r3, #56]	; 0x38
 800b0da:	e005      	b.n	800b0e8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d116      	bne.n	800b11c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0f2:	b29a      	uxth	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b0fc:	4b0c      	ldr	r3, [pc, #48]	; (800b130 <USB_CoreInit+0xd8>)
 800b0fe:	4313      	orrs	r3, r2
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	f043 0206 	orr.w	r2, r3, #6
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	f043 0220 	orr.w	r2, r3, #32
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b128:	b004      	add	sp, #16
 800b12a:	4770      	bx	lr
 800b12c:	ffbdffbf 	.word	0xffbdffbf
 800b130:	03ee0000 	.word	0x03ee0000

0800b134 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	f023 0201 	bic.w	r2, r3, #1
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	370c      	adds	r7, #12
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	460b      	mov	r3, r1
 800b160:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b162:	2300      	movs	r3, #0
 800b164:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b172:	78fb      	ldrb	r3, [r7, #3]
 800b174:	2b01      	cmp	r3, #1
 800b176:	d115      	bne.n	800b1a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b184:	2001      	movs	r0, #1
 800b186:	f7f6 fef9 	bl	8001f7c <HAL_Delay>
      ms++;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	3301      	adds	r3, #1
 800b18e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 fa25 	bl	800b5e0 <USB_GetMode>
 800b196:	4603      	mov	r3, r0
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d01e      	beq.n	800b1da <USB_SetCurrentMode+0x84>
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b31      	cmp	r3, #49	; 0x31
 800b1a0:	d9f0      	bls.n	800b184 <USB_SetCurrentMode+0x2e>
 800b1a2:	e01a      	b.n	800b1da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b1a4:	78fb      	ldrb	r3, [r7, #3]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d115      	bne.n	800b1d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b1b6:	2001      	movs	r0, #1
 800b1b8:	f7f6 fee0 	bl	8001f7c <HAL_Delay>
      ms++;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fa0c 	bl	800b5e0 <USB_GetMode>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d005      	beq.n	800b1da <USB_SetCurrentMode+0x84>
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2b31      	cmp	r3, #49	; 0x31
 800b1d2:	d9f0      	bls.n	800b1b6 <USB_SetCurrentMode+0x60>
 800b1d4:	e001      	b.n	800b1da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e005      	b.n	800b1e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2b32      	cmp	r3, #50	; 0x32
 800b1de:	d101      	bne.n	800b1e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e000      	b.n	800b1e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
	...

0800b1f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b1f0:	b084      	sub	sp, #16
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b086      	sub	sp, #24
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b1fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b202:	2300      	movs	r3, #0
 800b204:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b20a:	2300      	movs	r3, #0
 800b20c:	613b      	str	r3, [r7, #16]
 800b20e:	e009      	b.n	800b224 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	3340      	adds	r3, #64	; 0x40
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4413      	add	r3, r2
 800b21a:	2200      	movs	r2, #0
 800b21c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	3301      	adds	r3, #1
 800b222:	613b      	str	r3, [r7, #16]
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	2b0e      	cmp	r3, #14
 800b228:	d9f2      	bls.n	800b210 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b22a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d11c      	bne.n	800b26a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b23e:	f043 0302 	orr.w	r3, r3, #2
 800b242:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b248:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	601a      	str	r2, [r3, #0]
 800b268:	e005      	b.n	800b276 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b26e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b27c:	461a      	mov	r2, r3
 800b27e:	2300      	movs	r3, #0
 800b280:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b288:	4619      	mov	r1, r3
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b290:	461a      	mov	r2, r3
 800b292:	680b      	ldr	r3, [r1, #0]
 800b294:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d10c      	bne.n	800b2b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d104      	bne.n	800b2ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f961 	bl	800b56c <USB_SetDevSpeed>
 800b2aa:	e008      	b.n	800b2be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b2ac:	2101      	movs	r1, #1
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f000 f95c 	bl	800b56c <USB_SetDevSpeed>
 800b2b4:	e003      	b.n	800b2be <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b2b6:	2103      	movs	r1, #3
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 f957 	bl	800b56c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b2be:	2110      	movs	r1, #16
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f8f3 	bl	800b4ac <USB_FlushTxFifo>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d001      	beq.n	800b2d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f91d 	bl	800b510 <USB_FlushRxFifo>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d001      	beq.n	800b2e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2fe:	461a      	mov	r2, r3
 800b300:	2300      	movs	r3, #0
 800b302:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b304:	2300      	movs	r3, #0
 800b306:	613b      	str	r3, [r7, #16]
 800b308:	e043      	b.n	800b392 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	015a      	lsls	r2, r3, #5
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	4413      	add	r3, r2
 800b312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b31c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b320:	d118      	bne.n	800b354 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10a      	bne.n	800b33e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	015a      	lsls	r2, r3, #5
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	4413      	add	r3, r2
 800b330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b334:	461a      	mov	r2, r3
 800b336:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b33a:	6013      	str	r3, [r2, #0]
 800b33c:	e013      	b.n	800b366 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	015a      	lsls	r2, r3, #5
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	4413      	add	r3, r2
 800b346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b34a:	461a      	mov	r2, r3
 800b34c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b350:	6013      	str	r3, [r2, #0]
 800b352:	e008      	b.n	800b366 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	015a      	lsls	r2, r3, #5
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b360:	461a      	mov	r2, r3
 800b362:	2300      	movs	r3, #0
 800b364:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	015a      	lsls	r2, r3, #5
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	4413      	add	r3, r2
 800b36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b372:	461a      	mov	r2, r3
 800b374:	2300      	movs	r3, #0
 800b376:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	015a      	lsls	r2, r3, #5
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	4413      	add	r3, r2
 800b380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b384:	461a      	mov	r2, r3
 800b386:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b38a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	3301      	adds	r3, #1
 800b390:	613b      	str	r3, [r7, #16]
 800b392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	429a      	cmp	r2, r3
 800b398:	d3b7      	bcc.n	800b30a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b39a:	2300      	movs	r3, #0
 800b39c:	613b      	str	r3, [r7, #16]
 800b39e:	e043      	b.n	800b428 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	015a      	lsls	r2, r3, #5
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3b6:	d118      	bne.n	800b3ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10a      	bne.n	800b3d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	015a      	lsls	r2, r3, #5
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	e013      	b.n	800b3fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	015a      	lsls	r2, r3, #5
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	4413      	add	r3, r2
 800b3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	e008      	b.n	800b3fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	015a      	lsls	r2, r3, #5
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	015a      	lsls	r2, r3, #5
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	4413      	add	r3, r2
 800b404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b408:	461a      	mov	r2, r3
 800b40a:	2300      	movs	r3, #0
 800b40c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	015a      	lsls	r2, r3, #5
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	4413      	add	r3, r2
 800b416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b41a:	461a      	mov	r2, r3
 800b41c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b420:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	3301      	adds	r3, #1
 800b426:	613b      	str	r3, [r7, #16]
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	693a      	ldr	r2, [r7, #16]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d3b7      	bcc.n	800b3a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b43e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b442:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b450:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b454:	2b00      	cmp	r3, #0
 800b456:	d105      	bne.n	800b464 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	699b      	ldr	r3, [r3, #24]
 800b45c:	f043 0210 	orr.w	r2, r3, #16
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	699a      	ldr	r2, [r3, #24]
 800b468:	4b0e      	ldr	r3, [pc, #56]	; (800b4a4 <USB_DevInit+0x2b4>)
 800b46a:	4313      	orrs	r3, r2
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b472:	2b00      	cmp	r3, #0
 800b474:	d005      	beq.n	800b482 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	699b      	ldr	r3, [r3, #24]
 800b47a:	f043 0208 	orr.w	r2, r3, #8
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b484:	2b01      	cmp	r3, #1
 800b486:	d105      	bne.n	800b494 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	699a      	ldr	r2, [r3, #24]
 800b48c:	4b06      	ldr	r3, [pc, #24]	; (800b4a8 <USB_DevInit+0x2b8>)
 800b48e:	4313      	orrs	r3, r2
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b494:	7dfb      	ldrb	r3, [r7, #23]
}
 800b496:	4618      	mov	r0, r3
 800b498:	3718      	adds	r7, #24
 800b49a:	46bd      	mov	sp, r7
 800b49c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4a0:	b004      	add	sp, #16
 800b4a2:	4770      	bx	lr
 800b4a4:	803c3800 	.word	0x803c3800
 800b4a8:	40000004 	.word	0x40000004

0800b4ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	60fb      	str	r3, [r7, #12]
 800b4c0:	4a12      	ldr	r2, [pc, #72]	; (800b50c <USB_FlushTxFifo+0x60>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d901      	bls.n	800b4ca <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	e01a      	b.n	800b500 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	691b      	ldr	r3, [r3, #16]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	daf3      	bge.n	800b4ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	019b      	lsls	r3, r3, #6
 800b4da:	f043 0220 	orr.w	r2, r3, #32
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	60fb      	str	r3, [r7, #12]
 800b4e8:	4a08      	ldr	r2, [pc, #32]	; (800b50c <USB_FlushTxFifo+0x60>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d901      	bls.n	800b4f2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800b4ee:	2303      	movs	r3, #3
 800b4f0:	e006      	b.n	800b500 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	691b      	ldr	r3, [r3, #16]
 800b4f6:	f003 0320 	and.w	r3, r3, #32
 800b4fa:	2b20      	cmp	r3, #32
 800b4fc:	d0f1      	beq.n	800b4e2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3714      	adds	r7, #20
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr
 800b50c:	00030d40 	.word	0x00030d40

0800b510 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b518:	2300      	movs	r3, #0
 800b51a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	3301      	adds	r3, #1
 800b520:	60fb      	str	r3, [r7, #12]
 800b522:	4a11      	ldr	r2, [pc, #68]	; (800b568 <USB_FlushRxFifo+0x58>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d901      	bls.n	800b52c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800b528:	2303      	movs	r3, #3
 800b52a:	e017      	b.n	800b55c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	daf3      	bge.n	800b51c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b534:	2300      	movs	r3, #0
 800b536:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2210      	movs	r2, #16
 800b53c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	3301      	adds	r3, #1
 800b542:	60fb      	str	r3, [r7, #12]
 800b544:	4a08      	ldr	r2, [pc, #32]	; (800b568 <USB_FlushRxFifo+0x58>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d901      	bls.n	800b54e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800b54a:	2303      	movs	r3, #3
 800b54c:	e006      	b.n	800b55c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	f003 0310 	and.w	r3, r3, #16
 800b556:	2b10      	cmp	r3, #16
 800b558:	d0f1      	beq.n	800b53e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3714      	adds	r7, #20
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr
 800b568:	00030d40 	.word	0x00030d40

0800b56c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b085      	sub	sp, #20
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	460b      	mov	r3, r1
 800b576:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	78fb      	ldrb	r3, [r7, #3]
 800b586:	68f9      	ldr	r1, [r7, #12]
 800b588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b58c:	4313      	orrs	r3, r2
 800b58e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3714      	adds	r7, #20
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr

0800b59e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b59e:	b480      	push	{r7}
 800b5a0:	b085      	sub	sp, #20
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b5b8:	f023 0303 	bic.w	r3, r3, #3
 800b5bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5cc:	f043 0302 	orr.w	r3, r3, #2
 800b5d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3714      	adds	r7, #20
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	f003 0301 	and.w	r3, r3, #1
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b604:	2300      	movs	r3, #0
 800b606:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	3301      	adds	r3, #1
 800b60c:	60fb      	str	r3, [r7, #12]
 800b60e:	4a13      	ldr	r2, [pc, #76]	; (800b65c <USB_CoreReset+0x60>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d901      	bls.n	800b618 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b614:	2303      	movs	r3, #3
 800b616:	e01a      	b.n	800b64e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	691b      	ldr	r3, [r3, #16]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	daf3      	bge.n	800b608 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b620:	2300      	movs	r3, #0
 800b622:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	f043 0201 	orr.w	r2, r3, #1
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	3301      	adds	r3, #1
 800b634:	60fb      	str	r3, [r7, #12]
 800b636:	4a09      	ldr	r2, [pc, #36]	; (800b65c <USB_CoreReset+0x60>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d901      	bls.n	800b640 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800b63c:	2303      	movs	r3, #3
 800b63e:	e006      	b.n	800b64e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	f003 0301 	and.w	r3, r3, #1
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d0f1      	beq.n	800b630 <USB_CoreReset+0x34>

  return HAL_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3714      	adds	r7, #20
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	00030d40 	.word	0x00030d40

0800b660 <__NVIC_SetPriority>:
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	4603      	mov	r3, r0
 800b668:	6039      	str	r1, [r7, #0]
 800b66a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b66c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b670:	2b00      	cmp	r3, #0
 800b672:	db0a      	blt.n	800b68a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	b2da      	uxtb	r2, r3
 800b678:	490c      	ldr	r1, [pc, #48]	; (800b6ac <__NVIC_SetPriority+0x4c>)
 800b67a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b67e:	0112      	lsls	r2, r2, #4
 800b680:	b2d2      	uxtb	r2, r2
 800b682:	440b      	add	r3, r1
 800b684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b688:	e00a      	b.n	800b6a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	b2da      	uxtb	r2, r3
 800b68e:	4908      	ldr	r1, [pc, #32]	; (800b6b0 <__NVIC_SetPriority+0x50>)
 800b690:	88fb      	ldrh	r3, [r7, #6]
 800b692:	f003 030f 	and.w	r3, r3, #15
 800b696:	3b04      	subs	r3, #4
 800b698:	0112      	lsls	r2, r2, #4
 800b69a:	b2d2      	uxtb	r2, r2
 800b69c:	440b      	add	r3, r1
 800b69e:	761a      	strb	r2, [r3, #24]
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	e000e100 	.word	0xe000e100
 800b6b0:	e000ed00 	.word	0xe000ed00

0800b6b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b6b8:	4b05      	ldr	r3, [pc, #20]	; (800b6d0 <SysTick_Handler+0x1c>)
 800b6ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b6bc:	f001 fd28 	bl	800d110 <xTaskGetSchedulerState>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d001      	beq.n	800b6ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b6c6:	f002 fb0f 	bl	800dce8 <xPortSysTickHandler>
  }
}
 800b6ca:	bf00      	nop
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	e000e010 	.word	0xe000e010

0800b6d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b6d8:	2100      	movs	r1, #0
 800b6da:	f06f 0004 	mvn.w	r0, #4
 800b6de:	f7ff ffbf 	bl	800b660 <__NVIC_SetPriority>
#endif
}
 800b6e2:	bf00      	nop
 800b6e4:	bd80      	pop	{r7, pc}
	...

0800b6e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6ee:	f3ef 8305 	mrs	r3, IPSR
 800b6f2:	603b      	str	r3, [r7, #0]
  return(result);
 800b6f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d003      	beq.n	800b702 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b6fa:	f06f 0305 	mvn.w	r3, #5
 800b6fe:	607b      	str	r3, [r7, #4]
 800b700:	e00c      	b.n	800b71c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b702:	4b0a      	ldr	r3, [pc, #40]	; (800b72c <osKernelInitialize+0x44>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d105      	bne.n	800b716 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b70a:	4b08      	ldr	r3, [pc, #32]	; (800b72c <osKernelInitialize+0x44>)
 800b70c:	2201      	movs	r2, #1
 800b70e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b710:	2300      	movs	r3, #0
 800b712:	607b      	str	r3, [r7, #4]
 800b714:	e002      	b.n	800b71c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b716:	f04f 33ff 	mov.w	r3, #4294967295
 800b71a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b71c:	687b      	ldr	r3, [r7, #4]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	20000f8c 	.word	0x20000f8c

0800b730 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b736:	f3ef 8305 	mrs	r3, IPSR
 800b73a:	603b      	str	r3, [r7, #0]
  return(result);
 800b73c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d003      	beq.n	800b74a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b742:	f06f 0305 	mvn.w	r3, #5
 800b746:	607b      	str	r3, [r7, #4]
 800b748:	e010      	b.n	800b76c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b74a:	4b0b      	ldr	r3, [pc, #44]	; (800b778 <osKernelStart+0x48>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d109      	bne.n	800b766 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b752:	f7ff ffbf 	bl	800b6d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b756:	4b08      	ldr	r3, [pc, #32]	; (800b778 <osKernelStart+0x48>)
 800b758:	2202      	movs	r2, #2
 800b75a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b75c:	f001 f87c 	bl	800c858 <vTaskStartScheduler>
      stat = osOK;
 800b760:	2300      	movs	r3, #0
 800b762:	607b      	str	r3, [r7, #4]
 800b764:	e002      	b.n	800b76c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b766:	f04f 33ff 	mov.w	r3, #4294967295
 800b76a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b76c:	687b      	ldr	r3, [r7, #4]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	20000f8c 	.word	0x20000f8c

0800b77c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b08e      	sub	sp, #56	; 0x38
 800b780:	af04      	add	r7, sp, #16
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b788:	2300      	movs	r3, #0
 800b78a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b78c:	f3ef 8305 	mrs	r3, IPSR
 800b790:	617b      	str	r3, [r7, #20]
  return(result);
 800b792:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b794:	2b00      	cmp	r3, #0
 800b796:	d17e      	bne.n	800b896 <osThreadNew+0x11a>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d07b      	beq.n	800b896 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b79e:	2380      	movs	r3, #128	; 0x80
 800b7a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b7a2:	2318      	movs	r3, #24
 800b7a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d045      	beq.n	800b842 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d002      	beq.n	800b7c4 <osThreadNew+0x48>
        name = attr->name;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	699b      	ldr	r3, [r3, #24]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d002      	beq.n	800b7d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	699b      	ldr	r3, [r3, #24]
 800b7d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d008      	beq.n	800b7ea <osThreadNew+0x6e>
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	2b38      	cmp	r3, #56	; 0x38
 800b7dc:	d805      	bhi.n	800b7ea <osThreadNew+0x6e>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	f003 0301 	and.w	r3, r3, #1
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <osThreadNew+0x72>
        return (NULL);
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	e054      	b.n	800b898 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	695b      	ldr	r3, [r3, #20]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d003      	beq.n	800b7fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	695b      	ldr	r3, [r3, #20]
 800b7fa:	089b      	lsrs	r3, r3, #2
 800b7fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00e      	beq.n	800b824 <osThreadNew+0xa8>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	2bbb      	cmp	r3, #187	; 0xbb
 800b80c:	d90a      	bls.n	800b824 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b812:	2b00      	cmp	r3, #0
 800b814:	d006      	beq.n	800b824 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	695b      	ldr	r3, [r3, #20]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d002      	beq.n	800b824 <osThreadNew+0xa8>
        mem = 1;
 800b81e:	2301      	movs	r3, #1
 800b820:	61bb      	str	r3, [r7, #24]
 800b822:	e010      	b.n	800b846 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10c      	bne.n	800b846 <osThreadNew+0xca>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d108      	bne.n	800b846 <osThreadNew+0xca>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d104      	bne.n	800b846 <osThreadNew+0xca>
          mem = 0;
 800b83c:	2300      	movs	r3, #0
 800b83e:	61bb      	str	r3, [r7, #24]
 800b840:	e001      	b.n	800b846 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b842:	2300      	movs	r3, #0
 800b844:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d110      	bne.n	800b86e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b854:	9202      	str	r2, [sp, #8]
 800b856:	9301      	str	r3, [sp, #4]
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	9300      	str	r3, [sp, #0]
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	6a3a      	ldr	r2, [r7, #32]
 800b860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f000 fe0c 	bl	800c480 <xTaskCreateStatic>
 800b868:	4603      	mov	r3, r0
 800b86a:	613b      	str	r3, [r7, #16]
 800b86c:	e013      	b.n	800b896 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d110      	bne.n	800b896 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b874:	6a3b      	ldr	r3, [r7, #32]
 800b876:	b29a      	uxth	r2, r3
 800b878:	f107 0310 	add.w	r3, r7, #16
 800b87c:	9301      	str	r3, [sp, #4]
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f000 fe57 	bl	800c53a <xTaskCreate>
 800b88c:	4603      	mov	r3, r0
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d001      	beq.n	800b896 <osThreadNew+0x11a>
            hTask = NULL;
 800b892:	2300      	movs	r3, #0
 800b894:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b896:	693b      	ldr	r3, [r7, #16]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3728      	adds	r7, #40	; 0x28
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8a8:	f3ef 8305 	mrs	r3, IPSR
 800b8ac:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d003      	beq.n	800b8bc <osDelay+0x1c>
    stat = osErrorISR;
 800b8b4:	f06f 0305 	mvn.w	r3, #5
 800b8b8:	60fb      	str	r3, [r7, #12]
 800b8ba:	e007      	b.n	800b8cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d002      	beq.n	800b8cc <osDelay+0x2c>
      vTaskDelay(ticks);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 ff92 	bl	800c7f0 <vTaskDelay>
    }
  }

  return (stat);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
	...

0800b8d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	4a07      	ldr	r2, [pc, #28]	; (800b904 <vApplicationGetIdleTaskMemory+0x2c>)
 800b8e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	4a06      	ldr	r2, [pc, #24]	; (800b908 <vApplicationGetIdleTaskMemory+0x30>)
 800b8ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2280      	movs	r2, #128	; 0x80
 800b8f4:	601a      	str	r2, [r3, #0]
}
 800b8f6:	bf00      	nop
 800b8f8:	3714      	adds	r7, #20
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	20000f90 	.word	0x20000f90
 800b908:	2000104c 	.word	0x2000104c

0800b90c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	4a07      	ldr	r2, [pc, #28]	; (800b938 <vApplicationGetTimerTaskMemory+0x2c>)
 800b91c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	4a06      	ldr	r2, [pc, #24]	; (800b93c <vApplicationGetTimerTaskMemory+0x30>)
 800b922:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b92a:	601a      	str	r2, [r3, #0]
}
 800b92c:	bf00      	nop
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	2000124c 	.word	0x2000124c
 800b93c:	20001308 	.word	0x20001308

0800b940 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f103 0208 	add.w	r2, r3, #8
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f04f 32ff 	mov.w	r2, #4294967295
 800b958:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f103 0208 	add.w	r2, r3, #8
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f103 0208 	add.w	r2, r3, #8
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b974:	bf00      	nop
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b98e:	bf00      	nop
 800b990:	370c      	adds	r7, #12
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr

0800b99a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b99a:	b480      	push	{r7}
 800b99c:	b085      	sub	sp, #20
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	689a      	ldr	r2, [r3, #8]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	683a      	ldr	r2, [r7, #0]
 800b9be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	683a      	ldr	r2, [r7, #0]
 800b9c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	1c5a      	adds	r2, r3, #1
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	601a      	str	r2, [r3, #0]
}
 800b9d6:	bf00      	nop
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	b085      	sub	sp, #20
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f8:	d103      	bne.n	800ba02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	691b      	ldr	r3, [r3, #16]
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	e00c      	b.n	800ba1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	3308      	adds	r3, #8
 800ba06:	60fb      	str	r3, [r7, #12]
 800ba08:	e002      	b.n	800ba10 <vListInsert+0x2e>
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	60fb      	str	r3, [r7, #12]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d2f6      	bcs.n	800ba0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	685a      	ldr	r2, [r3, #4]
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	683a      	ldr	r2, [r7, #0]
 800ba36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	1c5a      	adds	r2, r3, #1
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	601a      	str	r2, [r3, #0]
}
 800ba48:	bf00      	nop
 800ba4a:	3714      	adds	r7, #20
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	691b      	ldr	r3, [r3, #16]
 800ba60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	6892      	ldr	r2, [r2, #8]
 800ba6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	6852      	ldr	r2, [r2, #4]
 800ba74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d103      	bne.n	800ba88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	689a      	ldr	r2, [r3, #8]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	1e5a      	subs	r2, r3, #1
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10a      	bne.n	800bad2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800babc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac0:	f383 8811 	msr	BASEPRI, r3
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bace:	bf00      	nop
 800bad0:	e7fe      	b.n	800bad0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bad2:	f002 f877 	bl	800dbc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bade:	68f9      	ldr	r1, [r7, #12]
 800bae0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bae2:	fb01 f303 	mul.w	r3, r1, r3
 800bae6:	441a      	add	r2, r3
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb02:	3b01      	subs	r3, #1
 800bb04:	68f9      	ldr	r1, [r7, #12]
 800bb06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bb08:	fb01 f303 	mul.w	r3, r1, r3
 800bb0c:	441a      	add	r2, r3
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	22ff      	movs	r2, #255	; 0xff
 800bb16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	22ff      	movs	r2, #255	; 0xff
 800bb1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d114      	bne.n	800bb52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d01a      	beq.n	800bb66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	3310      	adds	r3, #16
 800bb34:	4618      	mov	r0, r3
 800bb36:	f001 f929 	bl	800cd8c <xTaskRemoveFromEventList>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d012      	beq.n	800bb66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bb40:	4b0c      	ldr	r3, [pc, #48]	; (800bb74 <xQueueGenericReset+0xcc>)
 800bb42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb46:	601a      	str	r2, [r3, #0]
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	e009      	b.n	800bb66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	3310      	adds	r3, #16
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7ff fef2 	bl	800b940 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	3324      	adds	r3, #36	; 0x24
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7ff feed 	bl	800b940 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bb66:	f002 f85d 	bl	800dc24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb6a:	2301      	movs	r3, #1
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	e000ed04 	.word	0xe000ed04

0800bb78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b08e      	sub	sp, #56	; 0x38
 800bb7c:	af02      	add	r7, sp, #8
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
 800bb84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10a      	bne.n	800bba2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb9e:	bf00      	nop
 800bba0:	e7fe      	b.n	800bba0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d10a      	bne.n	800bbbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbac:	f383 8811 	msr	BASEPRI, r3
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bbba:	bf00      	nop
 800bbbc:	e7fe      	b.n	800bbbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d002      	beq.n	800bbca <xQueueGenericCreateStatic+0x52>
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <xQueueGenericCreateStatic+0x56>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e000      	b.n	800bbd0 <xQueueGenericCreateStatic+0x58>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10a      	bne.n	800bbea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	623b      	str	r3, [r7, #32]
}
 800bbe6:	bf00      	nop
 800bbe8:	e7fe      	b.n	800bbe8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d102      	bne.n	800bbf6 <xQueueGenericCreateStatic+0x7e>
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d101      	bne.n	800bbfa <xQueueGenericCreateStatic+0x82>
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e000      	b.n	800bbfc <xQueueGenericCreateStatic+0x84>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d10a      	bne.n	800bc16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc04:	f383 8811 	msr	BASEPRI, r3
 800bc08:	f3bf 8f6f 	isb	sy
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	61fb      	str	r3, [r7, #28]
}
 800bc12:	bf00      	nop
 800bc14:	e7fe      	b.n	800bc14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc16:	2350      	movs	r3, #80	; 0x50
 800bc18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	2b50      	cmp	r3, #80	; 0x50
 800bc1e:	d00a      	beq.n	800bc36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	61bb      	str	r3, [r7, #24]
}
 800bc32:	bf00      	nop
 800bc34:	e7fe      	b.n	800bc34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bc36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00d      	beq.n	800bc5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc44:	2201      	movs	r2, #1
 800bc46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc50:	9300      	str	r3, [sp, #0]
 800bc52:	4613      	mov	r3, r2
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	68b9      	ldr	r1, [r7, #8]
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	f000 f805 	bl	800bc68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3730      	adds	r7, #48	; 0x30
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d103      	bne.n	800bc84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	69ba      	ldr	r2, [r7, #24]
 800bc80:	601a      	str	r2, [r3, #0]
 800bc82:	e002      	b.n	800bc8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bc96:	2101      	movs	r1, #1
 800bc98:	69b8      	ldr	r0, [r7, #24]
 800bc9a:	f7ff ff05 	bl	800baa8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	78fa      	ldrb	r2, [r7, #3]
 800bca2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bca6:	bf00      	nop
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
	...

0800bcb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b08e      	sub	sp, #56	; 0x38
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
 800bcbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10a      	bne.n	800bce2 <xQueueGenericSend+0x32>
	__asm volatile
 800bccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd0:	f383 8811 	msr	BASEPRI, r3
 800bcd4:	f3bf 8f6f 	isb	sy
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcde:	bf00      	nop
 800bce0:	e7fe      	b.n	800bce0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d103      	bne.n	800bcf0 <xQueueGenericSend+0x40>
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <xQueueGenericSend+0x44>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	e000      	b.n	800bcf6 <xQueueGenericSend+0x46>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d10a      	bne.n	800bd10 <xQueueGenericSend+0x60>
	__asm volatile
 800bcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfe:	f383 8811 	msr	BASEPRI, r3
 800bd02:	f3bf 8f6f 	isb	sy
 800bd06:	f3bf 8f4f 	dsb	sy
 800bd0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd0c:	bf00      	nop
 800bd0e:	e7fe      	b.n	800bd0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	d103      	bne.n	800bd1e <xQueueGenericSend+0x6e>
 800bd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d101      	bne.n	800bd22 <xQueueGenericSend+0x72>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e000      	b.n	800bd24 <xQueueGenericSend+0x74>
 800bd22:	2300      	movs	r3, #0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d10a      	bne.n	800bd3e <xQueueGenericSend+0x8e>
	__asm volatile
 800bd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	623b      	str	r3, [r7, #32]
}
 800bd3a:	bf00      	nop
 800bd3c:	e7fe      	b.n	800bd3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd3e:	f001 f9e7 	bl	800d110 <xTaskGetSchedulerState>
 800bd42:	4603      	mov	r3, r0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d102      	bne.n	800bd4e <xQueueGenericSend+0x9e>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d101      	bne.n	800bd52 <xQueueGenericSend+0xa2>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e000      	b.n	800bd54 <xQueueGenericSend+0xa4>
 800bd52:	2300      	movs	r3, #0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d10a      	bne.n	800bd6e <xQueueGenericSend+0xbe>
	__asm volatile
 800bd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	61fb      	str	r3, [r7, #28]
}
 800bd6a:	bf00      	nop
 800bd6c:	e7fe      	b.n	800bd6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd6e:	f001 ff29 	bl	800dbc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d302      	bcc.n	800bd84 <xQueueGenericSend+0xd4>
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	2b02      	cmp	r3, #2
 800bd82:	d129      	bne.n	800bdd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd84:	683a      	ldr	r2, [r7, #0]
 800bd86:	68b9      	ldr	r1, [r7, #8]
 800bd88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd8a:	f000 fa0b 	bl	800c1a4 <prvCopyDataToQueue>
 800bd8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d010      	beq.n	800bdba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9a:	3324      	adds	r3, #36	; 0x24
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f000 fff5 	bl	800cd8c <xTaskRemoveFromEventList>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d013      	beq.n	800bdd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bda8:	4b3f      	ldr	r3, [pc, #252]	; (800bea8 <xQueueGenericSend+0x1f8>)
 800bdaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdae:	601a      	str	r2, [r3, #0]
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	e00a      	b.n	800bdd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d007      	beq.n	800bdd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bdc0:	4b39      	ldr	r3, [pc, #228]	; (800bea8 <xQueueGenericSend+0x1f8>)
 800bdc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc6:	601a      	str	r2, [r3, #0]
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bdd0:	f001 ff28 	bl	800dc24 <vPortExitCritical>
				return pdPASS;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	e063      	b.n	800bea0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d103      	bne.n	800bde6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bdde:	f001 ff21 	bl	800dc24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bde2:	2300      	movs	r3, #0
 800bde4:	e05c      	b.n	800bea0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bde6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d106      	bne.n	800bdfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdec:	f107 0314 	add.w	r3, r7, #20
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f001 f82f 	bl	800ce54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdfa:	f001 ff13 	bl	800dc24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdfe:	f000 fd9b 	bl	800c938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be02:	f001 fedf 	bl	800dbc4 <vPortEnterCritical>
 800be06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be0c:	b25b      	sxtb	r3, r3
 800be0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be12:	d103      	bne.n	800be1c <xQueueGenericSend+0x16c>
 800be14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be16:	2200      	movs	r2, #0
 800be18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be22:	b25b      	sxtb	r3, r3
 800be24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be28:	d103      	bne.n	800be32 <xQueueGenericSend+0x182>
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2c:	2200      	movs	r2, #0
 800be2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be32:	f001 fef7 	bl	800dc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be36:	1d3a      	adds	r2, r7, #4
 800be38:	f107 0314 	add.w	r3, r7, #20
 800be3c:	4611      	mov	r1, r2
 800be3e:	4618      	mov	r0, r3
 800be40:	f001 f81e 	bl	800ce80 <xTaskCheckForTimeOut>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d124      	bne.n	800be94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800be4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be4c:	f000 faa2 	bl	800c394 <prvIsQueueFull>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d018      	beq.n	800be88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be58:	3310      	adds	r3, #16
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	4611      	mov	r1, r2
 800be5e:	4618      	mov	r0, r3
 800be60:	f000 ff44 	bl	800ccec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800be64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be66:	f000 fa2d 	bl	800c2c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be6a:	f000 fd73 	bl	800c954 <xTaskResumeAll>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	f47f af7c 	bne.w	800bd6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800be76:	4b0c      	ldr	r3, [pc, #48]	; (800bea8 <xQueueGenericSend+0x1f8>)
 800be78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be7c:	601a      	str	r2, [r3, #0]
 800be7e:	f3bf 8f4f 	dsb	sy
 800be82:	f3bf 8f6f 	isb	sy
 800be86:	e772      	b.n	800bd6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800be88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be8a:	f000 fa1b 	bl	800c2c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be8e:	f000 fd61 	bl	800c954 <xTaskResumeAll>
 800be92:	e76c      	b.n	800bd6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800be94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be96:	f000 fa15 	bl	800c2c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be9a:	f000 fd5b 	bl	800c954 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3738      	adds	r7, #56	; 0x38
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	e000ed04 	.word	0xe000ed04

0800beac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b090      	sub	sp, #64	; 0x40
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	607a      	str	r2, [r7, #4]
 800beb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10a      	bne.n	800beda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec8:	f383 8811 	msr	BASEPRI, r3
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bed6:	bf00      	nop
 800bed8:	e7fe      	b.n	800bed8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d103      	bne.n	800bee8 <xQueueGenericSendFromISR+0x3c>
 800bee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d101      	bne.n	800beec <xQueueGenericSendFromISR+0x40>
 800bee8:	2301      	movs	r3, #1
 800beea:	e000      	b.n	800beee <xQueueGenericSendFromISR+0x42>
 800beec:	2300      	movs	r3, #0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d10a      	bne.n	800bf08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf04:	bf00      	nop
 800bf06:	e7fe      	b.n	800bf06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	d103      	bne.n	800bf16 <xQueueGenericSendFromISR+0x6a>
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d101      	bne.n	800bf1a <xQueueGenericSendFromISR+0x6e>
 800bf16:	2301      	movs	r3, #1
 800bf18:	e000      	b.n	800bf1c <xQueueGenericSendFromISR+0x70>
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d10a      	bne.n	800bf36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf24:	f383 8811 	msr	BASEPRI, r3
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	623b      	str	r3, [r7, #32]
}
 800bf32:	bf00      	nop
 800bf34:	e7fe      	b.n	800bf34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf36:	f001 ff27 	bl	800dd88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bf3a:	f3ef 8211 	mrs	r2, BASEPRI
 800bf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf42:	f383 8811 	msr	BASEPRI, r3
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	61fa      	str	r2, [r7, #28]
 800bf50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bf52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d302      	bcc.n	800bf68 <xQueueGenericSendFromISR+0xbc>
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	d12f      	bne.n	800bfc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf78:	683a      	ldr	r2, [r7, #0]
 800bf7a:	68b9      	ldr	r1, [r7, #8]
 800bf7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf7e:	f000 f911 	bl	800c1a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bf86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf8a:	d112      	bne.n	800bfb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d016      	beq.n	800bfc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf96:	3324      	adds	r3, #36	; 0x24
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f000 fef7 	bl	800cd8c <xTaskRemoveFromEventList>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00e      	beq.n	800bfc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00b      	beq.n	800bfc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2201      	movs	r2, #1
 800bfae:	601a      	str	r2, [r3, #0]
 800bfb0:	e007      	b.n	800bfc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bfb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	b2db      	uxtb	r3, r3
 800bfba:	b25a      	sxtb	r2, r3
 800bfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bfc6:	e001      	b.n	800bfcc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bfd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bfd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3740      	adds	r7, #64	; 0x40
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
	...

0800bfe4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b08c      	sub	sp, #48	; 0x30
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bff0:	2300      	movs	r3, #0
 800bff2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d10a      	bne.n	800c014 <xQueueReceive+0x30>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	623b      	str	r3, [r7, #32]
}
 800c010:	bf00      	nop
 800c012:	e7fe      	b.n	800c012 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d103      	bne.n	800c022 <xQueueReceive+0x3e>
 800c01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d101      	bne.n	800c026 <xQueueReceive+0x42>
 800c022:	2301      	movs	r3, #1
 800c024:	e000      	b.n	800c028 <xQueueReceive+0x44>
 800c026:	2300      	movs	r3, #0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10a      	bne.n	800c042 <xQueueReceive+0x5e>
	__asm volatile
 800c02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c030:	f383 8811 	msr	BASEPRI, r3
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	61fb      	str	r3, [r7, #28]
}
 800c03e:	bf00      	nop
 800c040:	e7fe      	b.n	800c040 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c042:	f001 f865 	bl	800d110 <xTaskGetSchedulerState>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d102      	bne.n	800c052 <xQueueReceive+0x6e>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d101      	bne.n	800c056 <xQueueReceive+0x72>
 800c052:	2301      	movs	r3, #1
 800c054:	e000      	b.n	800c058 <xQueueReceive+0x74>
 800c056:	2300      	movs	r3, #0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d10a      	bne.n	800c072 <xQueueReceive+0x8e>
	__asm volatile
 800c05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c060:	f383 8811 	msr	BASEPRI, r3
 800c064:	f3bf 8f6f 	isb	sy
 800c068:	f3bf 8f4f 	dsb	sy
 800c06c:	61bb      	str	r3, [r7, #24]
}
 800c06e:	bf00      	nop
 800c070:	e7fe      	b.n	800c070 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c072:	f001 fda7 	bl	800dbc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c07a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d01f      	beq.n	800c0c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c082:	68b9      	ldr	r1, [r7, #8]
 800c084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c086:	f000 f8f7 	bl	800c278 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08c:	1e5a      	subs	r2, r3, #1
 800c08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c090:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00f      	beq.n	800c0ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09c:	3310      	adds	r3, #16
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f000 fe74 	bl	800cd8c <xTaskRemoveFromEventList>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d007      	beq.n	800c0ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c0aa:	4b3d      	ldr	r3, [pc, #244]	; (800c1a0 <xQueueReceive+0x1bc>)
 800c0ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0b0:	601a      	str	r2, [r3, #0]
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c0ba:	f001 fdb3 	bl	800dc24 <vPortExitCritical>
				return pdPASS;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	e069      	b.n	800c196 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d103      	bne.n	800c0d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c0c8:	f001 fdac 	bl	800dc24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	e062      	b.n	800c196 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d106      	bne.n	800c0e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0d6:	f107 0310 	add.w	r3, r7, #16
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f000 feba 	bl	800ce54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c0e4:	f001 fd9e 	bl	800dc24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c0e8:	f000 fc26 	bl	800c938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0ec:	f001 fd6a 	bl	800dbc4 <vPortEnterCritical>
 800c0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0f6:	b25b      	sxtb	r3, r3
 800c0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0fc:	d103      	bne.n	800c106 <xQueueReceive+0x122>
 800c0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c100:	2200      	movs	r2, #0
 800c102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c10c:	b25b      	sxtb	r3, r3
 800c10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c112:	d103      	bne.n	800c11c <xQueueReceive+0x138>
 800c114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c116:	2200      	movs	r2, #0
 800c118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c11c:	f001 fd82 	bl	800dc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c120:	1d3a      	adds	r2, r7, #4
 800c122:	f107 0310 	add.w	r3, r7, #16
 800c126:	4611      	mov	r1, r2
 800c128:	4618      	mov	r0, r3
 800c12a:	f000 fea9 	bl	800ce80 <xTaskCheckForTimeOut>
 800c12e:	4603      	mov	r3, r0
 800c130:	2b00      	cmp	r3, #0
 800c132:	d123      	bne.n	800c17c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c136:	f000 f917 	bl	800c368 <prvIsQueueEmpty>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d017      	beq.n	800c170 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	3324      	adds	r3, #36	; 0x24
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	4611      	mov	r1, r2
 800c148:	4618      	mov	r0, r3
 800c14a:	f000 fdcf 	bl	800ccec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c14e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c150:	f000 f8b8 	bl	800c2c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c154:	f000 fbfe 	bl	800c954 <xTaskResumeAll>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d189      	bne.n	800c072 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c15e:	4b10      	ldr	r3, [pc, #64]	; (800c1a0 <xQueueReceive+0x1bc>)
 800c160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c164:	601a      	str	r2, [r3, #0]
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	f3bf 8f6f 	isb	sy
 800c16e:	e780      	b.n	800c072 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c172:	f000 f8a7 	bl	800c2c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c176:	f000 fbed 	bl	800c954 <xTaskResumeAll>
 800c17a:	e77a      	b.n	800c072 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c17c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c17e:	f000 f8a1 	bl	800c2c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c182:	f000 fbe7 	bl	800c954 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c188:	f000 f8ee 	bl	800c368 <prvIsQueueEmpty>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	f43f af6f 	beq.w	800c072 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c194:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c196:	4618      	mov	r0, r3
 800c198:	3730      	adds	r7, #48	; 0x30
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	e000ed04 	.word	0xe000ed04

0800c1a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d10d      	bne.n	800c1de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d14d      	bne.n	800c266 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f000 ffbc 	bl	800d14c <xTaskPriorityDisinherit>
 800c1d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	609a      	str	r2, [r3, #8]
 800c1dc:	e043      	b.n	800c266 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d119      	bne.n	800c218 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6858      	ldr	r0, [r3, #4]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	68b9      	ldr	r1, [r7, #8]
 800c1f0:	f002 f940 	bl	800e474 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	685a      	ldr	r2, [r3, #4]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1fc:	441a      	add	r2, r3
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	685a      	ldr	r2, [r3, #4]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d32b      	bcc.n	800c266 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	605a      	str	r2, [r3, #4]
 800c216:	e026      	b.n	800c266 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	68d8      	ldr	r0, [r3, #12]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c220:	461a      	mov	r2, r3
 800c222:	68b9      	ldr	r1, [r7, #8]
 800c224:	f002 f926 	bl	800e474 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	68da      	ldr	r2, [r3, #12]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c230:	425b      	negs	r3, r3
 800c232:	441a      	add	r2, r3
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	68da      	ldr	r2, [r3, #12]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	429a      	cmp	r2, r3
 800c242:	d207      	bcs.n	800c254 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	689a      	ldr	r2, [r3, #8]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24c:	425b      	negs	r3, r3
 800c24e:	441a      	add	r2, r3
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b02      	cmp	r3, #2
 800c258:	d105      	bne.n	800c266 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d002      	beq.n	800c266 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	3b01      	subs	r3, #1
 800c264:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	1c5a      	adds	r2, r3, #1
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c26e:	697b      	ldr	r3, [r7, #20]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3718      	adds	r7, #24
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c286:	2b00      	cmp	r3, #0
 800c288:	d018      	beq.n	800c2bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	68da      	ldr	r2, [r3, #12]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c292:	441a      	add	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	68da      	ldr	r2, [r3, #12]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d303      	bcc.n	800c2ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	68d9      	ldr	r1, [r3, #12]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	6838      	ldr	r0, [r7, #0]
 800c2b8:	f002 f8dc 	bl	800e474 <memcpy>
	}
}
 800c2bc:	bf00      	nop
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c2cc:	f001 fc7a 	bl	800dbc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2d8:	e011      	b.n	800c2fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d012      	beq.n	800c308 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	3324      	adds	r3, #36	; 0x24
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f000 fd50 	bl	800cd8c <xTaskRemoveFromEventList>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d001      	beq.n	800c2f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2f2:	f000 fe27 	bl	800cf44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2f6:	7bfb      	ldrb	r3, [r7, #15]
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c302:	2b00      	cmp	r3, #0
 800c304:	dce9      	bgt.n	800c2da <prvUnlockQueue+0x16>
 800c306:	e000      	b.n	800c30a <prvUnlockQueue+0x46>
					break;
 800c308:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	22ff      	movs	r2, #255	; 0xff
 800c30e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c312:	f001 fc87 	bl	800dc24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c316:	f001 fc55 	bl	800dbc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c320:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c322:	e011      	b.n	800c348 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d012      	beq.n	800c352 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	3310      	adds	r3, #16
 800c330:	4618      	mov	r0, r3
 800c332:	f000 fd2b 	bl	800cd8c <xTaskRemoveFromEventList>
 800c336:	4603      	mov	r3, r0
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d001      	beq.n	800c340 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c33c:	f000 fe02 	bl	800cf44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c340:	7bbb      	ldrb	r3, [r7, #14]
 800c342:	3b01      	subs	r3, #1
 800c344:	b2db      	uxtb	r3, r3
 800c346:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c348:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	dce9      	bgt.n	800c324 <prvUnlockQueue+0x60>
 800c350:	e000      	b.n	800c354 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c352:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	22ff      	movs	r2, #255	; 0xff
 800c358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c35c:	f001 fc62 	bl	800dc24 <vPortExitCritical>
}
 800c360:	bf00      	nop
 800c362:	3710      	adds	r7, #16
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c370:	f001 fc28 	bl	800dbc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d102      	bne.n	800c382 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c37c:	2301      	movs	r3, #1
 800c37e:	60fb      	str	r3, [r7, #12]
 800c380:	e001      	b.n	800c386 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c382:	2300      	movs	r3, #0
 800c384:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c386:	f001 fc4d 	bl	800dc24 <vPortExitCritical>

	return xReturn;
 800c38a:	68fb      	ldr	r3, [r7, #12]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c39c:	f001 fc12 	bl	800dbc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d102      	bne.n	800c3b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	60fb      	str	r3, [r7, #12]
 800c3b0:	e001      	b.n	800c3b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3b6:	f001 fc35 	bl	800dc24 <vPortExitCritical>

	return xReturn;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3710      	adds	r7, #16
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	60fb      	str	r3, [r7, #12]
 800c3d2:	e014      	b.n	800c3fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c3d4:	4a0f      	ldr	r2, [pc, #60]	; (800c414 <vQueueAddToRegistry+0x50>)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10b      	bne.n	800c3f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c3e0:	490c      	ldr	r1, [pc, #48]	; (800c414 <vQueueAddToRegistry+0x50>)
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	683a      	ldr	r2, [r7, #0]
 800c3e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c3ea:	4a0a      	ldr	r2, [pc, #40]	; (800c414 <vQueueAddToRegistry+0x50>)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	00db      	lsls	r3, r3, #3
 800c3f0:	4413      	add	r3, r2
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c3f6:	e006      	b.n	800c406 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2b07      	cmp	r3, #7
 800c402:	d9e7      	bls.n	800c3d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c404:	bf00      	nop
 800c406:	bf00      	nop
 800c408:	3714      	adds	r7, #20
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	20001708 	.word	0x20001708

0800c418 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b086      	sub	sp, #24
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c428:	f001 fbcc 	bl	800dbc4 <vPortEnterCritical>
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c432:	b25b      	sxtb	r3, r3
 800c434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c438:	d103      	bne.n	800c442 <vQueueWaitForMessageRestricted+0x2a>
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	2200      	movs	r2, #0
 800c43e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c448:	b25b      	sxtb	r3, r3
 800c44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c44e:	d103      	bne.n	800c458 <vQueueWaitForMessageRestricted+0x40>
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	2200      	movs	r2, #0
 800c454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c458:	f001 fbe4 	bl	800dc24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c460:	2b00      	cmp	r3, #0
 800c462:	d106      	bne.n	800c472 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	3324      	adds	r3, #36	; 0x24
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	68b9      	ldr	r1, [r7, #8]
 800c46c:	4618      	mov	r0, r3
 800c46e:	f000 fc61 	bl	800cd34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c472:	6978      	ldr	r0, [r7, #20]
 800c474:	f7ff ff26 	bl	800c2c4 <prvUnlockQueue>
	}
 800c478:	bf00      	nop
 800c47a:	3718      	adds	r7, #24
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c480:	b580      	push	{r7, lr}
 800c482:	b08e      	sub	sp, #56	; 0x38
 800c484:	af04      	add	r7, sp, #16
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
 800c48c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10a      	bne.n	800c4aa <xTaskCreateStatic+0x2a>
	__asm volatile
 800c494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	623b      	str	r3, [r7, #32]
}
 800c4a6:	bf00      	nop
 800c4a8:	e7fe      	b.n	800c4a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10a      	bne.n	800c4c6 <xTaskCreateStatic+0x46>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	61fb      	str	r3, [r7, #28]
}
 800c4c2:	bf00      	nop
 800c4c4:	e7fe      	b.n	800c4c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c4c6:	23bc      	movs	r3, #188	; 0xbc
 800c4c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	2bbc      	cmp	r3, #188	; 0xbc
 800c4ce:	d00a      	beq.n	800c4e6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	61bb      	str	r3, [r7, #24]
}
 800c4e2:	bf00      	nop
 800c4e4:	e7fe      	b.n	800c4e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c4e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d01e      	beq.n	800c52c <xTaskCreateStatic+0xac>
 800c4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d01b      	beq.n	800c52c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c500:	2202      	movs	r2, #2
 800c502:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c506:	2300      	movs	r3, #0
 800c508:	9303      	str	r3, [sp, #12]
 800c50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50c:	9302      	str	r3, [sp, #8]
 800c50e:	f107 0314 	add.w	r3, r7, #20
 800c512:	9301      	str	r3, [sp, #4]
 800c514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c516:	9300      	str	r3, [sp, #0]
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	68b9      	ldr	r1, [r7, #8]
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	f000 f850 	bl	800c5c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c526:	f000 f8f3 	bl	800c710 <prvAddNewTaskToReadyList>
 800c52a:	e001      	b.n	800c530 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c52c:	2300      	movs	r3, #0
 800c52e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c530:	697b      	ldr	r3, [r7, #20]
	}
 800c532:	4618      	mov	r0, r3
 800c534:	3728      	adds	r7, #40	; 0x28
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c53a:	b580      	push	{r7, lr}
 800c53c:	b08c      	sub	sp, #48	; 0x30
 800c53e:	af04      	add	r7, sp, #16
 800c540:	60f8      	str	r0, [r7, #12]
 800c542:	60b9      	str	r1, [r7, #8]
 800c544:	603b      	str	r3, [r7, #0]
 800c546:	4613      	mov	r3, r2
 800c548:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c54a:	88fb      	ldrh	r3, [r7, #6]
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4618      	mov	r0, r3
 800c550:	f001 fc5a 	bl	800de08 <pvPortMalloc>
 800c554:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00e      	beq.n	800c57a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c55c:	20bc      	movs	r0, #188	; 0xbc
 800c55e:	f001 fc53 	bl	800de08 <pvPortMalloc>
 800c562:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d003      	beq.n	800c572 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	697a      	ldr	r2, [r7, #20]
 800c56e:	631a      	str	r2, [r3, #48]	; 0x30
 800c570:	e005      	b.n	800c57e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c572:	6978      	ldr	r0, [r7, #20]
 800c574:	f001 fd14 	bl	800dfa0 <vPortFree>
 800c578:	e001      	b.n	800c57e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c57a:	2300      	movs	r3, #0
 800c57c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d017      	beq.n	800c5b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	2200      	movs	r2, #0
 800c588:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c58c:	88fa      	ldrh	r2, [r7, #6]
 800c58e:	2300      	movs	r3, #0
 800c590:	9303      	str	r3, [sp, #12]
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	9302      	str	r3, [sp, #8]
 800c596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c598:	9301      	str	r3, [sp, #4]
 800c59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	68b9      	ldr	r1, [r7, #8]
 800c5a2:	68f8      	ldr	r0, [r7, #12]
 800c5a4:	f000 f80e 	bl	800c5c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c5a8:	69f8      	ldr	r0, [r7, #28]
 800c5aa:	f000 f8b1 	bl	800c710 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	61bb      	str	r3, [r7, #24]
 800c5b2:	e002      	b.n	800c5ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c5b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c5ba:	69bb      	ldr	r3, [r7, #24]
	}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3720      	adds	r7, #32
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b088      	sub	sp, #32
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
 800c5d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	461a      	mov	r2, r3
 800c5dc:	21a5      	movs	r1, #165	; 0xa5
 800c5de:	f001 ff57 	bl	800e490 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5e6:	6879      	ldr	r1, [r7, #4]
 800c5e8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c5ec:	440b      	add	r3, r1
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	4413      	add	r3, r2
 800c5f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c5f4:	69bb      	ldr	r3, [r7, #24]
 800c5f6:	f023 0307 	bic.w	r3, r3, #7
 800c5fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	f003 0307 	and.w	r3, r3, #7
 800c602:	2b00      	cmp	r3, #0
 800c604:	d00a      	beq.n	800c61c <prvInitialiseNewTask+0x58>
	__asm volatile
 800c606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60a:	f383 8811 	msr	BASEPRI, r3
 800c60e:	f3bf 8f6f 	isb	sy
 800c612:	f3bf 8f4f 	dsb	sy
 800c616:	617b      	str	r3, [r7, #20]
}
 800c618:	bf00      	nop
 800c61a:	e7fe      	b.n	800c61a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d01f      	beq.n	800c662 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c622:	2300      	movs	r3, #0
 800c624:	61fb      	str	r3, [r7, #28]
 800c626:	e012      	b.n	800c64e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c628:	68ba      	ldr	r2, [r7, #8]
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	4413      	add	r3, r2
 800c62e:	7819      	ldrb	r1, [r3, #0]
 800c630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	4413      	add	r3, r2
 800c636:	3334      	adds	r3, #52	; 0x34
 800c638:	460a      	mov	r2, r1
 800c63a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c63c:	68ba      	ldr	r2, [r7, #8]
 800c63e:	69fb      	ldr	r3, [r7, #28]
 800c640:	4413      	add	r3, r2
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d006      	beq.n	800c656 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	3301      	adds	r3, #1
 800c64c:	61fb      	str	r3, [r7, #28]
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	2b0f      	cmp	r3, #15
 800c652:	d9e9      	bls.n	800c628 <prvInitialiseNewTask+0x64>
 800c654:	e000      	b.n	800c658 <prvInitialiseNewTask+0x94>
			{
				break;
 800c656:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65a:	2200      	movs	r2, #0
 800c65c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c660:	e003      	b.n	800c66a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c664:	2200      	movs	r2, #0
 800c666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66c:	2b37      	cmp	r3, #55	; 0x37
 800c66e:	d901      	bls.n	800c674 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c670:	2337      	movs	r3, #55	; 0x37
 800c672:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c678:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c67e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c682:	2200      	movs	r2, #0
 800c684:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c688:	3304      	adds	r3, #4
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7ff f978 	bl	800b980 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c692:	3318      	adds	r3, #24
 800c694:	4618      	mov	r0, r3
 800c696:	f7ff f973 	bl	800b980 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c69e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c2:	3354      	adds	r3, #84	; 0x54
 800c6c4:	2260      	movs	r2, #96	; 0x60
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f001 fee1 	bl	800e490 <memset>
 800c6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d0:	4a0c      	ldr	r2, [pc, #48]	; (800c704 <prvInitialiseNewTask+0x140>)
 800c6d2:	659a      	str	r2, [r3, #88]	; 0x58
 800c6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d6:	4a0c      	ldr	r2, [pc, #48]	; (800c708 <prvInitialiseNewTask+0x144>)
 800c6d8:	65da      	str	r2, [r3, #92]	; 0x5c
 800c6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6dc:	4a0b      	ldr	r2, [pc, #44]	; (800c70c <prvInitialiseNewTask+0x148>)
 800c6de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c6e0:	683a      	ldr	r2, [r7, #0]
 800c6e2:	68f9      	ldr	r1, [r7, #12]
 800c6e4:	69b8      	ldr	r0, [r7, #24]
 800c6e6:	f001 f941 	bl	800d96c <pxPortInitialiseStack>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d002      	beq.n	800c6fc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6fc:	bf00      	nop
 800c6fe:	3720      	adds	r7, #32
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	08010568 	.word	0x08010568
 800c708:	08010588 	.word	0x08010588
 800c70c:	08010548 	.word	0x08010548

0800c710 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c718:	f001 fa54 	bl	800dbc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c71c:	4b2d      	ldr	r3, [pc, #180]	; (800c7d4 <prvAddNewTaskToReadyList+0xc4>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	3301      	adds	r3, #1
 800c722:	4a2c      	ldr	r2, [pc, #176]	; (800c7d4 <prvAddNewTaskToReadyList+0xc4>)
 800c724:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c726:	4b2c      	ldr	r3, [pc, #176]	; (800c7d8 <prvAddNewTaskToReadyList+0xc8>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d109      	bne.n	800c742 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c72e:	4a2a      	ldr	r2, [pc, #168]	; (800c7d8 <prvAddNewTaskToReadyList+0xc8>)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c734:	4b27      	ldr	r3, [pc, #156]	; (800c7d4 <prvAddNewTaskToReadyList+0xc4>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d110      	bne.n	800c75e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c73c:	f000 fc26 	bl	800cf8c <prvInitialiseTaskLists>
 800c740:	e00d      	b.n	800c75e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c742:	4b26      	ldr	r3, [pc, #152]	; (800c7dc <prvAddNewTaskToReadyList+0xcc>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d109      	bne.n	800c75e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c74a:	4b23      	ldr	r3, [pc, #140]	; (800c7d8 <prvAddNewTaskToReadyList+0xc8>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c754:	429a      	cmp	r2, r3
 800c756:	d802      	bhi.n	800c75e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c758:	4a1f      	ldr	r2, [pc, #124]	; (800c7d8 <prvAddNewTaskToReadyList+0xc8>)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c75e:	4b20      	ldr	r3, [pc, #128]	; (800c7e0 <prvAddNewTaskToReadyList+0xd0>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3301      	adds	r3, #1
 800c764:	4a1e      	ldr	r2, [pc, #120]	; (800c7e0 <prvAddNewTaskToReadyList+0xd0>)
 800c766:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c768:	4b1d      	ldr	r3, [pc, #116]	; (800c7e0 <prvAddNewTaskToReadyList+0xd0>)
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c774:	4b1b      	ldr	r3, [pc, #108]	; (800c7e4 <prvAddNewTaskToReadyList+0xd4>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d903      	bls.n	800c784 <prvAddNewTaskToReadyList+0x74>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c780:	4a18      	ldr	r2, [pc, #96]	; (800c7e4 <prvAddNewTaskToReadyList+0xd4>)
 800c782:	6013      	str	r3, [r2, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c788:	4613      	mov	r3, r2
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4413      	add	r3, r2
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	4a15      	ldr	r2, [pc, #84]	; (800c7e8 <prvAddNewTaskToReadyList+0xd8>)
 800c792:	441a      	add	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	3304      	adds	r3, #4
 800c798:	4619      	mov	r1, r3
 800c79a:	4610      	mov	r0, r2
 800c79c:	f7ff f8fd 	bl	800b99a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c7a0:	f001 fa40 	bl	800dc24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c7a4:	4b0d      	ldr	r3, [pc, #52]	; (800c7dc <prvAddNewTaskToReadyList+0xcc>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00e      	beq.n	800c7ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c7ac:	4b0a      	ldr	r3, [pc, #40]	; (800c7d8 <prvAddNewTaskToReadyList+0xc8>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d207      	bcs.n	800c7ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c7ba:	4b0c      	ldr	r3, [pc, #48]	; (800c7ec <prvAddNewTaskToReadyList+0xdc>)
 800c7bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7c0:	601a      	str	r2, [r3, #0]
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7ca:	bf00      	nop
 800c7cc:	3708      	adds	r7, #8
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	20001c1c 	.word	0x20001c1c
 800c7d8:	20001748 	.word	0x20001748
 800c7dc:	20001c28 	.word	0x20001c28
 800c7e0:	20001c38 	.word	0x20001c38
 800c7e4:	20001c24 	.word	0x20001c24
 800c7e8:	2000174c 	.word	0x2000174c
 800c7ec:	e000ed04 	.word	0xe000ed04

0800c7f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d017      	beq.n	800c832 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c802:	4b13      	ldr	r3, [pc, #76]	; (800c850 <vTaskDelay+0x60>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00a      	beq.n	800c820 <vTaskDelay+0x30>
	__asm volatile
 800c80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80e:	f383 8811 	msr	BASEPRI, r3
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	60bb      	str	r3, [r7, #8]
}
 800c81c:	bf00      	nop
 800c81e:	e7fe      	b.n	800c81e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c820:	f000 f88a 	bl	800c938 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c824:	2100      	movs	r1, #0
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 fcfe 	bl	800d228 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c82c:	f000 f892 	bl	800c954 <xTaskResumeAll>
 800c830:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d107      	bne.n	800c848 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c838:	4b06      	ldr	r3, [pc, #24]	; (800c854 <vTaskDelay+0x64>)
 800c83a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c83e:	601a      	str	r2, [r3, #0]
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c848:	bf00      	nop
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	20001c44 	.word	0x20001c44
 800c854:	e000ed04 	.word	0xe000ed04

0800c858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b08a      	sub	sp, #40	; 0x28
 800c85c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c85e:	2300      	movs	r3, #0
 800c860:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c862:	2300      	movs	r3, #0
 800c864:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c866:	463a      	mov	r2, r7
 800c868:	1d39      	adds	r1, r7, #4
 800c86a:	f107 0308 	add.w	r3, r7, #8
 800c86e:	4618      	mov	r0, r3
 800c870:	f7ff f832 	bl	800b8d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c874:	6839      	ldr	r1, [r7, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	9202      	str	r2, [sp, #8]
 800c87c:	9301      	str	r3, [sp, #4]
 800c87e:	2300      	movs	r3, #0
 800c880:	9300      	str	r3, [sp, #0]
 800c882:	2300      	movs	r3, #0
 800c884:	460a      	mov	r2, r1
 800c886:	4924      	ldr	r1, [pc, #144]	; (800c918 <vTaskStartScheduler+0xc0>)
 800c888:	4824      	ldr	r0, [pc, #144]	; (800c91c <vTaskStartScheduler+0xc4>)
 800c88a:	f7ff fdf9 	bl	800c480 <xTaskCreateStatic>
 800c88e:	4603      	mov	r3, r0
 800c890:	4a23      	ldr	r2, [pc, #140]	; (800c920 <vTaskStartScheduler+0xc8>)
 800c892:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c894:	4b22      	ldr	r3, [pc, #136]	; (800c920 <vTaskStartScheduler+0xc8>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c89c:	2301      	movs	r3, #1
 800c89e:	617b      	str	r3, [r7, #20]
 800c8a0:	e001      	b.n	800c8a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d102      	bne.n	800c8b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c8ac:	f000 fd10 	bl	800d2d0 <xTimerCreateTimerTask>
 800c8b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d11b      	bne.n	800c8f0 <vTaskStartScheduler+0x98>
	__asm volatile
 800c8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8bc:	f383 8811 	msr	BASEPRI, r3
 800c8c0:	f3bf 8f6f 	isb	sy
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	613b      	str	r3, [r7, #16]
}
 800c8ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c8cc:	4b15      	ldr	r3, [pc, #84]	; (800c924 <vTaskStartScheduler+0xcc>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	3354      	adds	r3, #84	; 0x54
 800c8d2:	4a15      	ldr	r2, [pc, #84]	; (800c928 <vTaskStartScheduler+0xd0>)
 800c8d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c8d6:	4b15      	ldr	r3, [pc, #84]	; (800c92c <vTaskStartScheduler+0xd4>)
 800c8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c8de:	4b14      	ldr	r3, [pc, #80]	; (800c930 <vTaskStartScheduler+0xd8>)
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c8e4:	4b13      	ldr	r3, [pc, #76]	; (800c934 <vTaskStartScheduler+0xdc>)
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c8ea:	f001 f8c9 	bl	800da80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c8ee:	e00e      	b.n	800c90e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f6:	d10a      	bne.n	800c90e <vTaskStartScheduler+0xb6>
	__asm volatile
 800c8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fc:	f383 8811 	msr	BASEPRI, r3
 800c900:	f3bf 8f6f 	isb	sy
 800c904:	f3bf 8f4f 	dsb	sy
 800c908:	60fb      	str	r3, [r7, #12]
}
 800c90a:	bf00      	nop
 800c90c:	e7fe      	b.n	800c90c <vTaskStartScheduler+0xb4>
}
 800c90e:	bf00      	nop
 800c910:	3718      	adds	r7, #24
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	08010440 	.word	0x08010440
 800c91c:	0800cf5d 	.word	0x0800cf5d
 800c920:	20001c40 	.word	0x20001c40
 800c924:	20001748 	.word	0x20001748
 800c928:	20000014 	.word	0x20000014
 800c92c:	20001c3c 	.word	0x20001c3c
 800c930:	20001c28 	.word	0x20001c28
 800c934:	20001c20 	.word	0x20001c20

0800c938 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c938:	b480      	push	{r7}
 800c93a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c93c:	4b04      	ldr	r3, [pc, #16]	; (800c950 <vTaskSuspendAll+0x18>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	3301      	adds	r3, #1
 800c942:	4a03      	ldr	r2, [pc, #12]	; (800c950 <vTaskSuspendAll+0x18>)
 800c944:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c946:	bf00      	nop
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr
 800c950:	20001c44 	.word	0x20001c44

0800c954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c95a:	2300      	movs	r3, #0
 800c95c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c95e:	2300      	movs	r3, #0
 800c960:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c962:	4b42      	ldr	r3, [pc, #264]	; (800ca6c <xTaskResumeAll+0x118>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d10a      	bne.n	800c980 <xTaskResumeAll+0x2c>
	__asm volatile
 800c96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c96e:	f383 8811 	msr	BASEPRI, r3
 800c972:	f3bf 8f6f 	isb	sy
 800c976:	f3bf 8f4f 	dsb	sy
 800c97a:	603b      	str	r3, [r7, #0]
}
 800c97c:	bf00      	nop
 800c97e:	e7fe      	b.n	800c97e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c980:	f001 f920 	bl	800dbc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c984:	4b39      	ldr	r3, [pc, #228]	; (800ca6c <xTaskResumeAll+0x118>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	3b01      	subs	r3, #1
 800c98a:	4a38      	ldr	r2, [pc, #224]	; (800ca6c <xTaskResumeAll+0x118>)
 800c98c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c98e:	4b37      	ldr	r3, [pc, #220]	; (800ca6c <xTaskResumeAll+0x118>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d162      	bne.n	800ca5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c996:	4b36      	ldr	r3, [pc, #216]	; (800ca70 <xTaskResumeAll+0x11c>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d05e      	beq.n	800ca5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c99e:	e02f      	b.n	800ca00 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9a0:	4b34      	ldr	r3, [pc, #208]	; (800ca74 <xTaskResumeAll+0x120>)
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	3318      	adds	r3, #24
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7ff f851 	bl	800ba54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	3304      	adds	r3, #4
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7ff f84c 	bl	800ba54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9c0:	4b2d      	ldr	r3, [pc, #180]	; (800ca78 <xTaskResumeAll+0x124>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d903      	bls.n	800c9d0 <xTaskResumeAll+0x7c>
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9cc:	4a2a      	ldr	r2, [pc, #168]	; (800ca78 <xTaskResumeAll+0x124>)
 800c9ce:	6013      	str	r3, [r2, #0]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	4413      	add	r3, r2
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	4a27      	ldr	r2, [pc, #156]	; (800ca7c <xTaskResumeAll+0x128>)
 800c9de:	441a      	add	r2, r3
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	3304      	adds	r3, #4
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	4610      	mov	r0, r2
 800c9e8:	f7fe ffd7 	bl	800b99a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f0:	4b23      	ldr	r3, [pc, #140]	; (800ca80 <xTaskResumeAll+0x12c>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d302      	bcc.n	800ca00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c9fa:	4b22      	ldr	r3, [pc, #136]	; (800ca84 <xTaskResumeAll+0x130>)
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca00:	4b1c      	ldr	r3, [pc, #112]	; (800ca74 <xTaskResumeAll+0x120>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d1cb      	bne.n	800c9a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d001      	beq.n	800ca12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ca0e:	f000 fb5f 	bl	800d0d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ca12:	4b1d      	ldr	r3, [pc, #116]	; (800ca88 <xTaskResumeAll+0x134>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d010      	beq.n	800ca40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ca1e:	f000 f847 	bl	800cab0 <xTaskIncrementTick>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ca28:	4b16      	ldr	r3, [pc, #88]	; (800ca84 <xTaskResumeAll+0x130>)
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	3b01      	subs	r3, #1
 800ca32:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1f1      	bne.n	800ca1e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ca3a:	4b13      	ldr	r3, [pc, #76]	; (800ca88 <xTaskResumeAll+0x134>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ca40:	4b10      	ldr	r3, [pc, #64]	; (800ca84 <xTaskResumeAll+0x130>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d009      	beq.n	800ca5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca4c:	4b0f      	ldr	r3, [pc, #60]	; (800ca8c <xTaskResumeAll+0x138>)
 800ca4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca52:	601a      	str	r2, [r3, #0]
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca5c:	f001 f8e2 	bl	800dc24 <vPortExitCritical>

	return xAlreadyYielded;
 800ca60:	68bb      	ldr	r3, [r7, #8]
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	20001c44 	.word	0x20001c44
 800ca70:	20001c1c 	.word	0x20001c1c
 800ca74:	20001bdc 	.word	0x20001bdc
 800ca78:	20001c24 	.word	0x20001c24
 800ca7c:	2000174c 	.word	0x2000174c
 800ca80:	20001748 	.word	0x20001748
 800ca84:	20001c30 	.word	0x20001c30
 800ca88:	20001c2c 	.word	0x20001c2c
 800ca8c:	e000ed04 	.word	0xe000ed04

0800ca90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ca96:	4b05      	ldr	r3, [pc, #20]	; (800caac <xTaskGetTickCount+0x1c>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ca9c:	687b      	ldr	r3, [r7, #4]
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	370c      	adds	r7, #12
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	20001c20 	.word	0x20001c20

0800cab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b086      	sub	sp, #24
 800cab4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cab6:	2300      	movs	r3, #0
 800cab8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caba:	4b4f      	ldr	r3, [pc, #316]	; (800cbf8 <xTaskIncrementTick+0x148>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	f040 808f 	bne.w	800cbe2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cac4:	4b4d      	ldr	r3, [pc, #308]	; (800cbfc <xTaskIncrementTick+0x14c>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	3301      	adds	r3, #1
 800caca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cacc:	4a4b      	ldr	r2, [pc, #300]	; (800cbfc <xTaskIncrementTick+0x14c>)
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d120      	bne.n	800cb1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cad8:	4b49      	ldr	r3, [pc, #292]	; (800cc00 <xTaskIncrementTick+0x150>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00a      	beq.n	800caf8 <xTaskIncrementTick+0x48>
	__asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	603b      	str	r3, [r7, #0]
}
 800caf4:	bf00      	nop
 800caf6:	e7fe      	b.n	800caf6 <xTaskIncrementTick+0x46>
 800caf8:	4b41      	ldr	r3, [pc, #260]	; (800cc00 <xTaskIncrementTick+0x150>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	60fb      	str	r3, [r7, #12]
 800cafe:	4b41      	ldr	r3, [pc, #260]	; (800cc04 <xTaskIncrementTick+0x154>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4a3f      	ldr	r2, [pc, #252]	; (800cc00 <xTaskIncrementTick+0x150>)
 800cb04:	6013      	str	r3, [r2, #0]
 800cb06:	4a3f      	ldr	r2, [pc, #252]	; (800cc04 <xTaskIncrementTick+0x154>)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6013      	str	r3, [r2, #0]
 800cb0c:	4b3e      	ldr	r3, [pc, #248]	; (800cc08 <xTaskIncrementTick+0x158>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	3301      	adds	r3, #1
 800cb12:	4a3d      	ldr	r2, [pc, #244]	; (800cc08 <xTaskIncrementTick+0x158>)
 800cb14:	6013      	str	r3, [r2, #0]
 800cb16:	f000 fadb 	bl	800d0d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cb1a:	4b3c      	ldr	r3, [pc, #240]	; (800cc0c <xTaskIncrementTick+0x15c>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	693a      	ldr	r2, [r7, #16]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d349      	bcc.n	800cbb8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb24:	4b36      	ldr	r3, [pc, #216]	; (800cc00 <xTaskIncrementTick+0x150>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d104      	bne.n	800cb38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb2e:	4b37      	ldr	r3, [pc, #220]	; (800cc0c <xTaskIncrementTick+0x15c>)
 800cb30:	f04f 32ff 	mov.w	r2, #4294967295
 800cb34:	601a      	str	r2, [r3, #0]
					break;
 800cb36:	e03f      	b.n	800cbb8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb38:	4b31      	ldr	r3, [pc, #196]	; (800cc00 <xTaskIncrementTick+0x150>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cb48:	693a      	ldr	r2, [r7, #16]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d203      	bcs.n	800cb58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cb50:	4a2e      	ldr	r2, [pc, #184]	; (800cc0c <xTaskIncrementTick+0x15c>)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cb56:	e02f      	b.n	800cbb8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fe ff79 	bl	800ba54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d004      	beq.n	800cb74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	3318      	adds	r3, #24
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fe ff70 	bl	800ba54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb78:	4b25      	ldr	r3, [pc, #148]	; (800cc10 <xTaskIncrementTick+0x160>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d903      	bls.n	800cb88 <xTaskIncrementTick+0xd8>
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb84:	4a22      	ldr	r2, [pc, #136]	; (800cc10 <xTaskIncrementTick+0x160>)
 800cb86:	6013      	str	r3, [r2, #0]
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	4413      	add	r3, r2
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	4a1f      	ldr	r2, [pc, #124]	; (800cc14 <xTaskIncrementTick+0x164>)
 800cb96:	441a      	add	r2, r3
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	3304      	adds	r3, #4
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	4610      	mov	r0, r2
 800cba0:	f7fe fefb 	bl	800b99a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba8:	4b1b      	ldr	r3, [pc, #108]	; (800cc18 <xTaskIncrementTick+0x168>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d3b8      	bcc.n	800cb24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbb6:	e7b5      	b.n	800cb24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cbb8:	4b17      	ldr	r3, [pc, #92]	; (800cc18 <xTaskIncrementTick+0x168>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbbe:	4915      	ldr	r1, [pc, #84]	; (800cc14 <xTaskIncrementTick+0x164>)
 800cbc0:	4613      	mov	r3, r2
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	4413      	add	r3, r2
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	440b      	add	r3, r1
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d901      	bls.n	800cbd4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cbd4:	4b11      	ldr	r3, [pc, #68]	; (800cc1c <xTaskIncrementTick+0x16c>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d007      	beq.n	800cbec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	617b      	str	r3, [r7, #20]
 800cbe0:	e004      	b.n	800cbec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cbe2:	4b0f      	ldr	r3, [pc, #60]	; (800cc20 <xTaskIncrementTick+0x170>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	4a0d      	ldr	r2, [pc, #52]	; (800cc20 <xTaskIncrementTick+0x170>)
 800cbea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cbec:	697b      	ldr	r3, [r7, #20]
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3718      	adds	r7, #24
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20001c44 	.word	0x20001c44
 800cbfc:	20001c20 	.word	0x20001c20
 800cc00:	20001bd4 	.word	0x20001bd4
 800cc04:	20001bd8 	.word	0x20001bd8
 800cc08:	20001c34 	.word	0x20001c34
 800cc0c:	20001c3c 	.word	0x20001c3c
 800cc10:	20001c24 	.word	0x20001c24
 800cc14:	2000174c 	.word	0x2000174c
 800cc18:	20001748 	.word	0x20001748
 800cc1c:	20001c30 	.word	0x20001c30
 800cc20:	20001c2c 	.word	0x20001c2c

0800cc24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cc24:	b480      	push	{r7}
 800cc26:	b085      	sub	sp, #20
 800cc28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc2a:	4b2a      	ldr	r3, [pc, #168]	; (800ccd4 <vTaskSwitchContext+0xb0>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d003      	beq.n	800cc3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cc32:	4b29      	ldr	r3, [pc, #164]	; (800ccd8 <vTaskSwitchContext+0xb4>)
 800cc34:	2201      	movs	r2, #1
 800cc36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cc38:	e046      	b.n	800ccc8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cc3a:	4b27      	ldr	r3, [pc, #156]	; (800ccd8 <vTaskSwitchContext+0xb4>)
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc40:	4b26      	ldr	r3, [pc, #152]	; (800ccdc <vTaskSwitchContext+0xb8>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	60fb      	str	r3, [r7, #12]
 800cc46:	e010      	b.n	800cc6a <vTaskSwitchContext+0x46>
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d10a      	bne.n	800cc64 <vTaskSwitchContext+0x40>
	__asm volatile
 800cc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	607b      	str	r3, [r7, #4]
}
 800cc60:	bf00      	nop
 800cc62:	e7fe      	b.n	800cc62 <vTaskSwitchContext+0x3e>
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	3b01      	subs	r3, #1
 800cc68:	60fb      	str	r3, [r7, #12]
 800cc6a:	491d      	ldr	r1, [pc, #116]	; (800cce0 <vTaskSwitchContext+0xbc>)
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	4613      	mov	r3, r2
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	4413      	add	r3, r2
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	440b      	add	r3, r1
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d0e4      	beq.n	800cc48 <vTaskSwitchContext+0x24>
 800cc7e:	68fa      	ldr	r2, [r7, #12]
 800cc80:	4613      	mov	r3, r2
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	4413      	add	r3, r2
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	4a15      	ldr	r2, [pc, #84]	; (800cce0 <vTaskSwitchContext+0xbc>)
 800cc8a:	4413      	add	r3, r2
 800cc8c:	60bb      	str	r3, [r7, #8]
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	685a      	ldr	r2, [r3, #4]
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	605a      	str	r2, [r3, #4]
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	685a      	ldr	r2, [r3, #4]
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	3308      	adds	r3, #8
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d104      	bne.n	800ccae <vTaskSwitchContext+0x8a>
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	685a      	ldr	r2, [r3, #4]
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	605a      	str	r2, [r3, #4]
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	4a0b      	ldr	r2, [pc, #44]	; (800cce4 <vTaskSwitchContext+0xc0>)
 800ccb6:	6013      	str	r3, [r2, #0]
 800ccb8:	4a08      	ldr	r2, [pc, #32]	; (800ccdc <vTaskSwitchContext+0xb8>)
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ccbe:	4b09      	ldr	r3, [pc, #36]	; (800cce4 <vTaskSwitchContext+0xc0>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	3354      	adds	r3, #84	; 0x54
 800ccc4:	4a08      	ldr	r2, [pc, #32]	; (800cce8 <vTaskSwitchContext+0xc4>)
 800ccc6:	6013      	str	r3, [r2, #0]
}
 800ccc8:	bf00      	nop
 800ccca:	3714      	adds	r7, #20
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr
 800ccd4:	20001c44 	.word	0x20001c44
 800ccd8:	20001c30 	.word	0x20001c30
 800ccdc:	20001c24 	.word	0x20001c24
 800cce0:	2000174c 	.word	0x2000174c
 800cce4:	20001748 	.word	0x20001748
 800cce8:	20000014 	.word	0x20000014

0800ccec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d10a      	bne.n	800cd12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ccfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd00:	f383 8811 	msr	BASEPRI, r3
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	60fb      	str	r3, [r7, #12]
}
 800cd0e:	bf00      	nop
 800cd10:	e7fe      	b.n	800cd10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd12:	4b07      	ldr	r3, [pc, #28]	; (800cd30 <vTaskPlaceOnEventList+0x44>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	3318      	adds	r3, #24
 800cd18:	4619      	mov	r1, r3
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f7fe fe61 	bl	800b9e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd20:	2101      	movs	r1, #1
 800cd22:	6838      	ldr	r0, [r7, #0]
 800cd24:	f000 fa80 	bl	800d228 <prvAddCurrentTaskToDelayedList>
}
 800cd28:	bf00      	nop
 800cd2a:	3710      	adds	r7, #16
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	20001748 	.word	0x20001748

0800cd34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b086      	sub	sp, #24
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d10a      	bne.n	800cd5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	617b      	str	r3, [r7, #20]
}
 800cd58:	bf00      	nop
 800cd5a:	e7fe      	b.n	800cd5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd5c:	4b0a      	ldr	r3, [pc, #40]	; (800cd88 <vTaskPlaceOnEventListRestricted+0x54>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	3318      	adds	r3, #24
 800cd62:	4619      	mov	r1, r3
 800cd64:	68f8      	ldr	r0, [r7, #12]
 800cd66:	f7fe fe18 	bl	800b99a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cd70:	f04f 33ff 	mov.w	r3, #4294967295
 800cd74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cd76:	6879      	ldr	r1, [r7, #4]
 800cd78:	68b8      	ldr	r0, [r7, #8]
 800cd7a:	f000 fa55 	bl	800d228 <prvAddCurrentTaskToDelayedList>
	}
 800cd7e:	bf00      	nop
 800cd80:	3718      	adds	r7, #24
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	20001748 	.word	0x20001748

0800cd8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b086      	sub	sp, #24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d10a      	bne.n	800cdb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda6:	f383 8811 	msr	BASEPRI, r3
 800cdaa:	f3bf 8f6f 	isb	sy
 800cdae:	f3bf 8f4f 	dsb	sy
 800cdb2:	60fb      	str	r3, [r7, #12]
}
 800cdb4:	bf00      	nop
 800cdb6:	e7fe      	b.n	800cdb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	3318      	adds	r3, #24
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7fe fe49 	bl	800ba54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdc2:	4b1e      	ldr	r3, [pc, #120]	; (800ce3c <xTaskRemoveFromEventList+0xb0>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d11d      	bne.n	800ce06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	3304      	adds	r3, #4
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7fe fe40 	bl	800ba54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd8:	4b19      	ldr	r3, [pc, #100]	; (800ce40 <xTaskRemoveFromEventList+0xb4>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d903      	bls.n	800cde8 <xTaskRemoveFromEventList+0x5c>
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde4:	4a16      	ldr	r2, [pc, #88]	; (800ce40 <xTaskRemoveFromEventList+0xb4>)
 800cde6:	6013      	str	r3, [r2, #0]
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdec:	4613      	mov	r3, r2
 800cdee:	009b      	lsls	r3, r3, #2
 800cdf0:	4413      	add	r3, r2
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	4a13      	ldr	r2, [pc, #76]	; (800ce44 <xTaskRemoveFromEventList+0xb8>)
 800cdf6:	441a      	add	r2, r3
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	3304      	adds	r3, #4
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	4610      	mov	r0, r2
 800ce00:	f7fe fdcb 	bl	800b99a <vListInsertEnd>
 800ce04:	e005      	b.n	800ce12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	3318      	adds	r3, #24
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	480e      	ldr	r0, [pc, #56]	; (800ce48 <xTaskRemoveFromEventList+0xbc>)
 800ce0e:	f7fe fdc4 	bl	800b99a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce16:	4b0d      	ldr	r3, [pc, #52]	; (800ce4c <xTaskRemoveFromEventList+0xc0>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d905      	bls.n	800ce2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ce20:	2301      	movs	r3, #1
 800ce22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ce24:	4b0a      	ldr	r3, [pc, #40]	; (800ce50 <xTaskRemoveFromEventList+0xc4>)
 800ce26:	2201      	movs	r2, #1
 800ce28:	601a      	str	r2, [r3, #0]
 800ce2a:	e001      	b.n	800ce30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ce30:	697b      	ldr	r3, [r7, #20]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3718      	adds	r7, #24
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	20001c44 	.word	0x20001c44
 800ce40:	20001c24 	.word	0x20001c24
 800ce44:	2000174c 	.word	0x2000174c
 800ce48:	20001bdc 	.word	0x20001bdc
 800ce4c:	20001748 	.word	0x20001748
 800ce50:	20001c30 	.word	0x20001c30

0800ce54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ce5c:	4b06      	ldr	r3, [pc, #24]	; (800ce78 <vTaskInternalSetTimeOutState+0x24>)
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ce64:	4b05      	ldr	r3, [pc, #20]	; (800ce7c <vTaskInternalSetTimeOutState+0x28>)
 800ce66:	681a      	ldr	r2, [r3, #0]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	605a      	str	r2, [r3, #4]
}
 800ce6c:	bf00      	nop
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr
 800ce78:	20001c34 	.word	0x20001c34
 800ce7c:	20001c20 	.word	0x20001c20

0800ce80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b088      	sub	sp, #32
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d10a      	bne.n	800cea6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ce90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce94:	f383 8811 	msr	BASEPRI, r3
 800ce98:	f3bf 8f6f 	isb	sy
 800ce9c:	f3bf 8f4f 	dsb	sy
 800cea0:	613b      	str	r3, [r7, #16]
}
 800cea2:	bf00      	nop
 800cea4:	e7fe      	b.n	800cea4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d10a      	bne.n	800cec2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ceac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	60fb      	str	r3, [r7, #12]
}
 800cebe:	bf00      	nop
 800cec0:	e7fe      	b.n	800cec0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cec2:	f000 fe7f 	bl	800dbc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cec6:	4b1d      	ldr	r3, [pc, #116]	; (800cf3c <xTaskCheckForTimeOut+0xbc>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	69ba      	ldr	r2, [r7, #24]
 800ced2:	1ad3      	subs	r3, r2, r3
 800ced4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cede:	d102      	bne.n	800cee6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cee0:	2300      	movs	r3, #0
 800cee2:	61fb      	str	r3, [r7, #28]
 800cee4:	e023      	b.n	800cf2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	4b15      	ldr	r3, [pc, #84]	; (800cf40 <xTaskCheckForTimeOut+0xc0>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d007      	beq.n	800cf02 <xTaskCheckForTimeOut+0x82>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	69ba      	ldr	r2, [r7, #24]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d302      	bcc.n	800cf02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cefc:	2301      	movs	r3, #1
 800cefe:	61fb      	str	r3, [r7, #28]
 800cf00:	e015      	b.n	800cf2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	697a      	ldr	r2, [r7, #20]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d20b      	bcs.n	800cf24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	1ad2      	subs	r2, r2, r3
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f7ff ff9b 	bl	800ce54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	61fb      	str	r3, [r7, #28]
 800cf22:	e004      	b.n	800cf2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	2200      	movs	r2, #0
 800cf28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cf2e:	f000 fe79 	bl	800dc24 <vPortExitCritical>

	return xReturn;
 800cf32:	69fb      	ldr	r3, [r7, #28]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3720      	adds	r7, #32
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	20001c20 	.word	0x20001c20
 800cf40:	20001c34 	.word	0x20001c34

0800cf44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cf44:	b480      	push	{r7}
 800cf46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cf48:	4b03      	ldr	r3, [pc, #12]	; (800cf58 <vTaskMissedYield+0x14>)
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	601a      	str	r2, [r3, #0]
}
 800cf4e:	bf00      	nop
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr
 800cf58:	20001c30 	.word	0x20001c30

0800cf5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cf64:	f000 f852 	bl	800d00c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cf68:	4b06      	ldr	r3, [pc, #24]	; (800cf84 <prvIdleTask+0x28>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d9f9      	bls.n	800cf64 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cf70:	4b05      	ldr	r3, [pc, #20]	; (800cf88 <prvIdleTask+0x2c>)
 800cf72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf76:	601a      	str	r2, [r3, #0]
 800cf78:	f3bf 8f4f 	dsb	sy
 800cf7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cf80:	e7f0      	b.n	800cf64 <prvIdleTask+0x8>
 800cf82:	bf00      	nop
 800cf84:	2000174c 	.word	0x2000174c
 800cf88:	e000ed04 	.word	0xe000ed04

0800cf8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf92:	2300      	movs	r3, #0
 800cf94:	607b      	str	r3, [r7, #4]
 800cf96:	e00c      	b.n	800cfb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	4413      	add	r3, r2
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	4a12      	ldr	r2, [pc, #72]	; (800cfec <prvInitialiseTaskLists+0x60>)
 800cfa4:	4413      	add	r3, r2
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fe fcca 	bl	800b940 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	607b      	str	r3, [r7, #4]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2b37      	cmp	r3, #55	; 0x37
 800cfb6:	d9ef      	bls.n	800cf98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cfb8:	480d      	ldr	r0, [pc, #52]	; (800cff0 <prvInitialiseTaskLists+0x64>)
 800cfba:	f7fe fcc1 	bl	800b940 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cfbe:	480d      	ldr	r0, [pc, #52]	; (800cff4 <prvInitialiseTaskLists+0x68>)
 800cfc0:	f7fe fcbe 	bl	800b940 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cfc4:	480c      	ldr	r0, [pc, #48]	; (800cff8 <prvInitialiseTaskLists+0x6c>)
 800cfc6:	f7fe fcbb 	bl	800b940 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cfca:	480c      	ldr	r0, [pc, #48]	; (800cffc <prvInitialiseTaskLists+0x70>)
 800cfcc:	f7fe fcb8 	bl	800b940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cfd0:	480b      	ldr	r0, [pc, #44]	; (800d000 <prvInitialiseTaskLists+0x74>)
 800cfd2:	f7fe fcb5 	bl	800b940 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cfd6:	4b0b      	ldr	r3, [pc, #44]	; (800d004 <prvInitialiseTaskLists+0x78>)
 800cfd8:	4a05      	ldr	r2, [pc, #20]	; (800cff0 <prvInitialiseTaskLists+0x64>)
 800cfda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cfdc:	4b0a      	ldr	r3, [pc, #40]	; (800d008 <prvInitialiseTaskLists+0x7c>)
 800cfde:	4a05      	ldr	r2, [pc, #20]	; (800cff4 <prvInitialiseTaskLists+0x68>)
 800cfe0:	601a      	str	r2, [r3, #0]
}
 800cfe2:	bf00      	nop
 800cfe4:	3708      	adds	r7, #8
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	2000174c 	.word	0x2000174c
 800cff0:	20001bac 	.word	0x20001bac
 800cff4:	20001bc0 	.word	0x20001bc0
 800cff8:	20001bdc 	.word	0x20001bdc
 800cffc:	20001bf0 	.word	0x20001bf0
 800d000:	20001c08 	.word	0x20001c08
 800d004:	20001bd4 	.word	0x20001bd4
 800d008:	20001bd8 	.word	0x20001bd8

0800d00c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d012:	e019      	b.n	800d048 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d014:	f000 fdd6 	bl	800dbc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d018:	4b10      	ldr	r3, [pc, #64]	; (800d05c <prvCheckTasksWaitingTermination+0x50>)
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	3304      	adds	r3, #4
 800d024:	4618      	mov	r0, r3
 800d026:	f7fe fd15 	bl	800ba54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d02a:	4b0d      	ldr	r3, [pc, #52]	; (800d060 <prvCheckTasksWaitingTermination+0x54>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	3b01      	subs	r3, #1
 800d030:	4a0b      	ldr	r2, [pc, #44]	; (800d060 <prvCheckTasksWaitingTermination+0x54>)
 800d032:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d034:	4b0b      	ldr	r3, [pc, #44]	; (800d064 <prvCheckTasksWaitingTermination+0x58>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	3b01      	subs	r3, #1
 800d03a:	4a0a      	ldr	r2, [pc, #40]	; (800d064 <prvCheckTasksWaitingTermination+0x58>)
 800d03c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d03e:	f000 fdf1 	bl	800dc24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 f810 	bl	800d068 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d048:	4b06      	ldr	r3, [pc, #24]	; (800d064 <prvCheckTasksWaitingTermination+0x58>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d1e1      	bne.n	800d014 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d050:	bf00      	nop
 800d052:	bf00      	nop
 800d054:	3708      	adds	r7, #8
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	20001bf0 	.word	0x20001bf0
 800d060:	20001c1c 	.word	0x20001c1c
 800d064:	20001c04 	.word	0x20001c04

0800d068 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	3354      	adds	r3, #84	; 0x54
 800d074:	4618      	mov	r0, r3
 800d076:	f001 fb17 	bl	800e6a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d080:	2b00      	cmp	r3, #0
 800d082:	d108      	bne.n	800d096 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d088:	4618      	mov	r0, r3
 800d08a:	f000 ff89 	bl	800dfa0 <vPortFree>
				vPortFree( pxTCB );
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 ff86 	bl	800dfa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d094:	e018      	b.n	800d0c8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d103      	bne.n	800d0a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 ff7d 	bl	800dfa0 <vPortFree>
	}
 800d0a6:	e00f      	b.n	800d0c8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d0ae:	2b02      	cmp	r3, #2
 800d0b0:	d00a      	beq.n	800d0c8 <prvDeleteTCB+0x60>
	__asm volatile
 800d0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b6:	f383 8811 	msr	BASEPRI, r3
 800d0ba:	f3bf 8f6f 	isb	sy
 800d0be:	f3bf 8f4f 	dsb	sy
 800d0c2:	60fb      	str	r3, [r7, #12]
}
 800d0c4:	bf00      	nop
 800d0c6:	e7fe      	b.n	800d0c6 <prvDeleteTCB+0x5e>
	}
 800d0c8:	bf00      	nop
 800d0ca:	3710      	adds	r7, #16
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0d6:	4b0c      	ldr	r3, [pc, #48]	; (800d108 <prvResetNextTaskUnblockTime+0x38>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d104      	bne.n	800d0ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d0e0:	4b0a      	ldr	r3, [pc, #40]	; (800d10c <prvResetNextTaskUnblockTime+0x3c>)
 800d0e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d0e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d0e8:	e008      	b.n	800d0fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0ea:	4b07      	ldr	r3, [pc, #28]	; (800d108 <prvResetNextTaskUnblockTime+0x38>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	68db      	ldr	r3, [r3, #12]
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	4a04      	ldr	r2, [pc, #16]	; (800d10c <prvResetNextTaskUnblockTime+0x3c>)
 800d0fa:	6013      	str	r3, [r2, #0]
}
 800d0fc:	bf00      	nop
 800d0fe:	370c      	adds	r7, #12
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr
 800d108:	20001bd4 	.word	0x20001bd4
 800d10c:	20001c3c 	.word	0x20001c3c

0800d110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d116:	4b0b      	ldr	r3, [pc, #44]	; (800d144 <xTaskGetSchedulerState+0x34>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d102      	bne.n	800d124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d11e:	2301      	movs	r3, #1
 800d120:	607b      	str	r3, [r7, #4]
 800d122:	e008      	b.n	800d136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d124:	4b08      	ldr	r3, [pc, #32]	; (800d148 <xTaskGetSchedulerState+0x38>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d102      	bne.n	800d132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d12c:	2302      	movs	r3, #2
 800d12e:	607b      	str	r3, [r7, #4]
 800d130:	e001      	b.n	800d136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d132:	2300      	movs	r3, #0
 800d134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d136:	687b      	ldr	r3, [r7, #4]
	}
 800d138:	4618      	mov	r0, r3
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr
 800d144:	20001c28 	.word	0x20001c28
 800d148:	20001c44 	.word	0x20001c44

0800d14c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d158:	2300      	movs	r3, #0
 800d15a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d056      	beq.n	800d210 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d162:	4b2e      	ldr	r3, [pc, #184]	; (800d21c <xTaskPriorityDisinherit+0xd0>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	693a      	ldr	r2, [r7, #16]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d00a      	beq.n	800d182 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d170:	f383 8811 	msr	BASEPRI, r3
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	60fb      	str	r3, [r7, #12]
}
 800d17e:	bf00      	nop
 800d180:	e7fe      	b.n	800d180 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10a      	bne.n	800d1a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18e:	f383 8811 	msr	BASEPRI, r3
 800d192:	f3bf 8f6f 	isb	sy
 800d196:	f3bf 8f4f 	dsb	sy
 800d19a:	60bb      	str	r3, [r7, #8]
}
 800d19c:	bf00      	nop
 800d19e:	e7fe      	b.n	800d19e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1a4:	1e5a      	subs	r2, r3, #1
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d02c      	beq.n	800d210 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d128      	bne.n	800d210 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	3304      	adds	r3, #4
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fe fc46 	bl	800ba54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1e0:	4b0f      	ldr	r3, [pc, #60]	; (800d220 <xTaskPriorityDisinherit+0xd4>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d903      	bls.n	800d1f0 <xTaskPriorityDisinherit+0xa4>
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ec:	4a0c      	ldr	r2, [pc, #48]	; (800d220 <xTaskPriorityDisinherit+0xd4>)
 800d1ee:	6013      	str	r3, [r2, #0]
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	4413      	add	r3, r2
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	4a09      	ldr	r2, [pc, #36]	; (800d224 <xTaskPriorityDisinherit+0xd8>)
 800d1fe:	441a      	add	r2, r3
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	3304      	adds	r3, #4
 800d204:	4619      	mov	r1, r3
 800d206:	4610      	mov	r0, r2
 800d208:	f7fe fbc7 	bl	800b99a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d20c:	2301      	movs	r3, #1
 800d20e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d210:	697b      	ldr	r3, [r7, #20]
	}
 800d212:	4618      	mov	r0, r3
 800d214:	3718      	adds	r7, #24
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	20001748 	.word	0x20001748
 800d220:	20001c24 	.word	0x20001c24
 800d224:	2000174c 	.word	0x2000174c

0800d228 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d232:	4b21      	ldr	r3, [pc, #132]	; (800d2b8 <prvAddCurrentTaskToDelayedList+0x90>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d238:	4b20      	ldr	r3, [pc, #128]	; (800d2bc <prvAddCurrentTaskToDelayedList+0x94>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	3304      	adds	r3, #4
 800d23e:	4618      	mov	r0, r3
 800d240:	f7fe fc08 	bl	800ba54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d24a:	d10a      	bne.n	800d262 <prvAddCurrentTaskToDelayedList+0x3a>
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d007      	beq.n	800d262 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d252:	4b1a      	ldr	r3, [pc, #104]	; (800d2bc <prvAddCurrentTaskToDelayedList+0x94>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	3304      	adds	r3, #4
 800d258:	4619      	mov	r1, r3
 800d25a:	4819      	ldr	r0, [pc, #100]	; (800d2c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800d25c:	f7fe fb9d 	bl	800b99a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d260:	e026      	b.n	800d2b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d262:	68fa      	ldr	r2, [r7, #12]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	4413      	add	r3, r2
 800d268:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d26a:	4b14      	ldr	r3, [pc, #80]	; (800d2bc <prvAddCurrentTaskToDelayedList+0x94>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	68ba      	ldr	r2, [r7, #8]
 800d270:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	429a      	cmp	r2, r3
 800d278:	d209      	bcs.n	800d28e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d27a:	4b12      	ldr	r3, [pc, #72]	; (800d2c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d27c:	681a      	ldr	r2, [r3, #0]
 800d27e:	4b0f      	ldr	r3, [pc, #60]	; (800d2bc <prvAddCurrentTaskToDelayedList+0x94>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	3304      	adds	r3, #4
 800d284:	4619      	mov	r1, r3
 800d286:	4610      	mov	r0, r2
 800d288:	f7fe fbab 	bl	800b9e2 <vListInsert>
}
 800d28c:	e010      	b.n	800d2b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d28e:	4b0e      	ldr	r3, [pc, #56]	; (800d2c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	4b0a      	ldr	r3, [pc, #40]	; (800d2bc <prvAddCurrentTaskToDelayedList+0x94>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	3304      	adds	r3, #4
 800d298:	4619      	mov	r1, r3
 800d29a:	4610      	mov	r0, r2
 800d29c:	f7fe fba1 	bl	800b9e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d2a0:	4b0a      	ldr	r3, [pc, #40]	; (800d2cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	68ba      	ldr	r2, [r7, #8]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d202      	bcs.n	800d2b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d2aa:	4a08      	ldr	r2, [pc, #32]	; (800d2cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	6013      	str	r3, [r2, #0]
}
 800d2b0:	bf00      	nop
 800d2b2:	3710      	adds	r7, #16
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	20001c20 	.word	0x20001c20
 800d2bc:	20001748 	.word	0x20001748
 800d2c0:	20001c08 	.word	0x20001c08
 800d2c4:	20001bd8 	.word	0x20001bd8
 800d2c8:	20001bd4 	.word	0x20001bd4
 800d2cc:	20001c3c 	.word	0x20001c3c

0800d2d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b08a      	sub	sp, #40	; 0x28
 800d2d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d2da:	f000 fb07 	bl	800d8ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d2de:	4b1c      	ldr	r3, [pc, #112]	; (800d350 <xTimerCreateTimerTask+0x80>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d021      	beq.n	800d32a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d2ee:	1d3a      	adds	r2, r7, #4
 800d2f0:	f107 0108 	add.w	r1, r7, #8
 800d2f4:	f107 030c 	add.w	r3, r7, #12
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7fe fb07 	bl	800b90c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d2fe:	6879      	ldr	r1, [r7, #4]
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	68fa      	ldr	r2, [r7, #12]
 800d304:	9202      	str	r2, [sp, #8]
 800d306:	9301      	str	r3, [sp, #4]
 800d308:	2302      	movs	r3, #2
 800d30a:	9300      	str	r3, [sp, #0]
 800d30c:	2300      	movs	r3, #0
 800d30e:	460a      	mov	r2, r1
 800d310:	4910      	ldr	r1, [pc, #64]	; (800d354 <xTimerCreateTimerTask+0x84>)
 800d312:	4811      	ldr	r0, [pc, #68]	; (800d358 <xTimerCreateTimerTask+0x88>)
 800d314:	f7ff f8b4 	bl	800c480 <xTaskCreateStatic>
 800d318:	4603      	mov	r3, r0
 800d31a:	4a10      	ldr	r2, [pc, #64]	; (800d35c <xTimerCreateTimerTask+0x8c>)
 800d31c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d31e:	4b0f      	ldr	r3, [pc, #60]	; (800d35c <xTimerCreateTimerTask+0x8c>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d001      	beq.n	800d32a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d326:	2301      	movs	r3, #1
 800d328:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d10a      	bne.n	800d346 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d334:	f383 8811 	msr	BASEPRI, r3
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	613b      	str	r3, [r7, #16]
}
 800d342:	bf00      	nop
 800d344:	e7fe      	b.n	800d344 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d346:	697b      	ldr	r3, [r7, #20]
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3718      	adds	r7, #24
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	20001c78 	.word	0x20001c78
 800d354:	08010448 	.word	0x08010448
 800d358:	0800d495 	.word	0x0800d495
 800d35c:	20001c7c 	.word	0x20001c7c

0800d360 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b08a      	sub	sp, #40	; 0x28
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	607a      	str	r2, [r7, #4]
 800d36c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d36e:	2300      	movs	r3, #0
 800d370:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d10a      	bne.n	800d38e <xTimerGenericCommand+0x2e>
	__asm volatile
 800d378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37c:	f383 8811 	msr	BASEPRI, r3
 800d380:	f3bf 8f6f 	isb	sy
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	623b      	str	r3, [r7, #32]
}
 800d38a:	bf00      	nop
 800d38c:	e7fe      	b.n	800d38c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d38e:	4b1a      	ldr	r3, [pc, #104]	; (800d3f8 <xTimerGenericCommand+0x98>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d02a      	beq.n	800d3ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	2b05      	cmp	r3, #5
 800d3a6:	dc18      	bgt.n	800d3da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d3a8:	f7ff feb2 	bl	800d110 <xTaskGetSchedulerState>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b02      	cmp	r3, #2
 800d3b0:	d109      	bne.n	800d3c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d3b2:	4b11      	ldr	r3, [pc, #68]	; (800d3f8 <xTimerGenericCommand+0x98>)
 800d3b4:	6818      	ldr	r0, [r3, #0]
 800d3b6:	f107 0110 	add.w	r1, r7, #16
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3be:	f7fe fc77 	bl	800bcb0 <xQueueGenericSend>
 800d3c2:	6278      	str	r0, [r7, #36]	; 0x24
 800d3c4:	e012      	b.n	800d3ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d3c6:	4b0c      	ldr	r3, [pc, #48]	; (800d3f8 <xTimerGenericCommand+0x98>)
 800d3c8:	6818      	ldr	r0, [r3, #0]
 800d3ca:	f107 0110 	add.w	r1, r7, #16
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	f7fe fc6d 	bl	800bcb0 <xQueueGenericSend>
 800d3d6:	6278      	str	r0, [r7, #36]	; 0x24
 800d3d8:	e008      	b.n	800d3ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d3da:	4b07      	ldr	r3, [pc, #28]	; (800d3f8 <xTimerGenericCommand+0x98>)
 800d3dc:	6818      	ldr	r0, [r3, #0]
 800d3de:	f107 0110 	add.w	r1, r7, #16
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	683a      	ldr	r2, [r7, #0]
 800d3e6:	f7fe fd61 	bl	800beac <xQueueGenericSendFromISR>
 800d3ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3728      	adds	r7, #40	; 0x28
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	20001c78 	.word	0x20001c78

0800d3fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b088      	sub	sp, #32
 800d400:	af02      	add	r7, sp, #8
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d406:	4b22      	ldr	r3, [pc, #136]	; (800d490 <prvProcessExpiredTimer+0x94>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	68db      	ldr	r3, [r3, #12]
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	3304      	adds	r3, #4
 800d414:	4618      	mov	r0, r3
 800d416:	f7fe fb1d 	bl	800ba54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d420:	f003 0304 	and.w	r3, r3, #4
 800d424:	2b00      	cmp	r3, #0
 800d426:	d022      	beq.n	800d46e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	699a      	ldr	r2, [r3, #24]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	18d1      	adds	r1, r2, r3
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	683a      	ldr	r2, [r7, #0]
 800d434:	6978      	ldr	r0, [r7, #20]
 800d436:	f000 f8d1 	bl	800d5dc <prvInsertTimerInActiveList>
 800d43a:	4603      	mov	r3, r0
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d01f      	beq.n	800d480 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d440:	2300      	movs	r3, #0
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	2300      	movs	r3, #0
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	2100      	movs	r1, #0
 800d44a:	6978      	ldr	r0, [r7, #20]
 800d44c:	f7ff ff88 	bl	800d360 <xTimerGenericCommand>
 800d450:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d113      	bne.n	800d480 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45c:	f383 8811 	msr	BASEPRI, r3
 800d460:	f3bf 8f6f 	isb	sy
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	60fb      	str	r3, [r7, #12]
}
 800d46a:	bf00      	nop
 800d46c:	e7fe      	b.n	800d46c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d474:	f023 0301 	bic.w	r3, r3, #1
 800d478:	b2da      	uxtb	r2, r3
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	6a1b      	ldr	r3, [r3, #32]
 800d484:	6978      	ldr	r0, [r7, #20]
 800d486:	4798      	blx	r3
}
 800d488:	bf00      	nop
 800d48a:	3718      	adds	r7, #24
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	20001c70 	.word	0x20001c70

0800d494 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d49c:	f107 0308 	add.w	r3, r7, #8
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f000 f857 	bl	800d554 <prvGetNextExpireTime>
 800d4a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f000 f803 	bl	800d4b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d4b2:	f000 f8d5 	bl	800d660 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d4b6:	e7f1      	b.n	800d49c <prvTimerTask+0x8>

0800d4b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d4c2:	f7ff fa39 	bl	800c938 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d4c6:	f107 0308 	add.w	r3, r7, #8
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f000 f866 	bl	800d59c <prvSampleTimeNow>
 800d4d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d130      	bne.n	800d53a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d10a      	bne.n	800d4f4 <prvProcessTimerOrBlockTask+0x3c>
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d806      	bhi.n	800d4f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d4e6:	f7ff fa35 	bl	800c954 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d4ea:	68f9      	ldr	r1, [r7, #12]
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7ff ff85 	bl	800d3fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d4f2:	e024      	b.n	800d53e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d008      	beq.n	800d50c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d4fa:	4b13      	ldr	r3, [pc, #76]	; (800d548 <prvProcessTimerOrBlockTask+0x90>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d101      	bne.n	800d508 <prvProcessTimerOrBlockTask+0x50>
 800d504:	2301      	movs	r3, #1
 800d506:	e000      	b.n	800d50a <prvProcessTimerOrBlockTask+0x52>
 800d508:	2300      	movs	r3, #0
 800d50a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d50c:	4b0f      	ldr	r3, [pc, #60]	; (800d54c <prvProcessTimerOrBlockTask+0x94>)
 800d50e:	6818      	ldr	r0, [r3, #0]
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	1ad3      	subs	r3, r2, r3
 800d516:	683a      	ldr	r2, [r7, #0]
 800d518:	4619      	mov	r1, r3
 800d51a:	f7fe ff7d 	bl	800c418 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d51e:	f7ff fa19 	bl	800c954 <xTaskResumeAll>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d10a      	bne.n	800d53e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d528:	4b09      	ldr	r3, [pc, #36]	; (800d550 <prvProcessTimerOrBlockTask+0x98>)
 800d52a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d52e:	601a      	str	r2, [r3, #0]
 800d530:	f3bf 8f4f 	dsb	sy
 800d534:	f3bf 8f6f 	isb	sy
}
 800d538:	e001      	b.n	800d53e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d53a:	f7ff fa0b 	bl	800c954 <xTaskResumeAll>
}
 800d53e:	bf00      	nop
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
 800d546:	bf00      	nop
 800d548:	20001c74 	.word	0x20001c74
 800d54c:	20001c78 	.word	0x20001c78
 800d550:	e000ed04 	.word	0xe000ed04

0800d554 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d554:	b480      	push	{r7}
 800d556:	b085      	sub	sp, #20
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d55c:	4b0e      	ldr	r3, [pc, #56]	; (800d598 <prvGetNextExpireTime+0x44>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d101      	bne.n	800d56a <prvGetNextExpireTime+0x16>
 800d566:	2201      	movs	r2, #1
 800d568:	e000      	b.n	800d56c <prvGetNextExpireTime+0x18>
 800d56a:	2200      	movs	r2, #0
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d105      	bne.n	800d584 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d578:	4b07      	ldr	r3, [pc, #28]	; (800d598 <prvGetNextExpireTime+0x44>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	68db      	ldr	r3, [r3, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	60fb      	str	r3, [r7, #12]
 800d582:	e001      	b.n	800d588 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d584:	2300      	movs	r3, #0
 800d586:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d588:	68fb      	ldr	r3, [r7, #12]
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3714      	adds	r7, #20
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop
 800d598:	20001c70 	.word	0x20001c70

0800d59c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d5a4:	f7ff fa74 	bl	800ca90 <xTaskGetTickCount>
 800d5a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d5aa:	4b0b      	ldr	r3, [pc, #44]	; (800d5d8 <prvSampleTimeNow+0x3c>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	68fa      	ldr	r2, [r7, #12]
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d205      	bcs.n	800d5c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d5b4:	f000 f936 	bl	800d824 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	601a      	str	r2, [r3, #0]
 800d5be:	e002      	b.n	800d5c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d5c6:	4a04      	ldr	r2, [pc, #16]	; (800d5d8 <prvSampleTimeNow+0x3c>)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	20001c80 	.word	0x20001c80

0800d5dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b086      	sub	sp, #24
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	607a      	str	r2, [r7, #4]
 800d5e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d5fa:	68ba      	ldr	r2, [r7, #8]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d812      	bhi.n	800d628 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	1ad2      	subs	r2, r2, r3
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	699b      	ldr	r3, [r3, #24]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d302      	bcc.n	800d616 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d610:	2301      	movs	r3, #1
 800d612:	617b      	str	r3, [r7, #20]
 800d614:	e01b      	b.n	800d64e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d616:	4b10      	ldr	r3, [pc, #64]	; (800d658 <prvInsertTimerInActiveList+0x7c>)
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	3304      	adds	r3, #4
 800d61e:	4619      	mov	r1, r3
 800d620:	4610      	mov	r0, r2
 800d622:	f7fe f9de 	bl	800b9e2 <vListInsert>
 800d626:	e012      	b.n	800d64e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d206      	bcs.n	800d63e <prvInsertTimerInActiveList+0x62>
 800d630:	68ba      	ldr	r2, [r7, #8]
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	429a      	cmp	r2, r3
 800d636:	d302      	bcc.n	800d63e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d638:	2301      	movs	r3, #1
 800d63a:	617b      	str	r3, [r7, #20]
 800d63c:	e007      	b.n	800d64e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d63e:	4b07      	ldr	r3, [pc, #28]	; (800d65c <prvInsertTimerInActiveList+0x80>)
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	3304      	adds	r3, #4
 800d646:	4619      	mov	r1, r3
 800d648:	4610      	mov	r0, r2
 800d64a:	f7fe f9ca 	bl	800b9e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d64e:	697b      	ldr	r3, [r7, #20]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3718      	adds	r7, #24
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	20001c74 	.word	0x20001c74
 800d65c:	20001c70 	.word	0x20001c70

0800d660 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b08e      	sub	sp, #56	; 0x38
 800d664:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d666:	e0ca      	b.n	800d7fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	da18      	bge.n	800d6a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d66e:	1d3b      	adds	r3, r7, #4
 800d670:	3304      	adds	r3, #4
 800d672:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d676:	2b00      	cmp	r3, #0
 800d678:	d10a      	bne.n	800d690 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67e:	f383 8811 	msr	BASEPRI, r3
 800d682:	f3bf 8f6f 	isb	sy
 800d686:	f3bf 8f4f 	dsb	sy
 800d68a:	61fb      	str	r3, [r7, #28]
}
 800d68c:	bf00      	nop
 800d68e:	e7fe      	b.n	800d68e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d696:	6850      	ldr	r0, [r2, #4]
 800d698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d69a:	6892      	ldr	r2, [r2, #8]
 800d69c:	4611      	mov	r1, r2
 800d69e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	f2c0 80aa 	blt.w	800d7fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ae:	695b      	ldr	r3, [r3, #20]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d004      	beq.n	800d6be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b6:	3304      	adds	r3, #4
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7fe f9cb 	bl	800ba54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d6be:	463b      	mov	r3, r7
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7ff ff6b 	bl	800d59c <prvSampleTimeNow>
 800d6c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2b09      	cmp	r3, #9
 800d6cc:	f200 8097 	bhi.w	800d7fe <prvProcessReceivedCommands+0x19e>
 800d6d0:	a201      	add	r2, pc, #4	; (adr r2, 800d6d8 <prvProcessReceivedCommands+0x78>)
 800d6d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d6:	bf00      	nop
 800d6d8:	0800d701 	.word	0x0800d701
 800d6dc:	0800d701 	.word	0x0800d701
 800d6e0:	0800d701 	.word	0x0800d701
 800d6e4:	0800d775 	.word	0x0800d775
 800d6e8:	0800d789 	.word	0x0800d789
 800d6ec:	0800d7d3 	.word	0x0800d7d3
 800d6f0:	0800d701 	.word	0x0800d701
 800d6f4:	0800d701 	.word	0x0800d701
 800d6f8:	0800d775 	.word	0x0800d775
 800d6fc:	0800d789 	.word	0x0800d789
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d706:	f043 0301 	orr.w	r3, r3, #1
 800d70a:	b2da      	uxtb	r2, r3
 800d70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d712:	68ba      	ldr	r2, [r7, #8]
 800d714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d716:	699b      	ldr	r3, [r3, #24]
 800d718:	18d1      	adds	r1, r2, r3
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d71e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d720:	f7ff ff5c 	bl	800d5dc <prvInsertTimerInActiveList>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d069      	beq.n	800d7fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72c:	6a1b      	ldr	r3, [r3, #32]
 800d72e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d730:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d738:	f003 0304 	and.w	r3, r3, #4
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d05e      	beq.n	800d7fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d740:	68ba      	ldr	r2, [r7, #8]
 800d742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d744:	699b      	ldr	r3, [r3, #24]
 800d746:	441a      	add	r2, r3
 800d748:	2300      	movs	r3, #0
 800d74a:	9300      	str	r3, [sp, #0]
 800d74c:	2300      	movs	r3, #0
 800d74e:	2100      	movs	r1, #0
 800d750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d752:	f7ff fe05 	bl	800d360 <xTimerGenericCommand>
 800d756:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d758:	6a3b      	ldr	r3, [r7, #32]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d14f      	bne.n	800d7fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d762:	f383 8811 	msr	BASEPRI, r3
 800d766:	f3bf 8f6f 	isb	sy
 800d76a:	f3bf 8f4f 	dsb	sy
 800d76e:	61bb      	str	r3, [r7, #24]
}
 800d770:	bf00      	nop
 800d772:	e7fe      	b.n	800d772 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d776:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d77a:	f023 0301 	bic.w	r3, r3, #1
 800d77e:	b2da      	uxtb	r2, r3
 800d780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d786:	e03a      	b.n	800d7fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d78e:	f043 0301 	orr.w	r3, r3, #1
 800d792:	b2da      	uxtb	r2, r3
 800d794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d79a:	68ba      	ldr	r2, [r7, #8]
 800d79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a2:	699b      	ldr	r3, [r3, #24]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d10a      	bne.n	800d7be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ac:	f383 8811 	msr	BASEPRI, r3
 800d7b0:	f3bf 8f6f 	isb	sy
 800d7b4:	f3bf 8f4f 	dsb	sy
 800d7b8:	617b      	str	r3, [r7, #20]
}
 800d7ba:	bf00      	nop
 800d7bc:	e7fe      	b.n	800d7bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c0:	699a      	ldr	r2, [r3, #24]
 800d7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c4:	18d1      	adds	r1, r2, r3
 800d7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7cc:	f7ff ff06 	bl	800d5dc <prvInsertTimerInActiveList>
					break;
 800d7d0:	e015      	b.n	800d7fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7d8:	f003 0302 	and.w	r3, r3, #2
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d103      	bne.n	800d7e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d7e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7e2:	f000 fbdd 	bl	800dfa0 <vPortFree>
 800d7e6:	e00a      	b.n	800d7fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7ee:	f023 0301 	bic.w	r3, r3, #1
 800d7f2:	b2da      	uxtb	r2, r3
 800d7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d7fa:	e000      	b.n	800d7fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d7fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7fe:	4b08      	ldr	r3, [pc, #32]	; (800d820 <prvProcessReceivedCommands+0x1c0>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	1d39      	adds	r1, r7, #4
 800d804:	2200      	movs	r2, #0
 800d806:	4618      	mov	r0, r3
 800d808:	f7fe fbec 	bl	800bfe4 <xQueueReceive>
 800d80c:	4603      	mov	r3, r0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	f47f af2a 	bne.w	800d668 <prvProcessReceivedCommands+0x8>
	}
}
 800d814:	bf00      	nop
 800d816:	bf00      	nop
 800d818:	3730      	adds	r7, #48	; 0x30
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	20001c78 	.word	0x20001c78

0800d824 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b088      	sub	sp, #32
 800d828:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d82a:	e048      	b.n	800d8be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d82c:	4b2d      	ldr	r3, [pc, #180]	; (800d8e4 <prvSwitchTimerLists+0xc0>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d836:	4b2b      	ldr	r3, [pc, #172]	; (800d8e4 <prvSwitchTimerLists+0xc0>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	68db      	ldr	r3, [r3, #12]
 800d83e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	3304      	adds	r3, #4
 800d844:	4618      	mov	r0, r3
 800d846:	f7fe f905 	bl	800ba54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6a1b      	ldr	r3, [r3, #32]
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d858:	f003 0304 	and.w	r3, r3, #4
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d02e      	beq.n	800d8be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	699b      	ldr	r3, [r3, #24]
 800d864:	693a      	ldr	r2, [r7, #16]
 800d866:	4413      	add	r3, r2
 800d868:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d86a:	68ba      	ldr	r2, [r7, #8]
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d90e      	bls.n	800d890 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	68ba      	ldr	r2, [r7, #8]
 800d876:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d87e:	4b19      	ldr	r3, [pc, #100]	; (800d8e4 <prvSwitchTimerLists+0xc0>)
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	3304      	adds	r3, #4
 800d886:	4619      	mov	r1, r3
 800d888:	4610      	mov	r0, r2
 800d88a:	f7fe f8aa 	bl	800b9e2 <vListInsert>
 800d88e:	e016      	b.n	800d8be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d890:	2300      	movs	r3, #0
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	2300      	movs	r3, #0
 800d896:	693a      	ldr	r2, [r7, #16]
 800d898:	2100      	movs	r1, #0
 800d89a:	68f8      	ldr	r0, [r7, #12]
 800d89c:	f7ff fd60 	bl	800d360 <xTimerGenericCommand>
 800d8a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d10a      	bne.n	800d8be <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ac:	f383 8811 	msr	BASEPRI, r3
 800d8b0:	f3bf 8f6f 	isb	sy
 800d8b4:	f3bf 8f4f 	dsb	sy
 800d8b8:	603b      	str	r3, [r7, #0]
}
 800d8ba:	bf00      	nop
 800d8bc:	e7fe      	b.n	800d8bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d8be:	4b09      	ldr	r3, [pc, #36]	; (800d8e4 <prvSwitchTimerLists+0xc0>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d1b1      	bne.n	800d82c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d8c8:	4b06      	ldr	r3, [pc, #24]	; (800d8e4 <prvSwitchTimerLists+0xc0>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d8ce:	4b06      	ldr	r3, [pc, #24]	; (800d8e8 <prvSwitchTimerLists+0xc4>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a04      	ldr	r2, [pc, #16]	; (800d8e4 <prvSwitchTimerLists+0xc0>)
 800d8d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d8d6:	4a04      	ldr	r2, [pc, #16]	; (800d8e8 <prvSwitchTimerLists+0xc4>)
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	6013      	str	r3, [r2, #0]
}
 800d8dc:	bf00      	nop
 800d8de:	3718      	adds	r7, #24
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	20001c70 	.word	0x20001c70
 800d8e8:	20001c74 	.word	0x20001c74

0800d8ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d8f2:	f000 f967 	bl	800dbc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d8f6:	4b15      	ldr	r3, [pc, #84]	; (800d94c <prvCheckForValidListAndQueue+0x60>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d120      	bne.n	800d940 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d8fe:	4814      	ldr	r0, [pc, #80]	; (800d950 <prvCheckForValidListAndQueue+0x64>)
 800d900:	f7fe f81e 	bl	800b940 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d904:	4813      	ldr	r0, [pc, #76]	; (800d954 <prvCheckForValidListAndQueue+0x68>)
 800d906:	f7fe f81b 	bl	800b940 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d90a:	4b13      	ldr	r3, [pc, #76]	; (800d958 <prvCheckForValidListAndQueue+0x6c>)
 800d90c:	4a10      	ldr	r2, [pc, #64]	; (800d950 <prvCheckForValidListAndQueue+0x64>)
 800d90e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d910:	4b12      	ldr	r3, [pc, #72]	; (800d95c <prvCheckForValidListAndQueue+0x70>)
 800d912:	4a10      	ldr	r2, [pc, #64]	; (800d954 <prvCheckForValidListAndQueue+0x68>)
 800d914:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d916:	2300      	movs	r3, #0
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	4b11      	ldr	r3, [pc, #68]	; (800d960 <prvCheckForValidListAndQueue+0x74>)
 800d91c:	4a11      	ldr	r2, [pc, #68]	; (800d964 <prvCheckForValidListAndQueue+0x78>)
 800d91e:	2110      	movs	r1, #16
 800d920:	200a      	movs	r0, #10
 800d922:	f7fe f929 	bl	800bb78 <xQueueGenericCreateStatic>
 800d926:	4603      	mov	r3, r0
 800d928:	4a08      	ldr	r2, [pc, #32]	; (800d94c <prvCheckForValidListAndQueue+0x60>)
 800d92a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d92c:	4b07      	ldr	r3, [pc, #28]	; (800d94c <prvCheckForValidListAndQueue+0x60>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d005      	beq.n	800d940 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d934:	4b05      	ldr	r3, [pc, #20]	; (800d94c <prvCheckForValidListAndQueue+0x60>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	490b      	ldr	r1, [pc, #44]	; (800d968 <prvCheckForValidListAndQueue+0x7c>)
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fe fd42 	bl	800c3c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d940:	f000 f970 	bl	800dc24 <vPortExitCritical>
}
 800d944:	bf00      	nop
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	20001c78 	.word	0x20001c78
 800d950:	20001c48 	.word	0x20001c48
 800d954:	20001c5c 	.word	0x20001c5c
 800d958:	20001c70 	.word	0x20001c70
 800d95c:	20001c74 	.word	0x20001c74
 800d960:	20001d24 	.word	0x20001d24
 800d964:	20001c84 	.word	0x20001c84
 800d968:	08010450 	.word	0x08010450

0800d96c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d96c:	b480      	push	{r7}
 800d96e:	b085      	sub	sp, #20
 800d970:	af00      	add	r7, sp, #0
 800d972:	60f8      	str	r0, [r7, #12]
 800d974:	60b9      	str	r1, [r7, #8]
 800d976:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	3b04      	subs	r3, #4
 800d97c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	3b04      	subs	r3, #4
 800d98a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	f023 0201 	bic.w	r2, r3, #1
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	3b04      	subs	r3, #4
 800d99a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d99c:	4a0c      	ldr	r2, [pc, #48]	; (800d9d0 <pxPortInitialiseStack+0x64>)
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	3b14      	subs	r3, #20
 800d9a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d9a8:	687a      	ldr	r2, [r7, #4]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	3b04      	subs	r3, #4
 800d9b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f06f 0202 	mvn.w	r2, #2
 800d9ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	3b20      	subs	r3, #32
 800d9c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr
 800d9d0:	0800d9d5 	.word	0x0800d9d5

0800d9d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b085      	sub	sp, #20
 800d9d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d9de:	4b12      	ldr	r3, [pc, #72]	; (800da28 <prvTaskExitError+0x54>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e6:	d00a      	beq.n	800d9fe <prvTaskExitError+0x2a>
	__asm volatile
 800d9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ec:	f383 8811 	msr	BASEPRI, r3
 800d9f0:	f3bf 8f6f 	isb	sy
 800d9f4:	f3bf 8f4f 	dsb	sy
 800d9f8:	60fb      	str	r3, [r7, #12]
}
 800d9fa:	bf00      	nop
 800d9fc:	e7fe      	b.n	800d9fc <prvTaskExitError+0x28>
	__asm volatile
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	60bb      	str	r3, [r7, #8]
}
 800da10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800da12:	bf00      	nop
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d0fc      	beq.n	800da14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800da1a:	bf00      	nop
 800da1c:	bf00      	nop
 800da1e:	3714      	adds	r7, #20
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr
 800da28:	20000010 	.word	0x20000010
 800da2c:	00000000 	.word	0x00000000

0800da30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800da30:	4b07      	ldr	r3, [pc, #28]	; (800da50 <pxCurrentTCBConst2>)
 800da32:	6819      	ldr	r1, [r3, #0]
 800da34:	6808      	ldr	r0, [r1, #0]
 800da36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3a:	f380 8809 	msr	PSP, r0
 800da3e:	f3bf 8f6f 	isb	sy
 800da42:	f04f 0000 	mov.w	r0, #0
 800da46:	f380 8811 	msr	BASEPRI, r0
 800da4a:	4770      	bx	lr
 800da4c:	f3af 8000 	nop.w

0800da50 <pxCurrentTCBConst2>:
 800da50:	20001748 	.word	0x20001748
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800da54:	bf00      	nop
 800da56:	bf00      	nop

0800da58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800da58:	4808      	ldr	r0, [pc, #32]	; (800da7c <prvPortStartFirstTask+0x24>)
 800da5a:	6800      	ldr	r0, [r0, #0]
 800da5c:	6800      	ldr	r0, [r0, #0]
 800da5e:	f380 8808 	msr	MSP, r0
 800da62:	f04f 0000 	mov.w	r0, #0
 800da66:	f380 8814 	msr	CONTROL, r0
 800da6a:	b662      	cpsie	i
 800da6c:	b661      	cpsie	f
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	df00      	svc	0
 800da78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da7a:	bf00      	nop
 800da7c:	e000ed08 	.word	0xe000ed08

0800da80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800da86:	4b46      	ldr	r3, [pc, #280]	; (800dba0 <xPortStartScheduler+0x120>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a46      	ldr	r2, [pc, #280]	; (800dba4 <xPortStartScheduler+0x124>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d10a      	bne.n	800daa6 <xPortStartScheduler+0x26>
	__asm volatile
 800da90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da94:	f383 8811 	msr	BASEPRI, r3
 800da98:	f3bf 8f6f 	isb	sy
 800da9c:	f3bf 8f4f 	dsb	sy
 800daa0:	613b      	str	r3, [r7, #16]
}
 800daa2:	bf00      	nop
 800daa4:	e7fe      	b.n	800daa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800daa6:	4b3e      	ldr	r3, [pc, #248]	; (800dba0 <xPortStartScheduler+0x120>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4a3f      	ldr	r2, [pc, #252]	; (800dba8 <xPortStartScheduler+0x128>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d10a      	bne.n	800dac6 <xPortStartScheduler+0x46>
	__asm volatile
 800dab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab4:	f383 8811 	msr	BASEPRI, r3
 800dab8:	f3bf 8f6f 	isb	sy
 800dabc:	f3bf 8f4f 	dsb	sy
 800dac0:	60fb      	str	r3, [r7, #12]
}
 800dac2:	bf00      	nop
 800dac4:	e7fe      	b.n	800dac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dac6:	4b39      	ldr	r3, [pc, #228]	; (800dbac <xPortStartScheduler+0x12c>)
 800dac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	22ff      	movs	r2, #255	; 0xff
 800dad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dae0:	78fb      	ldrb	r3, [r7, #3]
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dae8:	b2da      	uxtb	r2, r3
 800daea:	4b31      	ldr	r3, [pc, #196]	; (800dbb0 <xPortStartScheduler+0x130>)
 800daec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800daee:	4b31      	ldr	r3, [pc, #196]	; (800dbb4 <xPortStartScheduler+0x134>)
 800daf0:	2207      	movs	r2, #7
 800daf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800daf4:	e009      	b.n	800db0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800daf6:	4b2f      	ldr	r3, [pc, #188]	; (800dbb4 <xPortStartScheduler+0x134>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	3b01      	subs	r3, #1
 800dafc:	4a2d      	ldr	r2, [pc, #180]	; (800dbb4 <xPortStartScheduler+0x134>)
 800dafe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800db00:	78fb      	ldrb	r3, [r7, #3]
 800db02:	b2db      	uxtb	r3, r3
 800db04:	005b      	lsls	r3, r3, #1
 800db06:	b2db      	uxtb	r3, r3
 800db08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db0a:	78fb      	ldrb	r3, [r7, #3]
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db12:	2b80      	cmp	r3, #128	; 0x80
 800db14:	d0ef      	beq.n	800daf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800db16:	4b27      	ldr	r3, [pc, #156]	; (800dbb4 <xPortStartScheduler+0x134>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f1c3 0307 	rsb	r3, r3, #7
 800db1e:	2b04      	cmp	r3, #4
 800db20:	d00a      	beq.n	800db38 <xPortStartScheduler+0xb8>
	__asm volatile
 800db22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db26:	f383 8811 	msr	BASEPRI, r3
 800db2a:	f3bf 8f6f 	isb	sy
 800db2e:	f3bf 8f4f 	dsb	sy
 800db32:	60bb      	str	r3, [r7, #8]
}
 800db34:	bf00      	nop
 800db36:	e7fe      	b.n	800db36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800db38:	4b1e      	ldr	r3, [pc, #120]	; (800dbb4 <xPortStartScheduler+0x134>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	021b      	lsls	r3, r3, #8
 800db3e:	4a1d      	ldr	r2, [pc, #116]	; (800dbb4 <xPortStartScheduler+0x134>)
 800db40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800db42:	4b1c      	ldr	r3, [pc, #112]	; (800dbb4 <xPortStartScheduler+0x134>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800db4a:	4a1a      	ldr	r2, [pc, #104]	; (800dbb4 <xPortStartScheduler+0x134>)
 800db4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	b2da      	uxtb	r2, r3
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800db56:	4b18      	ldr	r3, [pc, #96]	; (800dbb8 <xPortStartScheduler+0x138>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a17      	ldr	r2, [pc, #92]	; (800dbb8 <xPortStartScheduler+0x138>)
 800db5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800db60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800db62:	4b15      	ldr	r3, [pc, #84]	; (800dbb8 <xPortStartScheduler+0x138>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a14      	ldr	r2, [pc, #80]	; (800dbb8 <xPortStartScheduler+0x138>)
 800db68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800db6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800db6e:	f000 f8dd 	bl	800dd2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db72:	4b12      	ldr	r3, [pc, #72]	; (800dbbc <xPortStartScheduler+0x13c>)
 800db74:	2200      	movs	r2, #0
 800db76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db78:	f000 f8fc 	bl	800dd74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db7c:	4b10      	ldr	r3, [pc, #64]	; (800dbc0 <xPortStartScheduler+0x140>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4a0f      	ldr	r2, [pc, #60]	; (800dbc0 <xPortStartScheduler+0x140>)
 800db82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800db86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db88:	f7ff ff66 	bl	800da58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db8c:	f7ff f84a 	bl	800cc24 <vTaskSwitchContext>
	prvTaskExitError();
 800db90:	f7ff ff20 	bl	800d9d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3718      	adds	r7, #24
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	e000ed00 	.word	0xe000ed00
 800dba4:	410fc271 	.word	0x410fc271
 800dba8:	410fc270 	.word	0x410fc270
 800dbac:	e000e400 	.word	0xe000e400
 800dbb0:	20001d74 	.word	0x20001d74
 800dbb4:	20001d78 	.word	0x20001d78
 800dbb8:	e000ed20 	.word	0xe000ed20
 800dbbc:	20000010 	.word	0x20000010
 800dbc0:	e000ef34 	.word	0xe000ef34

0800dbc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
	__asm volatile
 800dbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbce:	f383 8811 	msr	BASEPRI, r3
 800dbd2:	f3bf 8f6f 	isb	sy
 800dbd6:	f3bf 8f4f 	dsb	sy
 800dbda:	607b      	str	r3, [r7, #4]
}
 800dbdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dbde:	4b0f      	ldr	r3, [pc, #60]	; (800dc1c <vPortEnterCritical+0x58>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	4a0d      	ldr	r2, [pc, #52]	; (800dc1c <vPortEnterCritical+0x58>)
 800dbe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dbe8:	4b0c      	ldr	r3, [pc, #48]	; (800dc1c <vPortEnterCritical+0x58>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d10f      	bne.n	800dc10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dbf0:	4b0b      	ldr	r3, [pc, #44]	; (800dc20 <vPortEnterCritical+0x5c>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d00a      	beq.n	800dc10 <vPortEnterCritical+0x4c>
	__asm volatile
 800dbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfe:	f383 8811 	msr	BASEPRI, r3
 800dc02:	f3bf 8f6f 	isb	sy
 800dc06:	f3bf 8f4f 	dsb	sy
 800dc0a:	603b      	str	r3, [r7, #0]
}
 800dc0c:	bf00      	nop
 800dc0e:	e7fe      	b.n	800dc0e <vPortEnterCritical+0x4a>
	}
}
 800dc10:	bf00      	nop
 800dc12:	370c      	adds	r7, #12
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr
 800dc1c:	20000010 	.word	0x20000010
 800dc20:	e000ed04 	.word	0xe000ed04

0800dc24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dc2a:	4b12      	ldr	r3, [pc, #72]	; (800dc74 <vPortExitCritical+0x50>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d10a      	bne.n	800dc48 <vPortExitCritical+0x24>
	__asm volatile
 800dc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc36:	f383 8811 	msr	BASEPRI, r3
 800dc3a:	f3bf 8f6f 	isb	sy
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	607b      	str	r3, [r7, #4]
}
 800dc44:	bf00      	nop
 800dc46:	e7fe      	b.n	800dc46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dc48:	4b0a      	ldr	r3, [pc, #40]	; (800dc74 <vPortExitCritical+0x50>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	3b01      	subs	r3, #1
 800dc4e:	4a09      	ldr	r2, [pc, #36]	; (800dc74 <vPortExitCritical+0x50>)
 800dc50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dc52:	4b08      	ldr	r3, [pc, #32]	; (800dc74 <vPortExitCritical+0x50>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d105      	bne.n	800dc66 <vPortExitCritical+0x42>
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	f383 8811 	msr	BASEPRI, r3
}
 800dc64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dc66:	bf00      	nop
 800dc68:	370c      	adds	r7, #12
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr
 800dc72:	bf00      	nop
 800dc74:	20000010 	.word	0x20000010
	...

0800dc80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc80:	f3ef 8009 	mrs	r0, PSP
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	4b15      	ldr	r3, [pc, #84]	; (800dce0 <pxCurrentTCBConst>)
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	f01e 0f10 	tst.w	lr, #16
 800dc90:	bf08      	it	eq
 800dc92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc9a:	6010      	str	r0, [r2, #0]
 800dc9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dca4:	f380 8811 	msr	BASEPRI, r0
 800dca8:	f3bf 8f4f 	dsb	sy
 800dcac:	f3bf 8f6f 	isb	sy
 800dcb0:	f7fe ffb8 	bl	800cc24 <vTaskSwitchContext>
 800dcb4:	f04f 0000 	mov.w	r0, #0
 800dcb8:	f380 8811 	msr	BASEPRI, r0
 800dcbc:	bc09      	pop	{r0, r3}
 800dcbe:	6819      	ldr	r1, [r3, #0]
 800dcc0:	6808      	ldr	r0, [r1, #0]
 800dcc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc6:	f01e 0f10 	tst.w	lr, #16
 800dcca:	bf08      	it	eq
 800dccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dcd0:	f380 8809 	msr	PSP, r0
 800dcd4:	f3bf 8f6f 	isb	sy
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop
 800dcdc:	f3af 8000 	nop.w

0800dce0 <pxCurrentTCBConst>:
 800dce0:	20001748 	.word	0x20001748
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dce4:	bf00      	nop
 800dce6:	bf00      	nop

0800dce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
	__asm volatile
 800dcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf2:	f383 8811 	msr	BASEPRI, r3
 800dcf6:	f3bf 8f6f 	isb	sy
 800dcfa:	f3bf 8f4f 	dsb	sy
 800dcfe:	607b      	str	r3, [r7, #4]
}
 800dd00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dd02:	f7fe fed5 	bl	800cab0 <xTaskIncrementTick>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d003      	beq.n	800dd14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dd0c:	4b06      	ldr	r3, [pc, #24]	; (800dd28 <xPortSysTickHandler+0x40>)
 800dd0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd12:	601a      	str	r2, [r3, #0]
 800dd14:	2300      	movs	r3, #0
 800dd16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	f383 8811 	msr	BASEPRI, r3
}
 800dd1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dd20:	bf00      	nop
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	e000ed04 	.word	0xe000ed04

0800dd2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dd30:	4b0b      	ldr	r3, [pc, #44]	; (800dd60 <vPortSetupTimerInterrupt+0x34>)
 800dd32:	2200      	movs	r2, #0
 800dd34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dd36:	4b0b      	ldr	r3, [pc, #44]	; (800dd64 <vPortSetupTimerInterrupt+0x38>)
 800dd38:	2200      	movs	r2, #0
 800dd3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dd3c:	4b0a      	ldr	r3, [pc, #40]	; (800dd68 <vPortSetupTimerInterrupt+0x3c>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4a0a      	ldr	r2, [pc, #40]	; (800dd6c <vPortSetupTimerInterrupt+0x40>)
 800dd42:	fba2 2303 	umull	r2, r3, r2, r3
 800dd46:	099b      	lsrs	r3, r3, #6
 800dd48:	4a09      	ldr	r2, [pc, #36]	; (800dd70 <vPortSetupTimerInterrupt+0x44>)
 800dd4a:	3b01      	subs	r3, #1
 800dd4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dd4e:	4b04      	ldr	r3, [pc, #16]	; (800dd60 <vPortSetupTimerInterrupt+0x34>)
 800dd50:	2207      	movs	r2, #7
 800dd52:	601a      	str	r2, [r3, #0]
}
 800dd54:	bf00      	nop
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr
 800dd5e:	bf00      	nop
 800dd60:	e000e010 	.word	0xe000e010
 800dd64:	e000e018 	.word	0xe000e018
 800dd68:	20000000 	.word	0x20000000
 800dd6c:	10624dd3 	.word	0x10624dd3
 800dd70:	e000e014 	.word	0xe000e014

0800dd74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dd84 <vPortEnableVFP+0x10>
 800dd78:	6801      	ldr	r1, [r0, #0]
 800dd7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dd7e:	6001      	str	r1, [r0, #0]
 800dd80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd82:	bf00      	nop
 800dd84:	e000ed88 	.word	0xe000ed88

0800dd88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dd88:	b480      	push	{r7}
 800dd8a:	b085      	sub	sp, #20
 800dd8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dd8e:	f3ef 8305 	mrs	r3, IPSR
 800dd92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2b0f      	cmp	r3, #15
 800dd98:	d914      	bls.n	800ddc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dd9a:	4a17      	ldr	r2, [pc, #92]	; (800ddf8 <vPortValidateInterruptPriority+0x70>)
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	4413      	add	r3, r2
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dda4:	4b15      	ldr	r3, [pc, #84]	; (800ddfc <vPortValidateInterruptPriority+0x74>)
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	7afa      	ldrb	r2, [r7, #11]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d20a      	bcs.n	800ddc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ddae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb2:	f383 8811 	msr	BASEPRI, r3
 800ddb6:	f3bf 8f6f 	isb	sy
 800ddba:	f3bf 8f4f 	dsb	sy
 800ddbe:	607b      	str	r3, [r7, #4]
}
 800ddc0:	bf00      	nop
 800ddc2:	e7fe      	b.n	800ddc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ddc4:	4b0e      	ldr	r3, [pc, #56]	; (800de00 <vPortValidateInterruptPriority+0x78>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ddcc:	4b0d      	ldr	r3, [pc, #52]	; (800de04 <vPortValidateInterruptPriority+0x7c>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d90a      	bls.n	800ddea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ddd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd8:	f383 8811 	msr	BASEPRI, r3
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	603b      	str	r3, [r7, #0]
}
 800dde6:	bf00      	nop
 800dde8:	e7fe      	b.n	800dde8 <vPortValidateInterruptPriority+0x60>
	}
 800ddea:	bf00      	nop
 800ddec:	3714      	adds	r7, #20
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	e000e3f0 	.word	0xe000e3f0
 800ddfc:	20001d74 	.word	0x20001d74
 800de00:	e000ed0c 	.word	0xe000ed0c
 800de04:	20001d78 	.word	0x20001d78

0800de08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b08a      	sub	sp, #40	; 0x28
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800de10:	2300      	movs	r3, #0
 800de12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800de14:	f7fe fd90 	bl	800c938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800de18:	4b5b      	ldr	r3, [pc, #364]	; (800df88 <pvPortMalloc+0x180>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d101      	bne.n	800de24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800de20:	f000 f920 	bl	800e064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800de24:	4b59      	ldr	r3, [pc, #356]	; (800df8c <pvPortMalloc+0x184>)
 800de26:	681a      	ldr	r2, [r3, #0]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4013      	ands	r3, r2
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f040 8093 	bne.w	800df58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d01d      	beq.n	800de74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800de38:	2208      	movs	r2, #8
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4413      	add	r3, r2
 800de3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f003 0307 	and.w	r3, r3, #7
 800de46:	2b00      	cmp	r3, #0
 800de48:	d014      	beq.n	800de74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f023 0307 	bic.w	r3, r3, #7
 800de50:	3308      	adds	r3, #8
 800de52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f003 0307 	and.w	r3, r3, #7
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d00a      	beq.n	800de74 <pvPortMalloc+0x6c>
	__asm volatile
 800de5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de62:	f383 8811 	msr	BASEPRI, r3
 800de66:	f3bf 8f6f 	isb	sy
 800de6a:	f3bf 8f4f 	dsb	sy
 800de6e:	617b      	str	r3, [r7, #20]
}
 800de70:	bf00      	nop
 800de72:	e7fe      	b.n	800de72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d06e      	beq.n	800df58 <pvPortMalloc+0x150>
 800de7a:	4b45      	ldr	r3, [pc, #276]	; (800df90 <pvPortMalloc+0x188>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	429a      	cmp	r2, r3
 800de82:	d869      	bhi.n	800df58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800de84:	4b43      	ldr	r3, [pc, #268]	; (800df94 <pvPortMalloc+0x18c>)
 800de86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800de88:	4b42      	ldr	r3, [pc, #264]	; (800df94 <pvPortMalloc+0x18c>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de8e:	e004      	b.n	800de9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800de90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800de94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d903      	bls.n	800deac <pvPortMalloc+0xa4>
 800dea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d1f1      	bne.n	800de90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800deac:	4b36      	ldr	r3, [pc, #216]	; (800df88 <pvPortMalloc+0x180>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d050      	beq.n	800df58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800deb6:	6a3b      	ldr	r3, [r7, #32]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	2208      	movs	r2, #8
 800debc:	4413      	add	r3, r2
 800debe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	6a3b      	ldr	r3, [r7, #32]
 800dec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deca:	685a      	ldr	r2, [r3, #4]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	1ad2      	subs	r2, r2, r3
 800ded0:	2308      	movs	r3, #8
 800ded2:	005b      	lsls	r3, r3, #1
 800ded4:	429a      	cmp	r2, r3
 800ded6:	d91f      	bls.n	800df18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ded8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	4413      	add	r3, r2
 800dede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	f003 0307 	and.w	r3, r3, #7
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00a      	beq.n	800df00 <pvPortMalloc+0xf8>
	__asm volatile
 800deea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deee:	f383 8811 	msr	BASEPRI, r3
 800def2:	f3bf 8f6f 	isb	sy
 800def6:	f3bf 8f4f 	dsb	sy
 800defa:	613b      	str	r3, [r7, #16]
}
 800defc:	bf00      	nop
 800defe:	e7fe      	b.n	800defe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800df00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df02:	685a      	ldr	r2, [r3, #4]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	1ad2      	subs	r2, r2, r3
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800df0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0e:	687a      	ldr	r2, [r7, #4]
 800df10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800df12:	69b8      	ldr	r0, [r7, #24]
 800df14:	f000 f908 	bl	800e128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800df18:	4b1d      	ldr	r3, [pc, #116]	; (800df90 <pvPortMalloc+0x188>)
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	1ad3      	subs	r3, r2, r3
 800df22:	4a1b      	ldr	r2, [pc, #108]	; (800df90 <pvPortMalloc+0x188>)
 800df24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800df26:	4b1a      	ldr	r3, [pc, #104]	; (800df90 <pvPortMalloc+0x188>)
 800df28:	681a      	ldr	r2, [r3, #0]
 800df2a:	4b1b      	ldr	r3, [pc, #108]	; (800df98 <pvPortMalloc+0x190>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d203      	bcs.n	800df3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800df32:	4b17      	ldr	r3, [pc, #92]	; (800df90 <pvPortMalloc+0x188>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4a18      	ldr	r2, [pc, #96]	; (800df98 <pvPortMalloc+0x190>)
 800df38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800df3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3c:	685a      	ldr	r2, [r3, #4]
 800df3e:	4b13      	ldr	r3, [pc, #76]	; (800df8c <pvPortMalloc+0x184>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	431a      	orrs	r2, r3
 800df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800df48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4a:	2200      	movs	r2, #0
 800df4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800df4e:	4b13      	ldr	r3, [pc, #76]	; (800df9c <pvPortMalloc+0x194>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	3301      	adds	r3, #1
 800df54:	4a11      	ldr	r2, [pc, #68]	; (800df9c <pvPortMalloc+0x194>)
 800df56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800df58:	f7fe fcfc 	bl	800c954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800df5c:	69fb      	ldr	r3, [r7, #28]
 800df5e:	f003 0307 	and.w	r3, r3, #7
 800df62:	2b00      	cmp	r3, #0
 800df64:	d00a      	beq.n	800df7c <pvPortMalloc+0x174>
	__asm volatile
 800df66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6a:	f383 8811 	msr	BASEPRI, r3
 800df6e:	f3bf 8f6f 	isb	sy
 800df72:	f3bf 8f4f 	dsb	sy
 800df76:	60fb      	str	r3, [r7, #12]
}
 800df78:	bf00      	nop
 800df7a:	e7fe      	b.n	800df7a <pvPortMalloc+0x172>
	return pvReturn;
 800df7c:	69fb      	ldr	r3, [r7, #28]
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3728      	adds	r7, #40	; 0x28
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop
 800df88:	20005984 	.word	0x20005984
 800df8c:	20005998 	.word	0x20005998
 800df90:	20005988 	.word	0x20005988
 800df94:	2000597c 	.word	0x2000597c
 800df98:	2000598c 	.word	0x2000598c
 800df9c:	20005990 	.word	0x20005990

0800dfa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d04d      	beq.n	800e04e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dfb2:	2308      	movs	r3, #8
 800dfb4:	425b      	negs	r3, r3
 800dfb6:	697a      	ldr	r2, [r7, #20]
 800dfb8:	4413      	add	r3, r2
 800dfba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	685a      	ldr	r2, [r3, #4]
 800dfc4:	4b24      	ldr	r3, [pc, #144]	; (800e058 <vPortFree+0xb8>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4013      	ands	r3, r2
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d10a      	bne.n	800dfe4 <vPortFree+0x44>
	__asm volatile
 800dfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd2:	f383 8811 	msr	BASEPRI, r3
 800dfd6:	f3bf 8f6f 	isb	sy
 800dfda:	f3bf 8f4f 	dsb	sy
 800dfde:	60fb      	str	r3, [r7, #12]
}
 800dfe0:	bf00      	nop
 800dfe2:	e7fe      	b.n	800dfe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d00a      	beq.n	800e002 <vPortFree+0x62>
	__asm volatile
 800dfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff0:	f383 8811 	msr	BASEPRI, r3
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	f3bf 8f4f 	dsb	sy
 800dffc:	60bb      	str	r3, [r7, #8]
}
 800dffe:	bf00      	nop
 800e000:	e7fe      	b.n	800e000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	685a      	ldr	r2, [r3, #4]
 800e006:	4b14      	ldr	r3, [pc, #80]	; (800e058 <vPortFree+0xb8>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4013      	ands	r3, r2
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d01e      	beq.n	800e04e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d11a      	bne.n	800e04e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	685a      	ldr	r2, [r3, #4]
 800e01c:	4b0e      	ldr	r3, [pc, #56]	; (800e058 <vPortFree+0xb8>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	43db      	mvns	r3, r3
 800e022:	401a      	ands	r2, r3
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e028:	f7fe fc86 	bl	800c938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	685a      	ldr	r2, [r3, #4]
 800e030:	4b0a      	ldr	r3, [pc, #40]	; (800e05c <vPortFree+0xbc>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4413      	add	r3, r2
 800e036:	4a09      	ldr	r2, [pc, #36]	; (800e05c <vPortFree+0xbc>)
 800e038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e03a:	6938      	ldr	r0, [r7, #16]
 800e03c:	f000 f874 	bl	800e128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e040:	4b07      	ldr	r3, [pc, #28]	; (800e060 <vPortFree+0xc0>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	3301      	adds	r3, #1
 800e046:	4a06      	ldr	r2, [pc, #24]	; (800e060 <vPortFree+0xc0>)
 800e048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e04a:	f7fe fc83 	bl	800c954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e04e:	bf00      	nop
 800e050:	3718      	adds	r7, #24
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	20005998 	.word	0x20005998
 800e05c:	20005988 	.word	0x20005988
 800e060:	20005994 	.word	0x20005994

0800e064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e064:	b480      	push	{r7}
 800e066:	b085      	sub	sp, #20
 800e068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e06a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e06e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e070:	4b27      	ldr	r3, [pc, #156]	; (800e110 <prvHeapInit+0xac>)
 800e072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f003 0307 	and.w	r3, r3, #7
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d00c      	beq.n	800e098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	3307      	adds	r3, #7
 800e082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f023 0307 	bic.w	r3, r3, #7
 800e08a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e08c:	68ba      	ldr	r2, [r7, #8]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	4a1f      	ldr	r2, [pc, #124]	; (800e110 <prvHeapInit+0xac>)
 800e094:	4413      	add	r3, r2
 800e096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e09c:	4a1d      	ldr	r2, [pc, #116]	; (800e114 <prvHeapInit+0xb0>)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e0a2:	4b1c      	ldr	r3, [pc, #112]	; (800e114 <prvHeapInit+0xb0>)
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	68ba      	ldr	r2, [r7, #8]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e0b0:	2208      	movs	r2, #8
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	1a9b      	subs	r3, r3, r2
 800e0b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f023 0307 	bic.w	r3, r3, #7
 800e0be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	4a15      	ldr	r2, [pc, #84]	; (800e118 <prvHeapInit+0xb4>)
 800e0c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e0c6:	4b14      	ldr	r3, [pc, #80]	; (800e118 <prvHeapInit+0xb4>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e0ce:	4b12      	ldr	r3, [pc, #72]	; (800e118 <prvHeapInit+0xb4>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	68fa      	ldr	r2, [r7, #12]
 800e0de:	1ad2      	subs	r2, r2, r3
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e0e4:	4b0c      	ldr	r3, [pc, #48]	; (800e118 <prvHeapInit+0xb4>)
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	4a0a      	ldr	r2, [pc, #40]	; (800e11c <prvHeapInit+0xb8>)
 800e0f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	4a09      	ldr	r2, [pc, #36]	; (800e120 <prvHeapInit+0xbc>)
 800e0fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e0fc:	4b09      	ldr	r3, [pc, #36]	; (800e124 <prvHeapInit+0xc0>)
 800e0fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e102:	601a      	str	r2, [r3, #0]
}
 800e104:	bf00      	nop
 800e106:	3714      	adds	r7, #20
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr
 800e110:	20001d7c 	.word	0x20001d7c
 800e114:	2000597c 	.word	0x2000597c
 800e118:	20005984 	.word	0x20005984
 800e11c:	2000598c 	.word	0x2000598c
 800e120:	20005988 	.word	0x20005988
 800e124:	20005998 	.word	0x20005998

0800e128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e128:	b480      	push	{r7}
 800e12a:	b085      	sub	sp, #20
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e130:	4b28      	ldr	r3, [pc, #160]	; (800e1d4 <prvInsertBlockIntoFreeList+0xac>)
 800e132:	60fb      	str	r3, [r7, #12]
 800e134:	e002      	b.n	800e13c <prvInsertBlockIntoFreeList+0x14>
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	60fb      	str	r3, [r7, #12]
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	429a      	cmp	r2, r3
 800e144:	d8f7      	bhi.n	800e136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	68ba      	ldr	r2, [r7, #8]
 800e150:	4413      	add	r3, r2
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	429a      	cmp	r2, r3
 800e156:	d108      	bne.n	800e16a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	685a      	ldr	r2, [r3, #4]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	441a      	add	r2, r3
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	68ba      	ldr	r2, [r7, #8]
 800e174:	441a      	add	r2, r3
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d118      	bne.n	800e1b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	4b15      	ldr	r3, [pc, #84]	; (800e1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	429a      	cmp	r2, r3
 800e188:	d00d      	beq.n	800e1a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	685a      	ldr	r2, [r3, #4]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	441a      	add	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	681a      	ldr	r2, [r3, #0]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	601a      	str	r2, [r3, #0]
 800e1a4:	e008      	b.n	800e1b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e1a6:	4b0c      	ldr	r3, [pc, #48]	; (800e1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	601a      	str	r2, [r3, #0]
 800e1ae:	e003      	b.n	800e1b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681a      	ldr	r2, [r3, #0]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d002      	beq.n	800e1c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1c6:	bf00      	nop
 800e1c8:	3714      	adds	r7, #20
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr
 800e1d2:	bf00      	nop
 800e1d4:	2000597c 	.word	0x2000597c
 800e1d8:	20005984 	.word	0x20005984

0800e1dc <calloc>:
 800e1dc:	4b02      	ldr	r3, [pc, #8]	; (800e1e8 <calloc+0xc>)
 800e1de:	460a      	mov	r2, r1
 800e1e0:	4601      	mov	r1, r0
 800e1e2:	6818      	ldr	r0, [r3, #0]
 800e1e4:	f000 b95c 	b.w	800e4a0 <_calloc_r>
 800e1e8:	20000014 	.word	0x20000014

0800e1ec <__errno>:
 800e1ec:	4b01      	ldr	r3, [pc, #4]	; (800e1f4 <__errno+0x8>)
 800e1ee:	6818      	ldr	r0, [r3, #0]
 800e1f0:	4770      	bx	lr
 800e1f2:	bf00      	nop
 800e1f4:	20000014 	.word	0x20000014

0800e1f8 <std>:
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	b510      	push	{r4, lr}
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	e9c0 3300 	strd	r3, r3, [r0]
 800e202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e206:	6083      	str	r3, [r0, #8]
 800e208:	8181      	strh	r1, [r0, #12]
 800e20a:	6643      	str	r3, [r0, #100]	; 0x64
 800e20c:	81c2      	strh	r2, [r0, #14]
 800e20e:	6183      	str	r3, [r0, #24]
 800e210:	4619      	mov	r1, r3
 800e212:	2208      	movs	r2, #8
 800e214:	305c      	adds	r0, #92	; 0x5c
 800e216:	f000 f93b 	bl	800e490 <memset>
 800e21a:	4b05      	ldr	r3, [pc, #20]	; (800e230 <std+0x38>)
 800e21c:	6263      	str	r3, [r4, #36]	; 0x24
 800e21e:	4b05      	ldr	r3, [pc, #20]	; (800e234 <std+0x3c>)
 800e220:	62a3      	str	r3, [r4, #40]	; 0x28
 800e222:	4b05      	ldr	r3, [pc, #20]	; (800e238 <std+0x40>)
 800e224:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e226:	4b05      	ldr	r3, [pc, #20]	; (800e23c <std+0x44>)
 800e228:	6224      	str	r4, [r4, #32]
 800e22a:	6323      	str	r3, [r4, #48]	; 0x30
 800e22c:	bd10      	pop	{r4, pc}
 800e22e:	bf00      	nop
 800e230:	0800e7c1 	.word	0x0800e7c1
 800e234:	0800e7e7 	.word	0x0800e7e7
 800e238:	0800e81f 	.word	0x0800e81f
 800e23c:	0800e843 	.word	0x0800e843

0800e240 <_cleanup_r>:
 800e240:	4901      	ldr	r1, [pc, #4]	; (800e248 <_cleanup_r+0x8>)
 800e242:	f000 b8af 	b.w	800e3a4 <_fwalk_reent>
 800e246:	bf00      	nop
 800e248:	0800ec8d 	.word	0x0800ec8d

0800e24c <__sfmoreglue>:
 800e24c:	b570      	push	{r4, r5, r6, lr}
 800e24e:	2268      	movs	r2, #104	; 0x68
 800e250:	1e4d      	subs	r5, r1, #1
 800e252:	4355      	muls	r5, r2
 800e254:	460e      	mov	r6, r1
 800e256:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e25a:	f000 f9a3 	bl	800e5a4 <_malloc_r>
 800e25e:	4604      	mov	r4, r0
 800e260:	b140      	cbz	r0, 800e274 <__sfmoreglue+0x28>
 800e262:	2100      	movs	r1, #0
 800e264:	e9c0 1600 	strd	r1, r6, [r0]
 800e268:	300c      	adds	r0, #12
 800e26a:	60a0      	str	r0, [r4, #8]
 800e26c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e270:	f000 f90e 	bl	800e490 <memset>
 800e274:	4620      	mov	r0, r4
 800e276:	bd70      	pop	{r4, r5, r6, pc}

0800e278 <__sfp_lock_acquire>:
 800e278:	4801      	ldr	r0, [pc, #4]	; (800e280 <__sfp_lock_acquire+0x8>)
 800e27a:	f000 b8d8 	b.w	800e42e <__retarget_lock_acquire_recursive>
 800e27e:	bf00      	nop
 800e280:	2000599d 	.word	0x2000599d

0800e284 <__sfp_lock_release>:
 800e284:	4801      	ldr	r0, [pc, #4]	; (800e28c <__sfp_lock_release+0x8>)
 800e286:	f000 b8d3 	b.w	800e430 <__retarget_lock_release_recursive>
 800e28a:	bf00      	nop
 800e28c:	2000599d 	.word	0x2000599d

0800e290 <__sinit_lock_acquire>:
 800e290:	4801      	ldr	r0, [pc, #4]	; (800e298 <__sinit_lock_acquire+0x8>)
 800e292:	f000 b8cc 	b.w	800e42e <__retarget_lock_acquire_recursive>
 800e296:	bf00      	nop
 800e298:	2000599e 	.word	0x2000599e

0800e29c <__sinit_lock_release>:
 800e29c:	4801      	ldr	r0, [pc, #4]	; (800e2a4 <__sinit_lock_release+0x8>)
 800e29e:	f000 b8c7 	b.w	800e430 <__retarget_lock_release_recursive>
 800e2a2:	bf00      	nop
 800e2a4:	2000599e 	.word	0x2000599e

0800e2a8 <__sinit>:
 800e2a8:	b510      	push	{r4, lr}
 800e2aa:	4604      	mov	r4, r0
 800e2ac:	f7ff fff0 	bl	800e290 <__sinit_lock_acquire>
 800e2b0:	69a3      	ldr	r3, [r4, #24]
 800e2b2:	b11b      	cbz	r3, 800e2bc <__sinit+0x14>
 800e2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2b8:	f7ff bff0 	b.w	800e29c <__sinit_lock_release>
 800e2bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e2c0:	6523      	str	r3, [r4, #80]	; 0x50
 800e2c2:	4b13      	ldr	r3, [pc, #76]	; (800e310 <__sinit+0x68>)
 800e2c4:	4a13      	ldr	r2, [pc, #76]	; (800e314 <__sinit+0x6c>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e2ca:	42a3      	cmp	r3, r4
 800e2cc:	bf04      	itt	eq
 800e2ce:	2301      	moveq	r3, #1
 800e2d0:	61a3      	streq	r3, [r4, #24]
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	f000 f820 	bl	800e318 <__sfp>
 800e2d8:	6060      	str	r0, [r4, #4]
 800e2da:	4620      	mov	r0, r4
 800e2dc:	f000 f81c 	bl	800e318 <__sfp>
 800e2e0:	60a0      	str	r0, [r4, #8]
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	f000 f818 	bl	800e318 <__sfp>
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	60e0      	str	r0, [r4, #12]
 800e2ec:	2104      	movs	r1, #4
 800e2ee:	6860      	ldr	r0, [r4, #4]
 800e2f0:	f7ff ff82 	bl	800e1f8 <std>
 800e2f4:	68a0      	ldr	r0, [r4, #8]
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	2109      	movs	r1, #9
 800e2fa:	f7ff ff7d 	bl	800e1f8 <std>
 800e2fe:	68e0      	ldr	r0, [r4, #12]
 800e300:	2202      	movs	r2, #2
 800e302:	2112      	movs	r1, #18
 800e304:	f7ff ff78 	bl	800e1f8 <std>
 800e308:	2301      	movs	r3, #1
 800e30a:	61a3      	str	r3, [r4, #24]
 800e30c:	e7d2      	b.n	800e2b4 <__sinit+0xc>
 800e30e:	bf00      	nop
 800e310:	080105a8 	.word	0x080105a8
 800e314:	0800e241 	.word	0x0800e241

0800e318 <__sfp>:
 800e318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e31a:	4607      	mov	r7, r0
 800e31c:	f7ff ffac 	bl	800e278 <__sfp_lock_acquire>
 800e320:	4b1e      	ldr	r3, [pc, #120]	; (800e39c <__sfp+0x84>)
 800e322:	681e      	ldr	r6, [r3, #0]
 800e324:	69b3      	ldr	r3, [r6, #24]
 800e326:	b913      	cbnz	r3, 800e32e <__sfp+0x16>
 800e328:	4630      	mov	r0, r6
 800e32a:	f7ff ffbd 	bl	800e2a8 <__sinit>
 800e32e:	3648      	adds	r6, #72	; 0x48
 800e330:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e334:	3b01      	subs	r3, #1
 800e336:	d503      	bpl.n	800e340 <__sfp+0x28>
 800e338:	6833      	ldr	r3, [r6, #0]
 800e33a:	b30b      	cbz	r3, 800e380 <__sfp+0x68>
 800e33c:	6836      	ldr	r6, [r6, #0]
 800e33e:	e7f7      	b.n	800e330 <__sfp+0x18>
 800e340:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e344:	b9d5      	cbnz	r5, 800e37c <__sfp+0x64>
 800e346:	4b16      	ldr	r3, [pc, #88]	; (800e3a0 <__sfp+0x88>)
 800e348:	60e3      	str	r3, [r4, #12]
 800e34a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e34e:	6665      	str	r5, [r4, #100]	; 0x64
 800e350:	f000 f86c 	bl	800e42c <__retarget_lock_init_recursive>
 800e354:	f7ff ff96 	bl	800e284 <__sfp_lock_release>
 800e358:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e35c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e360:	6025      	str	r5, [r4, #0]
 800e362:	61a5      	str	r5, [r4, #24]
 800e364:	2208      	movs	r2, #8
 800e366:	4629      	mov	r1, r5
 800e368:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e36c:	f000 f890 	bl	800e490 <memset>
 800e370:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e374:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e378:	4620      	mov	r0, r4
 800e37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e37c:	3468      	adds	r4, #104	; 0x68
 800e37e:	e7d9      	b.n	800e334 <__sfp+0x1c>
 800e380:	2104      	movs	r1, #4
 800e382:	4638      	mov	r0, r7
 800e384:	f7ff ff62 	bl	800e24c <__sfmoreglue>
 800e388:	4604      	mov	r4, r0
 800e38a:	6030      	str	r0, [r6, #0]
 800e38c:	2800      	cmp	r0, #0
 800e38e:	d1d5      	bne.n	800e33c <__sfp+0x24>
 800e390:	f7ff ff78 	bl	800e284 <__sfp_lock_release>
 800e394:	230c      	movs	r3, #12
 800e396:	603b      	str	r3, [r7, #0]
 800e398:	e7ee      	b.n	800e378 <__sfp+0x60>
 800e39a:	bf00      	nop
 800e39c:	080105a8 	.word	0x080105a8
 800e3a0:	ffff0001 	.word	0xffff0001

0800e3a4 <_fwalk_reent>:
 800e3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3a8:	4606      	mov	r6, r0
 800e3aa:	4688      	mov	r8, r1
 800e3ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e3b0:	2700      	movs	r7, #0
 800e3b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3b6:	f1b9 0901 	subs.w	r9, r9, #1
 800e3ba:	d505      	bpl.n	800e3c8 <_fwalk_reent+0x24>
 800e3bc:	6824      	ldr	r4, [r4, #0]
 800e3be:	2c00      	cmp	r4, #0
 800e3c0:	d1f7      	bne.n	800e3b2 <_fwalk_reent+0xe>
 800e3c2:	4638      	mov	r0, r7
 800e3c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3c8:	89ab      	ldrh	r3, [r5, #12]
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d907      	bls.n	800e3de <_fwalk_reent+0x3a>
 800e3ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	d003      	beq.n	800e3de <_fwalk_reent+0x3a>
 800e3d6:	4629      	mov	r1, r5
 800e3d8:	4630      	mov	r0, r6
 800e3da:	47c0      	blx	r8
 800e3dc:	4307      	orrs	r7, r0
 800e3de:	3568      	adds	r5, #104	; 0x68
 800e3e0:	e7e9      	b.n	800e3b6 <_fwalk_reent+0x12>
	...

0800e3e4 <__libc_init_array>:
 800e3e4:	b570      	push	{r4, r5, r6, lr}
 800e3e6:	4d0d      	ldr	r5, [pc, #52]	; (800e41c <__libc_init_array+0x38>)
 800e3e8:	4c0d      	ldr	r4, [pc, #52]	; (800e420 <__libc_init_array+0x3c>)
 800e3ea:	1b64      	subs	r4, r4, r5
 800e3ec:	10a4      	asrs	r4, r4, #2
 800e3ee:	2600      	movs	r6, #0
 800e3f0:	42a6      	cmp	r6, r4
 800e3f2:	d109      	bne.n	800e408 <__libc_init_array+0x24>
 800e3f4:	4d0b      	ldr	r5, [pc, #44]	; (800e424 <__libc_init_array+0x40>)
 800e3f6:	4c0c      	ldr	r4, [pc, #48]	; (800e428 <__libc_init_array+0x44>)
 800e3f8:	f001 ff82 	bl	8010300 <_init>
 800e3fc:	1b64      	subs	r4, r4, r5
 800e3fe:	10a4      	asrs	r4, r4, #2
 800e400:	2600      	movs	r6, #0
 800e402:	42a6      	cmp	r6, r4
 800e404:	d105      	bne.n	800e412 <__libc_init_array+0x2e>
 800e406:	bd70      	pop	{r4, r5, r6, pc}
 800e408:	f855 3b04 	ldr.w	r3, [r5], #4
 800e40c:	4798      	blx	r3
 800e40e:	3601      	adds	r6, #1
 800e410:	e7ee      	b.n	800e3f0 <__libc_init_array+0xc>
 800e412:	f855 3b04 	ldr.w	r3, [r5], #4
 800e416:	4798      	blx	r3
 800e418:	3601      	adds	r6, #1
 800e41a:	e7f2      	b.n	800e402 <__libc_init_array+0x1e>
 800e41c:	080107b4 	.word	0x080107b4
 800e420:	080107b4 	.word	0x080107b4
 800e424:	080107b4 	.word	0x080107b4
 800e428:	080107b8 	.word	0x080107b8

0800e42c <__retarget_lock_init_recursive>:
 800e42c:	4770      	bx	lr

0800e42e <__retarget_lock_acquire_recursive>:
 800e42e:	4770      	bx	lr

0800e430 <__retarget_lock_release_recursive>:
 800e430:	4770      	bx	lr
	...

0800e434 <malloc>:
 800e434:	4b02      	ldr	r3, [pc, #8]	; (800e440 <malloc+0xc>)
 800e436:	4601      	mov	r1, r0
 800e438:	6818      	ldr	r0, [r3, #0]
 800e43a:	f000 b8b3 	b.w	800e5a4 <_malloc_r>
 800e43e:	bf00      	nop
 800e440:	20000014 	.word	0x20000014

0800e444 <free>:
 800e444:	4b02      	ldr	r3, [pc, #8]	; (800e450 <free+0xc>)
 800e446:	4601      	mov	r1, r0
 800e448:	6818      	ldr	r0, [r3, #0]
 800e44a:	f000 b83f 	b.w	800e4cc <_free_r>
 800e44e:	bf00      	nop
 800e450:	20000014 	.word	0x20000014

0800e454 <memcmp>:
 800e454:	b510      	push	{r4, lr}
 800e456:	3901      	subs	r1, #1
 800e458:	4402      	add	r2, r0
 800e45a:	4290      	cmp	r0, r2
 800e45c:	d101      	bne.n	800e462 <memcmp+0xe>
 800e45e:	2000      	movs	r0, #0
 800e460:	e005      	b.n	800e46e <memcmp+0x1a>
 800e462:	7803      	ldrb	r3, [r0, #0]
 800e464:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e468:	42a3      	cmp	r3, r4
 800e46a:	d001      	beq.n	800e470 <memcmp+0x1c>
 800e46c:	1b18      	subs	r0, r3, r4
 800e46e:	bd10      	pop	{r4, pc}
 800e470:	3001      	adds	r0, #1
 800e472:	e7f2      	b.n	800e45a <memcmp+0x6>

0800e474 <memcpy>:
 800e474:	440a      	add	r2, r1
 800e476:	4291      	cmp	r1, r2
 800e478:	f100 33ff 	add.w	r3, r0, #4294967295
 800e47c:	d100      	bne.n	800e480 <memcpy+0xc>
 800e47e:	4770      	bx	lr
 800e480:	b510      	push	{r4, lr}
 800e482:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e48a:	4291      	cmp	r1, r2
 800e48c:	d1f9      	bne.n	800e482 <memcpy+0xe>
 800e48e:	bd10      	pop	{r4, pc}

0800e490 <memset>:
 800e490:	4402      	add	r2, r0
 800e492:	4603      	mov	r3, r0
 800e494:	4293      	cmp	r3, r2
 800e496:	d100      	bne.n	800e49a <memset+0xa>
 800e498:	4770      	bx	lr
 800e49a:	f803 1b01 	strb.w	r1, [r3], #1
 800e49e:	e7f9      	b.n	800e494 <memset+0x4>

0800e4a0 <_calloc_r>:
 800e4a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4a2:	fba1 2402 	umull	r2, r4, r1, r2
 800e4a6:	b94c      	cbnz	r4, 800e4bc <_calloc_r+0x1c>
 800e4a8:	4611      	mov	r1, r2
 800e4aa:	9201      	str	r2, [sp, #4]
 800e4ac:	f000 f87a 	bl	800e5a4 <_malloc_r>
 800e4b0:	9a01      	ldr	r2, [sp, #4]
 800e4b2:	4605      	mov	r5, r0
 800e4b4:	b930      	cbnz	r0, 800e4c4 <_calloc_r+0x24>
 800e4b6:	4628      	mov	r0, r5
 800e4b8:	b003      	add	sp, #12
 800e4ba:	bd30      	pop	{r4, r5, pc}
 800e4bc:	220c      	movs	r2, #12
 800e4be:	6002      	str	r2, [r0, #0]
 800e4c0:	2500      	movs	r5, #0
 800e4c2:	e7f8      	b.n	800e4b6 <_calloc_r+0x16>
 800e4c4:	4621      	mov	r1, r4
 800e4c6:	f7ff ffe3 	bl	800e490 <memset>
 800e4ca:	e7f4      	b.n	800e4b6 <_calloc_r+0x16>

0800e4cc <_free_r>:
 800e4cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4ce:	2900      	cmp	r1, #0
 800e4d0:	d044      	beq.n	800e55c <_free_r+0x90>
 800e4d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4d6:	9001      	str	r0, [sp, #4]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f1a1 0404 	sub.w	r4, r1, #4
 800e4de:	bfb8      	it	lt
 800e4e0:	18e4      	addlt	r4, r4, r3
 800e4e2:	f000 fc33 	bl	800ed4c <__malloc_lock>
 800e4e6:	4a1e      	ldr	r2, [pc, #120]	; (800e560 <_free_r+0x94>)
 800e4e8:	9801      	ldr	r0, [sp, #4]
 800e4ea:	6813      	ldr	r3, [r2, #0]
 800e4ec:	b933      	cbnz	r3, 800e4fc <_free_r+0x30>
 800e4ee:	6063      	str	r3, [r4, #4]
 800e4f0:	6014      	str	r4, [r2, #0]
 800e4f2:	b003      	add	sp, #12
 800e4f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4f8:	f000 bc2e 	b.w	800ed58 <__malloc_unlock>
 800e4fc:	42a3      	cmp	r3, r4
 800e4fe:	d908      	bls.n	800e512 <_free_r+0x46>
 800e500:	6825      	ldr	r5, [r4, #0]
 800e502:	1961      	adds	r1, r4, r5
 800e504:	428b      	cmp	r3, r1
 800e506:	bf01      	itttt	eq
 800e508:	6819      	ldreq	r1, [r3, #0]
 800e50a:	685b      	ldreq	r3, [r3, #4]
 800e50c:	1949      	addeq	r1, r1, r5
 800e50e:	6021      	streq	r1, [r4, #0]
 800e510:	e7ed      	b.n	800e4ee <_free_r+0x22>
 800e512:	461a      	mov	r2, r3
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	b10b      	cbz	r3, 800e51c <_free_r+0x50>
 800e518:	42a3      	cmp	r3, r4
 800e51a:	d9fa      	bls.n	800e512 <_free_r+0x46>
 800e51c:	6811      	ldr	r1, [r2, #0]
 800e51e:	1855      	adds	r5, r2, r1
 800e520:	42a5      	cmp	r5, r4
 800e522:	d10b      	bne.n	800e53c <_free_r+0x70>
 800e524:	6824      	ldr	r4, [r4, #0]
 800e526:	4421      	add	r1, r4
 800e528:	1854      	adds	r4, r2, r1
 800e52a:	42a3      	cmp	r3, r4
 800e52c:	6011      	str	r1, [r2, #0]
 800e52e:	d1e0      	bne.n	800e4f2 <_free_r+0x26>
 800e530:	681c      	ldr	r4, [r3, #0]
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	6053      	str	r3, [r2, #4]
 800e536:	4421      	add	r1, r4
 800e538:	6011      	str	r1, [r2, #0]
 800e53a:	e7da      	b.n	800e4f2 <_free_r+0x26>
 800e53c:	d902      	bls.n	800e544 <_free_r+0x78>
 800e53e:	230c      	movs	r3, #12
 800e540:	6003      	str	r3, [r0, #0]
 800e542:	e7d6      	b.n	800e4f2 <_free_r+0x26>
 800e544:	6825      	ldr	r5, [r4, #0]
 800e546:	1961      	adds	r1, r4, r5
 800e548:	428b      	cmp	r3, r1
 800e54a:	bf04      	itt	eq
 800e54c:	6819      	ldreq	r1, [r3, #0]
 800e54e:	685b      	ldreq	r3, [r3, #4]
 800e550:	6063      	str	r3, [r4, #4]
 800e552:	bf04      	itt	eq
 800e554:	1949      	addeq	r1, r1, r5
 800e556:	6021      	streq	r1, [r4, #0]
 800e558:	6054      	str	r4, [r2, #4]
 800e55a:	e7ca      	b.n	800e4f2 <_free_r+0x26>
 800e55c:	b003      	add	sp, #12
 800e55e:	bd30      	pop	{r4, r5, pc}
 800e560:	200059a0 	.word	0x200059a0

0800e564 <sbrk_aligned>:
 800e564:	b570      	push	{r4, r5, r6, lr}
 800e566:	4e0e      	ldr	r6, [pc, #56]	; (800e5a0 <sbrk_aligned+0x3c>)
 800e568:	460c      	mov	r4, r1
 800e56a:	6831      	ldr	r1, [r6, #0]
 800e56c:	4605      	mov	r5, r0
 800e56e:	b911      	cbnz	r1, 800e576 <sbrk_aligned+0x12>
 800e570:	f000 f8f6 	bl	800e760 <_sbrk_r>
 800e574:	6030      	str	r0, [r6, #0]
 800e576:	4621      	mov	r1, r4
 800e578:	4628      	mov	r0, r5
 800e57a:	f000 f8f1 	bl	800e760 <_sbrk_r>
 800e57e:	1c43      	adds	r3, r0, #1
 800e580:	d00a      	beq.n	800e598 <sbrk_aligned+0x34>
 800e582:	1cc4      	adds	r4, r0, #3
 800e584:	f024 0403 	bic.w	r4, r4, #3
 800e588:	42a0      	cmp	r0, r4
 800e58a:	d007      	beq.n	800e59c <sbrk_aligned+0x38>
 800e58c:	1a21      	subs	r1, r4, r0
 800e58e:	4628      	mov	r0, r5
 800e590:	f000 f8e6 	bl	800e760 <_sbrk_r>
 800e594:	3001      	adds	r0, #1
 800e596:	d101      	bne.n	800e59c <sbrk_aligned+0x38>
 800e598:	f04f 34ff 	mov.w	r4, #4294967295
 800e59c:	4620      	mov	r0, r4
 800e59e:	bd70      	pop	{r4, r5, r6, pc}
 800e5a0:	200059a4 	.word	0x200059a4

0800e5a4 <_malloc_r>:
 800e5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a8:	1ccd      	adds	r5, r1, #3
 800e5aa:	f025 0503 	bic.w	r5, r5, #3
 800e5ae:	3508      	adds	r5, #8
 800e5b0:	2d0c      	cmp	r5, #12
 800e5b2:	bf38      	it	cc
 800e5b4:	250c      	movcc	r5, #12
 800e5b6:	2d00      	cmp	r5, #0
 800e5b8:	4607      	mov	r7, r0
 800e5ba:	db01      	blt.n	800e5c0 <_malloc_r+0x1c>
 800e5bc:	42a9      	cmp	r1, r5
 800e5be:	d905      	bls.n	800e5cc <_malloc_r+0x28>
 800e5c0:	230c      	movs	r3, #12
 800e5c2:	603b      	str	r3, [r7, #0]
 800e5c4:	2600      	movs	r6, #0
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5cc:	4e2e      	ldr	r6, [pc, #184]	; (800e688 <_malloc_r+0xe4>)
 800e5ce:	f000 fbbd 	bl	800ed4c <__malloc_lock>
 800e5d2:	6833      	ldr	r3, [r6, #0]
 800e5d4:	461c      	mov	r4, r3
 800e5d6:	bb34      	cbnz	r4, 800e626 <_malloc_r+0x82>
 800e5d8:	4629      	mov	r1, r5
 800e5da:	4638      	mov	r0, r7
 800e5dc:	f7ff ffc2 	bl	800e564 <sbrk_aligned>
 800e5e0:	1c43      	adds	r3, r0, #1
 800e5e2:	4604      	mov	r4, r0
 800e5e4:	d14d      	bne.n	800e682 <_malloc_r+0xde>
 800e5e6:	6834      	ldr	r4, [r6, #0]
 800e5e8:	4626      	mov	r6, r4
 800e5ea:	2e00      	cmp	r6, #0
 800e5ec:	d140      	bne.n	800e670 <_malloc_r+0xcc>
 800e5ee:	6823      	ldr	r3, [r4, #0]
 800e5f0:	4631      	mov	r1, r6
 800e5f2:	4638      	mov	r0, r7
 800e5f4:	eb04 0803 	add.w	r8, r4, r3
 800e5f8:	f000 f8b2 	bl	800e760 <_sbrk_r>
 800e5fc:	4580      	cmp	r8, r0
 800e5fe:	d13a      	bne.n	800e676 <_malloc_r+0xd2>
 800e600:	6821      	ldr	r1, [r4, #0]
 800e602:	3503      	adds	r5, #3
 800e604:	1a6d      	subs	r5, r5, r1
 800e606:	f025 0503 	bic.w	r5, r5, #3
 800e60a:	3508      	adds	r5, #8
 800e60c:	2d0c      	cmp	r5, #12
 800e60e:	bf38      	it	cc
 800e610:	250c      	movcc	r5, #12
 800e612:	4629      	mov	r1, r5
 800e614:	4638      	mov	r0, r7
 800e616:	f7ff ffa5 	bl	800e564 <sbrk_aligned>
 800e61a:	3001      	adds	r0, #1
 800e61c:	d02b      	beq.n	800e676 <_malloc_r+0xd2>
 800e61e:	6823      	ldr	r3, [r4, #0]
 800e620:	442b      	add	r3, r5
 800e622:	6023      	str	r3, [r4, #0]
 800e624:	e00e      	b.n	800e644 <_malloc_r+0xa0>
 800e626:	6822      	ldr	r2, [r4, #0]
 800e628:	1b52      	subs	r2, r2, r5
 800e62a:	d41e      	bmi.n	800e66a <_malloc_r+0xc6>
 800e62c:	2a0b      	cmp	r2, #11
 800e62e:	d916      	bls.n	800e65e <_malloc_r+0xba>
 800e630:	1961      	adds	r1, r4, r5
 800e632:	42a3      	cmp	r3, r4
 800e634:	6025      	str	r5, [r4, #0]
 800e636:	bf18      	it	ne
 800e638:	6059      	strne	r1, [r3, #4]
 800e63a:	6863      	ldr	r3, [r4, #4]
 800e63c:	bf08      	it	eq
 800e63e:	6031      	streq	r1, [r6, #0]
 800e640:	5162      	str	r2, [r4, r5]
 800e642:	604b      	str	r3, [r1, #4]
 800e644:	4638      	mov	r0, r7
 800e646:	f104 060b 	add.w	r6, r4, #11
 800e64a:	f000 fb85 	bl	800ed58 <__malloc_unlock>
 800e64e:	f026 0607 	bic.w	r6, r6, #7
 800e652:	1d23      	adds	r3, r4, #4
 800e654:	1af2      	subs	r2, r6, r3
 800e656:	d0b6      	beq.n	800e5c6 <_malloc_r+0x22>
 800e658:	1b9b      	subs	r3, r3, r6
 800e65a:	50a3      	str	r3, [r4, r2]
 800e65c:	e7b3      	b.n	800e5c6 <_malloc_r+0x22>
 800e65e:	6862      	ldr	r2, [r4, #4]
 800e660:	42a3      	cmp	r3, r4
 800e662:	bf0c      	ite	eq
 800e664:	6032      	streq	r2, [r6, #0]
 800e666:	605a      	strne	r2, [r3, #4]
 800e668:	e7ec      	b.n	800e644 <_malloc_r+0xa0>
 800e66a:	4623      	mov	r3, r4
 800e66c:	6864      	ldr	r4, [r4, #4]
 800e66e:	e7b2      	b.n	800e5d6 <_malloc_r+0x32>
 800e670:	4634      	mov	r4, r6
 800e672:	6876      	ldr	r6, [r6, #4]
 800e674:	e7b9      	b.n	800e5ea <_malloc_r+0x46>
 800e676:	230c      	movs	r3, #12
 800e678:	603b      	str	r3, [r7, #0]
 800e67a:	4638      	mov	r0, r7
 800e67c:	f000 fb6c 	bl	800ed58 <__malloc_unlock>
 800e680:	e7a1      	b.n	800e5c6 <_malloc_r+0x22>
 800e682:	6025      	str	r5, [r4, #0]
 800e684:	e7de      	b.n	800e644 <_malloc_r+0xa0>
 800e686:	bf00      	nop
 800e688:	200059a0 	.word	0x200059a0

0800e68c <cleanup_glue>:
 800e68c:	b538      	push	{r3, r4, r5, lr}
 800e68e:	460c      	mov	r4, r1
 800e690:	6809      	ldr	r1, [r1, #0]
 800e692:	4605      	mov	r5, r0
 800e694:	b109      	cbz	r1, 800e69a <cleanup_glue+0xe>
 800e696:	f7ff fff9 	bl	800e68c <cleanup_glue>
 800e69a:	4621      	mov	r1, r4
 800e69c:	4628      	mov	r0, r5
 800e69e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6a2:	f7ff bf13 	b.w	800e4cc <_free_r>
	...

0800e6a8 <_reclaim_reent>:
 800e6a8:	4b2c      	ldr	r3, [pc, #176]	; (800e75c <_reclaim_reent+0xb4>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4283      	cmp	r3, r0
 800e6ae:	b570      	push	{r4, r5, r6, lr}
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	d051      	beq.n	800e758 <_reclaim_reent+0xb0>
 800e6b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e6b6:	b143      	cbz	r3, 800e6ca <_reclaim_reent+0x22>
 800e6b8:	68db      	ldr	r3, [r3, #12]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d14a      	bne.n	800e754 <_reclaim_reent+0xac>
 800e6be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6c0:	6819      	ldr	r1, [r3, #0]
 800e6c2:	b111      	cbz	r1, 800e6ca <_reclaim_reent+0x22>
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	f7ff ff01 	bl	800e4cc <_free_r>
 800e6ca:	6961      	ldr	r1, [r4, #20]
 800e6cc:	b111      	cbz	r1, 800e6d4 <_reclaim_reent+0x2c>
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	f7ff fefc 	bl	800e4cc <_free_r>
 800e6d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e6d6:	b111      	cbz	r1, 800e6de <_reclaim_reent+0x36>
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f7ff fef7 	bl	800e4cc <_free_r>
 800e6de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e6e0:	b111      	cbz	r1, 800e6e8 <_reclaim_reent+0x40>
 800e6e2:	4620      	mov	r0, r4
 800e6e4:	f7ff fef2 	bl	800e4cc <_free_r>
 800e6e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e6ea:	b111      	cbz	r1, 800e6f2 <_reclaim_reent+0x4a>
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f7ff feed 	bl	800e4cc <_free_r>
 800e6f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e6f4:	b111      	cbz	r1, 800e6fc <_reclaim_reent+0x54>
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	f7ff fee8 	bl	800e4cc <_free_r>
 800e6fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e6fe:	b111      	cbz	r1, 800e706 <_reclaim_reent+0x5e>
 800e700:	4620      	mov	r0, r4
 800e702:	f7ff fee3 	bl	800e4cc <_free_r>
 800e706:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e708:	b111      	cbz	r1, 800e710 <_reclaim_reent+0x68>
 800e70a:	4620      	mov	r0, r4
 800e70c:	f7ff fede 	bl	800e4cc <_free_r>
 800e710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e712:	b111      	cbz	r1, 800e71a <_reclaim_reent+0x72>
 800e714:	4620      	mov	r0, r4
 800e716:	f7ff fed9 	bl	800e4cc <_free_r>
 800e71a:	69a3      	ldr	r3, [r4, #24]
 800e71c:	b1e3      	cbz	r3, 800e758 <_reclaim_reent+0xb0>
 800e71e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e720:	4620      	mov	r0, r4
 800e722:	4798      	blx	r3
 800e724:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e726:	b1b9      	cbz	r1, 800e758 <_reclaim_reent+0xb0>
 800e728:	4620      	mov	r0, r4
 800e72a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e72e:	f7ff bfad 	b.w	800e68c <cleanup_glue>
 800e732:	5949      	ldr	r1, [r1, r5]
 800e734:	b941      	cbnz	r1, 800e748 <_reclaim_reent+0xa0>
 800e736:	3504      	adds	r5, #4
 800e738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e73a:	2d80      	cmp	r5, #128	; 0x80
 800e73c:	68d9      	ldr	r1, [r3, #12]
 800e73e:	d1f8      	bne.n	800e732 <_reclaim_reent+0x8a>
 800e740:	4620      	mov	r0, r4
 800e742:	f7ff fec3 	bl	800e4cc <_free_r>
 800e746:	e7ba      	b.n	800e6be <_reclaim_reent+0x16>
 800e748:	680e      	ldr	r6, [r1, #0]
 800e74a:	4620      	mov	r0, r4
 800e74c:	f7ff febe 	bl	800e4cc <_free_r>
 800e750:	4631      	mov	r1, r6
 800e752:	e7ef      	b.n	800e734 <_reclaim_reent+0x8c>
 800e754:	2500      	movs	r5, #0
 800e756:	e7ef      	b.n	800e738 <_reclaim_reent+0x90>
 800e758:	bd70      	pop	{r4, r5, r6, pc}
 800e75a:	bf00      	nop
 800e75c:	20000014 	.word	0x20000014

0800e760 <_sbrk_r>:
 800e760:	b538      	push	{r3, r4, r5, lr}
 800e762:	4d06      	ldr	r5, [pc, #24]	; (800e77c <_sbrk_r+0x1c>)
 800e764:	2300      	movs	r3, #0
 800e766:	4604      	mov	r4, r0
 800e768:	4608      	mov	r0, r1
 800e76a:	602b      	str	r3, [r5, #0]
 800e76c:	f7f2 fd12 	bl	8001194 <_sbrk>
 800e770:	1c43      	adds	r3, r0, #1
 800e772:	d102      	bne.n	800e77a <_sbrk_r+0x1a>
 800e774:	682b      	ldr	r3, [r5, #0]
 800e776:	b103      	cbz	r3, 800e77a <_sbrk_r+0x1a>
 800e778:	6023      	str	r3, [r4, #0]
 800e77a:	bd38      	pop	{r3, r4, r5, pc}
 800e77c:	200059a8 	.word	0x200059a8

0800e780 <siprintf>:
 800e780:	b40e      	push	{r1, r2, r3}
 800e782:	b500      	push	{lr}
 800e784:	b09c      	sub	sp, #112	; 0x70
 800e786:	ab1d      	add	r3, sp, #116	; 0x74
 800e788:	9002      	str	r0, [sp, #8]
 800e78a:	9006      	str	r0, [sp, #24]
 800e78c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e790:	4809      	ldr	r0, [pc, #36]	; (800e7b8 <siprintf+0x38>)
 800e792:	9107      	str	r1, [sp, #28]
 800e794:	9104      	str	r1, [sp, #16]
 800e796:	4909      	ldr	r1, [pc, #36]	; (800e7bc <siprintf+0x3c>)
 800e798:	f853 2b04 	ldr.w	r2, [r3], #4
 800e79c:	9105      	str	r1, [sp, #20]
 800e79e:	6800      	ldr	r0, [r0, #0]
 800e7a0:	9301      	str	r3, [sp, #4]
 800e7a2:	a902      	add	r1, sp, #8
 800e7a4:	f000 fb3a 	bl	800ee1c <_svfiprintf_r>
 800e7a8:	9b02      	ldr	r3, [sp, #8]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	701a      	strb	r2, [r3, #0]
 800e7ae:	b01c      	add	sp, #112	; 0x70
 800e7b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7b4:	b003      	add	sp, #12
 800e7b6:	4770      	bx	lr
 800e7b8:	20000014 	.word	0x20000014
 800e7bc:	ffff0208 	.word	0xffff0208

0800e7c0 <__sread>:
 800e7c0:	b510      	push	{r4, lr}
 800e7c2:	460c      	mov	r4, r1
 800e7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7c8:	f001 fa3a 	bl	800fc40 <_read_r>
 800e7cc:	2800      	cmp	r0, #0
 800e7ce:	bfab      	itete	ge
 800e7d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e7d2:	89a3      	ldrhlt	r3, [r4, #12]
 800e7d4:	181b      	addge	r3, r3, r0
 800e7d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e7da:	bfac      	ite	ge
 800e7dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e7de:	81a3      	strhlt	r3, [r4, #12]
 800e7e0:	bd10      	pop	{r4, pc}

0800e7e2 <__seofread>:
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	4770      	bx	lr

0800e7e6 <__swrite>:
 800e7e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ea:	461f      	mov	r7, r3
 800e7ec:	898b      	ldrh	r3, [r1, #12]
 800e7ee:	05db      	lsls	r3, r3, #23
 800e7f0:	4605      	mov	r5, r0
 800e7f2:	460c      	mov	r4, r1
 800e7f4:	4616      	mov	r6, r2
 800e7f6:	d505      	bpl.n	800e804 <__swrite+0x1e>
 800e7f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7fc:	2302      	movs	r3, #2
 800e7fe:	2200      	movs	r2, #0
 800e800:	f000 fa92 	bl	800ed28 <_lseek_r>
 800e804:	89a3      	ldrh	r3, [r4, #12]
 800e806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e80a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e80e:	81a3      	strh	r3, [r4, #12]
 800e810:	4632      	mov	r2, r6
 800e812:	463b      	mov	r3, r7
 800e814:	4628      	mov	r0, r5
 800e816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e81a:	f000 b971 	b.w	800eb00 <_write_r>

0800e81e <__sseek>:
 800e81e:	b510      	push	{r4, lr}
 800e820:	460c      	mov	r4, r1
 800e822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e826:	f000 fa7f 	bl	800ed28 <_lseek_r>
 800e82a:	1c43      	adds	r3, r0, #1
 800e82c:	89a3      	ldrh	r3, [r4, #12]
 800e82e:	bf15      	itete	ne
 800e830:	6560      	strne	r0, [r4, #84]	; 0x54
 800e832:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e836:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e83a:	81a3      	strheq	r3, [r4, #12]
 800e83c:	bf18      	it	ne
 800e83e:	81a3      	strhne	r3, [r4, #12]
 800e840:	bd10      	pop	{r4, pc}

0800e842 <__sclose>:
 800e842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e846:	f000 b98b 	b.w	800eb60 <_close_r>

0800e84a <strcat>:
 800e84a:	b510      	push	{r4, lr}
 800e84c:	4602      	mov	r2, r0
 800e84e:	7814      	ldrb	r4, [r2, #0]
 800e850:	4613      	mov	r3, r2
 800e852:	3201      	adds	r2, #1
 800e854:	2c00      	cmp	r4, #0
 800e856:	d1fa      	bne.n	800e84e <strcat+0x4>
 800e858:	3b01      	subs	r3, #1
 800e85a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e85e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e862:	2a00      	cmp	r2, #0
 800e864:	d1f9      	bne.n	800e85a <strcat+0x10>
 800e866:	bd10      	pop	{r4, pc}

0800e868 <strtok>:
 800e868:	4b16      	ldr	r3, [pc, #88]	; (800e8c4 <strtok+0x5c>)
 800e86a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e86c:	681e      	ldr	r6, [r3, #0]
 800e86e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800e870:	4605      	mov	r5, r0
 800e872:	b9fc      	cbnz	r4, 800e8b4 <strtok+0x4c>
 800e874:	2050      	movs	r0, #80	; 0x50
 800e876:	9101      	str	r1, [sp, #4]
 800e878:	f7ff fddc 	bl	800e434 <malloc>
 800e87c:	9901      	ldr	r1, [sp, #4]
 800e87e:	65b0      	str	r0, [r6, #88]	; 0x58
 800e880:	4602      	mov	r2, r0
 800e882:	b920      	cbnz	r0, 800e88e <strtok+0x26>
 800e884:	4b10      	ldr	r3, [pc, #64]	; (800e8c8 <strtok+0x60>)
 800e886:	4811      	ldr	r0, [pc, #68]	; (800e8cc <strtok+0x64>)
 800e888:	2157      	movs	r1, #87	; 0x57
 800e88a:	f000 f94b 	bl	800eb24 <__assert_func>
 800e88e:	e9c0 4400 	strd	r4, r4, [r0]
 800e892:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e896:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e89a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e89e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e8a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e8a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e8aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e8ae:	6184      	str	r4, [r0, #24]
 800e8b0:	7704      	strb	r4, [r0, #28]
 800e8b2:	6244      	str	r4, [r0, #36]	; 0x24
 800e8b4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	b002      	add	sp, #8
 800e8bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8c0:	f000 b806 	b.w	800e8d0 <__strtok_r>
 800e8c4:	20000014 	.word	0x20000014
 800e8c8:	080105ac 	.word	0x080105ac
 800e8cc:	080105c3 	.word	0x080105c3

0800e8d0 <__strtok_r>:
 800e8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8d2:	b908      	cbnz	r0, 800e8d8 <__strtok_r+0x8>
 800e8d4:	6810      	ldr	r0, [r2, #0]
 800e8d6:	b188      	cbz	r0, 800e8fc <__strtok_r+0x2c>
 800e8d8:	4604      	mov	r4, r0
 800e8da:	4620      	mov	r0, r4
 800e8dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e8e0:	460f      	mov	r7, r1
 800e8e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e8e6:	b91e      	cbnz	r6, 800e8f0 <__strtok_r+0x20>
 800e8e8:	b965      	cbnz	r5, 800e904 <__strtok_r+0x34>
 800e8ea:	6015      	str	r5, [r2, #0]
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	e005      	b.n	800e8fc <__strtok_r+0x2c>
 800e8f0:	42b5      	cmp	r5, r6
 800e8f2:	d1f6      	bne.n	800e8e2 <__strtok_r+0x12>
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1f0      	bne.n	800e8da <__strtok_r+0xa>
 800e8f8:	6014      	str	r4, [r2, #0]
 800e8fa:	7003      	strb	r3, [r0, #0]
 800e8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8fe:	461c      	mov	r4, r3
 800e900:	e00c      	b.n	800e91c <__strtok_r+0x4c>
 800e902:	b915      	cbnz	r5, 800e90a <__strtok_r+0x3a>
 800e904:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e908:	460e      	mov	r6, r1
 800e90a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e90e:	42ab      	cmp	r3, r5
 800e910:	d1f7      	bne.n	800e902 <__strtok_r+0x32>
 800e912:	2b00      	cmp	r3, #0
 800e914:	d0f3      	beq.n	800e8fe <__strtok_r+0x2e>
 800e916:	2300      	movs	r3, #0
 800e918:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e91c:	6014      	str	r4, [r2, #0]
 800e91e:	e7ed      	b.n	800e8fc <__strtok_r+0x2c>

0800e920 <_strtoull_l.constprop.0>:
 800e920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e924:	4692      	mov	sl, r2
 800e926:	4a49      	ldr	r2, [pc, #292]	; (800ea4c <_strtoull_l.constprop.0+0x12c>)
 800e928:	9001      	str	r0, [sp, #4]
 800e92a:	4689      	mov	r9, r1
 800e92c:	461d      	mov	r5, r3
 800e92e:	460e      	mov	r6, r1
 800e930:	4633      	mov	r3, r6
 800e932:	f816 4b01 	ldrb.w	r4, [r6], #1
 800e936:	5ca7      	ldrb	r7, [r4, r2]
 800e938:	f017 0708 	ands.w	r7, r7, #8
 800e93c:	d1f8      	bne.n	800e930 <_strtoull_l.constprop.0+0x10>
 800e93e:	2c2d      	cmp	r4, #45	; 0x2d
 800e940:	d14a      	bne.n	800e9d8 <_strtoull_l.constprop.0+0xb8>
 800e942:	7834      	ldrb	r4, [r6, #0]
 800e944:	2701      	movs	r7, #1
 800e946:	1c9e      	adds	r6, r3, #2
 800e948:	2d00      	cmp	r5, #0
 800e94a:	d07b      	beq.n	800ea44 <_strtoull_l.constprop.0+0x124>
 800e94c:	2d10      	cmp	r5, #16
 800e94e:	d109      	bne.n	800e964 <_strtoull_l.constprop.0+0x44>
 800e950:	2c30      	cmp	r4, #48	; 0x30
 800e952:	d107      	bne.n	800e964 <_strtoull_l.constprop.0+0x44>
 800e954:	7833      	ldrb	r3, [r6, #0]
 800e956:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e95a:	2b58      	cmp	r3, #88	; 0x58
 800e95c:	d16d      	bne.n	800ea3a <_strtoull_l.constprop.0+0x11a>
 800e95e:	7874      	ldrb	r4, [r6, #1]
 800e960:	2510      	movs	r5, #16
 800e962:	3602      	adds	r6, #2
 800e964:	ea4f 7be5 	mov.w	fp, r5, asr #31
 800e968:	462a      	mov	r2, r5
 800e96a:	465b      	mov	r3, fp
 800e96c:	f04f 30ff 	mov.w	r0, #4294967295
 800e970:	f04f 31ff 	mov.w	r1, #4294967295
 800e974:	f7f1 fd0c 	bl	8000390 <__aeabi_uldivmod>
 800e978:	462a      	mov	r2, r5
 800e97a:	9000      	str	r0, [sp, #0]
 800e97c:	4688      	mov	r8, r1
 800e97e:	465b      	mov	r3, fp
 800e980:	f04f 30ff 	mov.w	r0, #4294967295
 800e984:	f04f 31ff 	mov.w	r1, #4294967295
 800e988:	f7f1 fd02 	bl	8000390 <__aeabi_uldivmod>
 800e98c:	2300      	movs	r3, #0
 800e98e:	4618      	mov	r0, r3
 800e990:	4619      	mov	r1, r3
 800e992:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e996:	f1bc 0f09 	cmp.w	ip, #9
 800e99a:	d822      	bhi.n	800e9e2 <_strtoull_l.constprop.0+0xc2>
 800e99c:	4664      	mov	r4, ip
 800e99e:	42a5      	cmp	r5, r4
 800e9a0:	dd30      	ble.n	800ea04 <_strtoull_l.constprop.0+0xe4>
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	db2b      	blt.n	800e9fe <_strtoull_l.constprop.0+0xde>
 800e9a6:	9b00      	ldr	r3, [sp, #0]
 800e9a8:	4283      	cmp	r3, r0
 800e9aa:	eb78 0301 	sbcs.w	r3, r8, r1
 800e9ae:	d326      	bcc.n	800e9fe <_strtoull_l.constprop.0+0xde>
 800e9b0:	9b00      	ldr	r3, [sp, #0]
 800e9b2:	4588      	cmp	r8, r1
 800e9b4:	bf08      	it	eq
 800e9b6:	4283      	cmpeq	r3, r0
 800e9b8:	d101      	bne.n	800e9be <_strtoull_l.constprop.0+0x9e>
 800e9ba:	42a2      	cmp	r2, r4
 800e9bc:	db1f      	blt.n	800e9fe <_strtoull_l.constprop.0+0xde>
 800e9be:	4369      	muls	r1, r5
 800e9c0:	fb00 110b 	mla	r1, r0, fp, r1
 800e9c4:	fba5 0300 	umull	r0, r3, r5, r0
 800e9c8:	4419      	add	r1, r3
 800e9ca:	1820      	adds	r0, r4, r0
 800e9cc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	f816 4b01 	ldrb.w	r4, [r6], #1
 800e9d6:	e7dc      	b.n	800e992 <_strtoull_l.constprop.0+0x72>
 800e9d8:	2c2b      	cmp	r4, #43	; 0x2b
 800e9da:	bf04      	itt	eq
 800e9dc:	7834      	ldrbeq	r4, [r6, #0]
 800e9de:	1c9e      	addeq	r6, r3, #2
 800e9e0:	e7b2      	b.n	800e948 <_strtoull_l.constprop.0+0x28>
 800e9e2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e9e6:	f1bc 0f19 	cmp.w	ip, #25
 800e9ea:	d801      	bhi.n	800e9f0 <_strtoull_l.constprop.0+0xd0>
 800e9ec:	3c37      	subs	r4, #55	; 0x37
 800e9ee:	e7d6      	b.n	800e99e <_strtoull_l.constprop.0+0x7e>
 800e9f0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e9f4:	f1bc 0f19 	cmp.w	ip, #25
 800e9f8:	d804      	bhi.n	800ea04 <_strtoull_l.constprop.0+0xe4>
 800e9fa:	3c57      	subs	r4, #87	; 0x57
 800e9fc:	e7cf      	b.n	800e99e <_strtoull_l.constprop.0+0x7e>
 800e9fe:	f04f 33ff 	mov.w	r3, #4294967295
 800ea02:	e7e6      	b.n	800e9d2 <_strtoull_l.constprop.0+0xb2>
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	da0b      	bge.n	800ea20 <_strtoull_l.constprop.0+0x100>
 800ea08:	9a01      	ldr	r2, [sp, #4]
 800ea0a:	2322      	movs	r3, #34	; 0x22
 800ea0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea10:	6013      	str	r3, [r2, #0]
 800ea12:	4601      	mov	r1, r0
 800ea14:	f1ba 0f00 	cmp.w	sl, #0
 800ea18:	d10a      	bne.n	800ea30 <_strtoull_l.constprop.0+0x110>
 800ea1a:	b003      	add	sp, #12
 800ea1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea20:	b117      	cbz	r7, 800ea28 <_strtoull_l.constprop.0+0x108>
 800ea22:	4240      	negs	r0, r0
 800ea24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800ea28:	f1ba 0f00 	cmp.w	sl, #0
 800ea2c:	d0f5      	beq.n	800ea1a <_strtoull_l.constprop.0+0xfa>
 800ea2e:	b10b      	cbz	r3, 800ea34 <_strtoull_l.constprop.0+0x114>
 800ea30:	f106 39ff 	add.w	r9, r6, #4294967295
 800ea34:	f8ca 9000 	str.w	r9, [sl]
 800ea38:	e7ef      	b.n	800ea1a <_strtoull_l.constprop.0+0xfa>
 800ea3a:	2430      	movs	r4, #48	; 0x30
 800ea3c:	2d00      	cmp	r5, #0
 800ea3e:	d191      	bne.n	800e964 <_strtoull_l.constprop.0+0x44>
 800ea40:	2508      	movs	r5, #8
 800ea42:	e78f      	b.n	800e964 <_strtoull_l.constprop.0+0x44>
 800ea44:	2c30      	cmp	r4, #48	; 0x30
 800ea46:	d085      	beq.n	800e954 <_strtoull_l.constprop.0+0x34>
 800ea48:	250a      	movs	r5, #10
 800ea4a:	e78b      	b.n	800e964 <_strtoull_l.constprop.0+0x44>
 800ea4c:	0801065d 	.word	0x0801065d

0800ea50 <strtoull>:
 800ea50:	4613      	mov	r3, r2
 800ea52:	460a      	mov	r2, r1
 800ea54:	4601      	mov	r1, r0
 800ea56:	4802      	ldr	r0, [pc, #8]	; (800ea60 <strtoull+0x10>)
 800ea58:	6800      	ldr	r0, [r0, #0]
 800ea5a:	f7ff bf61 	b.w	800e920 <_strtoull_l.constprop.0>
 800ea5e:	bf00      	nop
 800ea60:	20000014 	.word	0x20000014

0800ea64 <_vsiprintf_r>:
 800ea64:	b500      	push	{lr}
 800ea66:	b09b      	sub	sp, #108	; 0x6c
 800ea68:	9100      	str	r1, [sp, #0]
 800ea6a:	9104      	str	r1, [sp, #16]
 800ea6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ea70:	9105      	str	r1, [sp, #20]
 800ea72:	9102      	str	r1, [sp, #8]
 800ea74:	4905      	ldr	r1, [pc, #20]	; (800ea8c <_vsiprintf_r+0x28>)
 800ea76:	9103      	str	r1, [sp, #12]
 800ea78:	4669      	mov	r1, sp
 800ea7a:	f000 f9cf 	bl	800ee1c <_svfiprintf_r>
 800ea7e:	9b00      	ldr	r3, [sp, #0]
 800ea80:	2200      	movs	r2, #0
 800ea82:	701a      	strb	r2, [r3, #0]
 800ea84:	b01b      	add	sp, #108	; 0x6c
 800ea86:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea8a:	bf00      	nop
 800ea8c:	ffff0208 	.word	0xffff0208

0800ea90 <vsiprintf>:
 800ea90:	4613      	mov	r3, r2
 800ea92:	460a      	mov	r2, r1
 800ea94:	4601      	mov	r1, r0
 800ea96:	4802      	ldr	r0, [pc, #8]	; (800eaa0 <vsiprintf+0x10>)
 800ea98:	6800      	ldr	r0, [r0, #0]
 800ea9a:	f7ff bfe3 	b.w	800ea64 <_vsiprintf_r>
 800ea9e:	bf00      	nop
 800eaa0:	20000014 	.word	0x20000014

0800eaa4 <_vsiscanf_r>:
 800eaa4:	b510      	push	{r4, lr}
 800eaa6:	b09c      	sub	sp, #112	; 0x70
 800eaa8:	4604      	mov	r4, r0
 800eaaa:	f44f 7001 	mov.w	r0, #516	; 0x204
 800eaae:	f8ad 0014 	strh.w	r0, [sp, #20]
 800eab2:	4608      	mov	r0, r1
 800eab4:	e9cd 3200 	strd	r3, r2, [sp]
 800eab8:	9102      	str	r1, [sp, #8]
 800eaba:	9106      	str	r1, [sp, #24]
 800eabc:	f7f1 fc10 	bl	80002e0 <strlen>
 800eac0:	4909      	ldr	r1, [pc, #36]	; (800eae8 <_vsiscanf_r+0x44>)
 800eac2:	910b      	str	r1, [sp, #44]	; 0x2c
 800eac4:	2100      	movs	r1, #0
 800eac6:	910f      	str	r1, [sp, #60]	; 0x3c
 800eac8:	9114      	str	r1, [sp, #80]	; 0x50
 800eaca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eace:	9003      	str	r0, [sp, #12]
 800ead0:	9007      	str	r0, [sp, #28]
 800ead2:	f8ad 1016 	strh.w	r1, [sp, #22]
 800ead6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eada:	a902      	add	r1, sp, #8
 800eadc:	4620      	mov	r0, r4
 800eade:	f000 faf7 	bl	800f0d0 <__ssvfiscanf_r>
 800eae2:	b01c      	add	sp, #112	; 0x70
 800eae4:	bd10      	pop	{r4, pc}
 800eae6:	bf00      	nop
 800eae8:	0800e7e3 	.word	0x0800e7e3

0800eaec <vsiscanf>:
 800eaec:	4613      	mov	r3, r2
 800eaee:	460a      	mov	r2, r1
 800eaf0:	4601      	mov	r1, r0
 800eaf2:	4802      	ldr	r0, [pc, #8]	; (800eafc <vsiscanf+0x10>)
 800eaf4:	6800      	ldr	r0, [r0, #0]
 800eaf6:	f7ff bfd5 	b.w	800eaa4 <_vsiscanf_r>
 800eafa:	bf00      	nop
 800eafc:	20000014 	.word	0x20000014

0800eb00 <_write_r>:
 800eb00:	b538      	push	{r3, r4, r5, lr}
 800eb02:	4d07      	ldr	r5, [pc, #28]	; (800eb20 <_write_r+0x20>)
 800eb04:	4604      	mov	r4, r0
 800eb06:	4608      	mov	r0, r1
 800eb08:	4611      	mov	r1, r2
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	602a      	str	r2, [r5, #0]
 800eb0e:	461a      	mov	r2, r3
 800eb10:	f7f2 faef 	bl	80010f2 <_write>
 800eb14:	1c43      	adds	r3, r0, #1
 800eb16:	d102      	bne.n	800eb1e <_write_r+0x1e>
 800eb18:	682b      	ldr	r3, [r5, #0]
 800eb1a:	b103      	cbz	r3, 800eb1e <_write_r+0x1e>
 800eb1c:	6023      	str	r3, [r4, #0]
 800eb1e:	bd38      	pop	{r3, r4, r5, pc}
 800eb20:	200059a8 	.word	0x200059a8

0800eb24 <__assert_func>:
 800eb24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb26:	4614      	mov	r4, r2
 800eb28:	461a      	mov	r2, r3
 800eb2a:	4b09      	ldr	r3, [pc, #36]	; (800eb50 <__assert_func+0x2c>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	4605      	mov	r5, r0
 800eb30:	68d8      	ldr	r0, [r3, #12]
 800eb32:	b14c      	cbz	r4, 800eb48 <__assert_func+0x24>
 800eb34:	4b07      	ldr	r3, [pc, #28]	; (800eb54 <__assert_func+0x30>)
 800eb36:	9100      	str	r1, [sp, #0]
 800eb38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb3c:	4906      	ldr	r1, [pc, #24]	; (800eb58 <__assert_func+0x34>)
 800eb3e:	462b      	mov	r3, r5
 800eb40:	f000 f8e0 	bl	800ed04 <fiprintf>
 800eb44:	f001 fab8 	bl	80100b8 <abort>
 800eb48:	4b04      	ldr	r3, [pc, #16]	; (800eb5c <__assert_func+0x38>)
 800eb4a:	461c      	mov	r4, r3
 800eb4c:	e7f3      	b.n	800eb36 <__assert_func+0x12>
 800eb4e:	bf00      	nop
 800eb50:	20000014 	.word	0x20000014
 800eb54:	08010620 	.word	0x08010620
 800eb58:	0801062d 	.word	0x0801062d
 800eb5c:	0801065b 	.word	0x0801065b

0800eb60 <_close_r>:
 800eb60:	b538      	push	{r3, r4, r5, lr}
 800eb62:	4d06      	ldr	r5, [pc, #24]	; (800eb7c <_close_r+0x1c>)
 800eb64:	2300      	movs	r3, #0
 800eb66:	4604      	mov	r4, r0
 800eb68:	4608      	mov	r0, r1
 800eb6a:	602b      	str	r3, [r5, #0]
 800eb6c:	f7f2 fadd 	bl	800112a <_close>
 800eb70:	1c43      	adds	r3, r0, #1
 800eb72:	d102      	bne.n	800eb7a <_close_r+0x1a>
 800eb74:	682b      	ldr	r3, [r5, #0]
 800eb76:	b103      	cbz	r3, 800eb7a <_close_r+0x1a>
 800eb78:	6023      	str	r3, [r4, #0]
 800eb7a:	bd38      	pop	{r3, r4, r5, pc}
 800eb7c:	200059a8 	.word	0x200059a8

0800eb80 <__sflush_r>:
 800eb80:	898a      	ldrh	r2, [r1, #12]
 800eb82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb86:	4605      	mov	r5, r0
 800eb88:	0710      	lsls	r0, r2, #28
 800eb8a:	460c      	mov	r4, r1
 800eb8c:	d458      	bmi.n	800ec40 <__sflush_r+0xc0>
 800eb8e:	684b      	ldr	r3, [r1, #4]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	dc05      	bgt.n	800eba0 <__sflush_r+0x20>
 800eb94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	dc02      	bgt.n	800eba0 <__sflush_r+0x20>
 800eb9a:	2000      	movs	r0, #0
 800eb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eba2:	2e00      	cmp	r6, #0
 800eba4:	d0f9      	beq.n	800eb9a <__sflush_r+0x1a>
 800eba6:	2300      	movs	r3, #0
 800eba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ebac:	682f      	ldr	r7, [r5, #0]
 800ebae:	602b      	str	r3, [r5, #0]
 800ebb0:	d032      	beq.n	800ec18 <__sflush_r+0x98>
 800ebb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebb4:	89a3      	ldrh	r3, [r4, #12]
 800ebb6:	075a      	lsls	r2, r3, #29
 800ebb8:	d505      	bpl.n	800ebc6 <__sflush_r+0x46>
 800ebba:	6863      	ldr	r3, [r4, #4]
 800ebbc:	1ac0      	subs	r0, r0, r3
 800ebbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebc0:	b10b      	cbz	r3, 800ebc6 <__sflush_r+0x46>
 800ebc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebc4:	1ac0      	subs	r0, r0, r3
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	4602      	mov	r2, r0
 800ebca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebcc:	6a21      	ldr	r1, [r4, #32]
 800ebce:	4628      	mov	r0, r5
 800ebd0:	47b0      	blx	r6
 800ebd2:	1c43      	adds	r3, r0, #1
 800ebd4:	89a3      	ldrh	r3, [r4, #12]
 800ebd6:	d106      	bne.n	800ebe6 <__sflush_r+0x66>
 800ebd8:	6829      	ldr	r1, [r5, #0]
 800ebda:	291d      	cmp	r1, #29
 800ebdc:	d82c      	bhi.n	800ec38 <__sflush_r+0xb8>
 800ebde:	4a2a      	ldr	r2, [pc, #168]	; (800ec88 <__sflush_r+0x108>)
 800ebe0:	40ca      	lsrs	r2, r1
 800ebe2:	07d6      	lsls	r6, r2, #31
 800ebe4:	d528      	bpl.n	800ec38 <__sflush_r+0xb8>
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	6062      	str	r2, [r4, #4]
 800ebea:	04d9      	lsls	r1, r3, #19
 800ebec:	6922      	ldr	r2, [r4, #16]
 800ebee:	6022      	str	r2, [r4, #0]
 800ebf0:	d504      	bpl.n	800ebfc <__sflush_r+0x7c>
 800ebf2:	1c42      	adds	r2, r0, #1
 800ebf4:	d101      	bne.n	800ebfa <__sflush_r+0x7a>
 800ebf6:	682b      	ldr	r3, [r5, #0]
 800ebf8:	b903      	cbnz	r3, 800ebfc <__sflush_r+0x7c>
 800ebfa:	6560      	str	r0, [r4, #84]	; 0x54
 800ebfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebfe:	602f      	str	r7, [r5, #0]
 800ec00:	2900      	cmp	r1, #0
 800ec02:	d0ca      	beq.n	800eb9a <__sflush_r+0x1a>
 800ec04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec08:	4299      	cmp	r1, r3
 800ec0a:	d002      	beq.n	800ec12 <__sflush_r+0x92>
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	f7ff fc5d 	bl	800e4cc <_free_r>
 800ec12:	2000      	movs	r0, #0
 800ec14:	6360      	str	r0, [r4, #52]	; 0x34
 800ec16:	e7c1      	b.n	800eb9c <__sflush_r+0x1c>
 800ec18:	6a21      	ldr	r1, [r4, #32]
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	47b0      	blx	r6
 800ec20:	1c41      	adds	r1, r0, #1
 800ec22:	d1c7      	bne.n	800ebb4 <__sflush_r+0x34>
 800ec24:	682b      	ldr	r3, [r5, #0]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d0c4      	beq.n	800ebb4 <__sflush_r+0x34>
 800ec2a:	2b1d      	cmp	r3, #29
 800ec2c:	d001      	beq.n	800ec32 <__sflush_r+0xb2>
 800ec2e:	2b16      	cmp	r3, #22
 800ec30:	d101      	bne.n	800ec36 <__sflush_r+0xb6>
 800ec32:	602f      	str	r7, [r5, #0]
 800ec34:	e7b1      	b.n	800eb9a <__sflush_r+0x1a>
 800ec36:	89a3      	ldrh	r3, [r4, #12]
 800ec38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec3c:	81a3      	strh	r3, [r4, #12]
 800ec3e:	e7ad      	b.n	800eb9c <__sflush_r+0x1c>
 800ec40:	690f      	ldr	r7, [r1, #16]
 800ec42:	2f00      	cmp	r7, #0
 800ec44:	d0a9      	beq.n	800eb9a <__sflush_r+0x1a>
 800ec46:	0793      	lsls	r3, r2, #30
 800ec48:	680e      	ldr	r6, [r1, #0]
 800ec4a:	bf08      	it	eq
 800ec4c:	694b      	ldreq	r3, [r1, #20]
 800ec4e:	600f      	str	r7, [r1, #0]
 800ec50:	bf18      	it	ne
 800ec52:	2300      	movne	r3, #0
 800ec54:	eba6 0807 	sub.w	r8, r6, r7
 800ec58:	608b      	str	r3, [r1, #8]
 800ec5a:	f1b8 0f00 	cmp.w	r8, #0
 800ec5e:	dd9c      	ble.n	800eb9a <__sflush_r+0x1a>
 800ec60:	6a21      	ldr	r1, [r4, #32]
 800ec62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec64:	4643      	mov	r3, r8
 800ec66:	463a      	mov	r2, r7
 800ec68:	4628      	mov	r0, r5
 800ec6a:	47b0      	blx	r6
 800ec6c:	2800      	cmp	r0, #0
 800ec6e:	dc06      	bgt.n	800ec7e <__sflush_r+0xfe>
 800ec70:	89a3      	ldrh	r3, [r4, #12]
 800ec72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec76:	81a3      	strh	r3, [r4, #12]
 800ec78:	f04f 30ff 	mov.w	r0, #4294967295
 800ec7c:	e78e      	b.n	800eb9c <__sflush_r+0x1c>
 800ec7e:	4407      	add	r7, r0
 800ec80:	eba8 0800 	sub.w	r8, r8, r0
 800ec84:	e7e9      	b.n	800ec5a <__sflush_r+0xda>
 800ec86:	bf00      	nop
 800ec88:	20400001 	.word	0x20400001

0800ec8c <_fflush_r>:
 800ec8c:	b538      	push	{r3, r4, r5, lr}
 800ec8e:	690b      	ldr	r3, [r1, #16]
 800ec90:	4605      	mov	r5, r0
 800ec92:	460c      	mov	r4, r1
 800ec94:	b913      	cbnz	r3, 800ec9c <_fflush_r+0x10>
 800ec96:	2500      	movs	r5, #0
 800ec98:	4628      	mov	r0, r5
 800ec9a:	bd38      	pop	{r3, r4, r5, pc}
 800ec9c:	b118      	cbz	r0, 800eca6 <_fflush_r+0x1a>
 800ec9e:	6983      	ldr	r3, [r0, #24]
 800eca0:	b90b      	cbnz	r3, 800eca6 <_fflush_r+0x1a>
 800eca2:	f7ff fb01 	bl	800e2a8 <__sinit>
 800eca6:	4b14      	ldr	r3, [pc, #80]	; (800ecf8 <_fflush_r+0x6c>)
 800eca8:	429c      	cmp	r4, r3
 800ecaa:	d11b      	bne.n	800ece4 <_fflush_r+0x58>
 800ecac:	686c      	ldr	r4, [r5, #4]
 800ecae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d0ef      	beq.n	800ec96 <_fflush_r+0xa>
 800ecb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ecb8:	07d0      	lsls	r0, r2, #31
 800ecba:	d404      	bmi.n	800ecc6 <_fflush_r+0x3a>
 800ecbc:	0599      	lsls	r1, r3, #22
 800ecbe:	d402      	bmi.n	800ecc6 <_fflush_r+0x3a>
 800ecc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecc2:	f7ff fbb4 	bl	800e42e <__retarget_lock_acquire_recursive>
 800ecc6:	4628      	mov	r0, r5
 800ecc8:	4621      	mov	r1, r4
 800ecca:	f7ff ff59 	bl	800eb80 <__sflush_r>
 800ecce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecd0:	07da      	lsls	r2, r3, #31
 800ecd2:	4605      	mov	r5, r0
 800ecd4:	d4e0      	bmi.n	800ec98 <_fflush_r+0xc>
 800ecd6:	89a3      	ldrh	r3, [r4, #12]
 800ecd8:	059b      	lsls	r3, r3, #22
 800ecda:	d4dd      	bmi.n	800ec98 <_fflush_r+0xc>
 800ecdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecde:	f7ff fba7 	bl	800e430 <__retarget_lock_release_recursive>
 800ece2:	e7d9      	b.n	800ec98 <_fflush_r+0xc>
 800ece4:	4b05      	ldr	r3, [pc, #20]	; (800ecfc <_fflush_r+0x70>)
 800ece6:	429c      	cmp	r4, r3
 800ece8:	d101      	bne.n	800ecee <_fflush_r+0x62>
 800ecea:	68ac      	ldr	r4, [r5, #8]
 800ecec:	e7df      	b.n	800ecae <_fflush_r+0x22>
 800ecee:	4b04      	ldr	r3, [pc, #16]	; (800ed00 <_fflush_r+0x74>)
 800ecf0:	429c      	cmp	r4, r3
 800ecf2:	bf08      	it	eq
 800ecf4:	68ec      	ldreq	r4, [r5, #12]
 800ecf6:	e7da      	b.n	800ecae <_fflush_r+0x22>
 800ecf8:	08010568 	.word	0x08010568
 800ecfc:	08010588 	.word	0x08010588
 800ed00:	08010548 	.word	0x08010548

0800ed04 <fiprintf>:
 800ed04:	b40e      	push	{r1, r2, r3}
 800ed06:	b503      	push	{r0, r1, lr}
 800ed08:	4601      	mov	r1, r0
 800ed0a:	ab03      	add	r3, sp, #12
 800ed0c:	4805      	ldr	r0, [pc, #20]	; (800ed24 <fiprintf+0x20>)
 800ed0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed12:	6800      	ldr	r0, [r0, #0]
 800ed14:	9301      	str	r3, [sp, #4]
 800ed16:	f000 fb7d 	bl	800f414 <_vfiprintf_r>
 800ed1a:	b002      	add	sp, #8
 800ed1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed20:	b003      	add	sp, #12
 800ed22:	4770      	bx	lr
 800ed24:	20000014 	.word	0x20000014

0800ed28 <_lseek_r>:
 800ed28:	b538      	push	{r3, r4, r5, lr}
 800ed2a:	4d07      	ldr	r5, [pc, #28]	; (800ed48 <_lseek_r+0x20>)
 800ed2c:	4604      	mov	r4, r0
 800ed2e:	4608      	mov	r0, r1
 800ed30:	4611      	mov	r1, r2
 800ed32:	2200      	movs	r2, #0
 800ed34:	602a      	str	r2, [r5, #0]
 800ed36:	461a      	mov	r2, r3
 800ed38:	f7f2 fa1e 	bl	8001178 <_lseek>
 800ed3c:	1c43      	adds	r3, r0, #1
 800ed3e:	d102      	bne.n	800ed46 <_lseek_r+0x1e>
 800ed40:	682b      	ldr	r3, [r5, #0]
 800ed42:	b103      	cbz	r3, 800ed46 <_lseek_r+0x1e>
 800ed44:	6023      	str	r3, [r4, #0]
 800ed46:	bd38      	pop	{r3, r4, r5, pc}
 800ed48:	200059a8 	.word	0x200059a8

0800ed4c <__malloc_lock>:
 800ed4c:	4801      	ldr	r0, [pc, #4]	; (800ed54 <__malloc_lock+0x8>)
 800ed4e:	f7ff bb6e 	b.w	800e42e <__retarget_lock_acquire_recursive>
 800ed52:	bf00      	nop
 800ed54:	2000599c 	.word	0x2000599c

0800ed58 <__malloc_unlock>:
 800ed58:	4801      	ldr	r0, [pc, #4]	; (800ed60 <__malloc_unlock+0x8>)
 800ed5a:	f7ff bb69 	b.w	800e430 <__retarget_lock_release_recursive>
 800ed5e:	bf00      	nop
 800ed60:	2000599c 	.word	0x2000599c

0800ed64 <__ssputs_r>:
 800ed64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed68:	688e      	ldr	r6, [r1, #8]
 800ed6a:	429e      	cmp	r6, r3
 800ed6c:	4682      	mov	sl, r0
 800ed6e:	460c      	mov	r4, r1
 800ed70:	4690      	mov	r8, r2
 800ed72:	461f      	mov	r7, r3
 800ed74:	d838      	bhi.n	800ede8 <__ssputs_r+0x84>
 800ed76:	898a      	ldrh	r2, [r1, #12]
 800ed78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ed7c:	d032      	beq.n	800ede4 <__ssputs_r+0x80>
 800ed7e:	6825      	ldr	r5, [r4, #0]
 800ed80:	6909      	ldr	r1, [r1, #16]
 800ed82:	eba5 0901 	sub.w	r9, r5, r1
 800ed86:	6965      	ldr	r5, [r4, #20]
 800ed88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed90:	3301      	adds	r3, #1
 800ed92:	444b      	add	r3, r9
 800ed94:	106d      	asrs	r5, r5, #1
 800ed96:	429d      	cmp	r5, r3
 800ed98:	bf38      	it	cc
 800ed9a:	461d      	movcc	r5, r3
 800ed9c:	0553      	lsls	r3, r2, #21
 800ed9e:	d531      	bpl.n	800ee04 <__ssputs_r+0xa0>
 800eda0:	4629      	mov	r1, r5
 800eda2:	f7ff fbff 	bl	800e5a4 <_malloc_r>
 800eda6:	4606      	mov	r6, r0
 800eda8:	b950      	cbnz	r0, 800edc0 <__ssputs_r+0x5c>
 800edaa:	230c      	movs	r3, #12
 800edac:	f8ca 3000 	str.w	r3, [sl]
 800edb0:	89a3      	ldrh	r3, [r4, #12]
 800edb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edb6:	81a3      	strh	r3, [r4, #12]
 800edb8:	f04f 30ff 	mov.w	r0, #4294967295
 800edbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edc0:	6921      	ldr	r1, [r4, #16]
 800edc2:	464a      	mov	r2, r9
 800edc4:	f7ff fb56 	bl	800e474 <memcpy>
 800edc8:	89a3      	ldrh	r3, [r4, #12]
 800edca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800edce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edd2:	81a3      	strh	r3, [r4, #12]
 800edd4:	6126      	str	r6, [r4, #16]
 800edd6:	6165      	str	r5, [r4, #20]
 800edd8:	444e      	add	r6, r9
 800edda:	eba5 0509 	sub.w	r5, r5, r9
 800edde:	6026      	str	r6, [r4, #0]
 800ede0:	60a5      	str	r5, [r4, #8]
 800ede2:	463e      	mov	r6, r7
 800ede4:	42be      	cmp	r6, r7
 800ede6:	d900      	bls.n	800edea <__ssputs_r+0x86>
 800ede8:	463e      	mov	r6, r7
 800edea:	6820      	ldr	r0, [r4, #0]
 800edec:	4632      	mov	r2, r6
 800edee:	4641      	mov	r1, r8
 800edf0:	f001 f9ce 	bl	8010190 <memmove>
 800edf4:	68a3      	ldr	r3, [r4, #8]
 800edf6:	1b9b      	subs	r3, r3, r6
 800edf8:	60a3      	str	r3, [r4, #8]
 800edfa:	6823      	ldr	r3, [r4, #0]
 800edfc:	4433      	add	r3, r6
 800edfe:	6023      	str	r3, [r4, #0]
 800ee00:	2000      	movs	r0, #0
 800ee02:	e7db      	b.n	800edbc <__ssputs_r+0x58>
 800ee04:	462a      	mov	r2, r5
 800ee06:	f001 f9dd 	bl	80101c4 <_realloc_r>
 800ee0a:	4606      	mov	r6, r0
 800ee0c:	2800      	cmp	r0, #0
 800ee0e:	d1e1      	bne.n	800edd4 <__ssputs_r+0x70>
 800ee10:	6921      	ldr	r1, [r4, #16]
 800ee12:	4650      	mov	r0, sl
 800ee14:	f7ff fb5a 	bl	800e4cc <_free_r>
 800ee18:	e7c7      	b.n	800edaa <__ssputs_r+0x46>
	...

0800ee1c <_svfiprintf_r>:
 800ee1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee20:	4698      	mov	r8, r3
 800ee22:	898b      	ldrh	r3, [r1, #12]
 800ee24:	061b      	lsls	r3, r3, #24
 800ee26:	b09d      	sub	sp, #116	; 0x74
 800ee28:	4607      	mov	r7, r0
 800ee2a:	460d      	mov	r5, r1
 800ee2c:	4614      	mov	r4, r2
 800ee2e:	d50e      	bpl.n	800ee4e <_svfiprintf_r+0x32>
 800ee30:	690b      	ldr	r3, [r1, #16]
 800ee32:	b963      	cbnz	r3, 800ee4e <_svfiprintf_r+0x32>
 800ee34:	2140      	movs	r1, #64	; 0x40
 800ee36:	f7ff fbb5 	bl	800e5a4 <_malloc_r>
 800ee3a:	6028      	str	r0, [r5, #0]
 800ee3c:	6128      	str	r0, [r5, #16]
 800ee3e:	b920      	cbnz	r0, 800ee4a <_svfiprintf_r+0x2e>
 800ee40:	230c      	movs	r3, #12
 800ee42:	603b      	str	r3, [r7, #0]
 800ee44:	f04f 30ff 	mov.w	r0, #4294967295
 800ee48:	e0d1      	b.n	800efee <_svfiprintf_r+0x1d2>
 800ee4a:	2340      	movs	r3, #64	; 0x40
 800ee4c:	616b      	str	r3, [r5, #20]
 800ee4e:	2300      	movs	r3, #0
 800ee50:	9309      	str	r3, [sp, #36]	; 0x24
 800ee52:	2320      	movs	r3, #32
 800ee54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee58:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee5c:	2330      	movs	r3, #48	; 0x30
 800ee5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f008 <_svfiprintf_r+0x1ec>
 800ee62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee66:	f04f 0901 	mov.w	r9, #1
 800ee6a:	4623      	mov	r3, r4
 800ee6c:	469a      	mov	sl, r3
 800ee6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee72:	b10a      	cbz	r2, 800ee78 <_svfiprintf_r+0x5c>
 800ee74:	2a25      	cmp	r2, #37	; 0x25
 800ee76:	d1f9      	bne.n	800ee6c <_svfiprintf_r+0x50>
 800ee78:	ebba 0b04 	subs.w	fp, sl, r4
 800ee7c:	d00b      	beq.n	800ee96 <_svfiprintf_r+0x7a>
 800ee7e:	465b      	mov	r3, fp
 800ee80:	4622      	mov	r2, r4
 800ee82:	4629      	mov	r1, r5
 800ee84:	4638      	mov	r0, r7
 800ee86:	f7ff ff6d 	bl	800ed64 <__ssputs_r>
 800ee8a:	3001      	adds	r0, #1
 800ee8c:	f000 80aa 	beq.w	800efe4 <_svfiprintf_r+0x1c8>
 800ee90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee92:	445a      	add	r2, fp
 800ee94:	9209      	str	r2, [sp, #36]	; 0x24
 800ee96:	f89a 3000 	ldrb.w	r3, [sl]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	f000 80a2 	beq.w	800efe4 <_svfiprintf_r+0x1c8>
 800eea0:	2300      	movs	r3, #0
 800eea2:	f04f 32ff 	mov.w	r2, #4294967295
 800eea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eeaa:	f10a 0a01 	add.w	sl, sl, #1
 800eeae:	9304      	str	r3, [sp, #16]
 800eeb0:	9307      	str	r3, [sp, #28]
 800eeb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eeb6:	931a      	str	r3, [sp, #104]	; 0x68
 800eeb8:	4654      	mov	r4, sl
 800eeba:	2205      	movs	r2, #5
 800eebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eec0:	4851      	ldr	r0, [pc, #324]	; (800f008 <_svfiprintf_r+0x1ec>)
 800eec2:	f7f1 fa15 	bl	80002f0 <memchr>
 800eec6:	9a04      	ldr	r2, [sp, #16]
 800eec8:	b9d8      	cbnz	r0, 800ef02 <_svfiprintf_r+0xe6>
 800eeca:	06d0      	lsls	r0, r2, #27
 800eecc:	bf44      	itt	mi
 800eece:	2320      	movmi	r3, #32
 800eed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eed4:	0711      	lsls	r1, r2, #28
 800eed6:	bf44      	itt	mi
 800eed8:	232b      	movmi	r3, #43	; 0x2b
 800eeda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eede:	f89a 3000 	ldrb.w	r3, [sl]
 800eee2:	2b2a      	cmp	r3, #42	; 0x2a
 800eee4:	d015      	beq.n	800ef12 <_svfiprintf_r+0xf6>
 800eee6:	9a07      	ldr	r2, [sp, #28]
 800eee8:	4654      	mov	r4, sl
 800eeea:	2000      	movs	r0, #0
 800eeec:	f04f 0c0a 	mov.w	ip, #10
 800eef0:	4621      	mov	r1, r4
 800eef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eef6:	3b30      	subs	r3, #48	; 0x30
 800eef8:	2b09      	cmp	r3, #9
 800eefa:	d94e      	bls.n	800ef9a <_svfiprintf_r+0x17e>
 800eefc:	b1b0      	cbz	r0, 800ef2c <_svfiprintf_r+0x110>
 800eefe:	9207      	str	r2, [sp, #28]
 800ef00:	e014      	b.n	800ef2c <_svfiprintf_r+0x110>
 800ef02:	eba0 0308 	sub.w	r3, r0, r8
 800ef06:	fa09 f303 	lsl.w	r3, r9, r3
 800ef0a:	4313      	orrs	r3, r2
 800ef0c:	9304      	str	r3, [sp, #16]
 800ef0e:	46a2      	mov	sl, r4
 800ef10:	e7d2      	b.n	800eeb8 <_svfiprintf_r+0x9c>
 800ef12:	9b03      	ldr	r3, [sp, #12]
 800ef14:	1d19      	adds	r1, r3, #4
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	9103      	str	r1, [sp, #12]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	bfbb      	ittet	lt
 800ef1e:	425b      	neglt	r3, r3
 800ef20:	f042 0202 	orrlt.w	r2, r2, #2
 800ef24:	9307      	strge	r3, [sp, #28]
 800ef26:	9307      	strlt	r3, [sp, #28]
 800ef28:	bfb8      	it	lt
 800ef2a:	9204      	strlt	r2, [sp, #16]
 800ef2c:	7823      	ldrb	r3, [r4, #0]
 800ef2e:	2b2e      	cmp	r3, #46	; 0x2e
 800ef30:	d10c      	bne.n	800ef4c <_svfiprintf_r+0x130>
 800ef32:	7863      	ldrb	r3, [r4, #1]
 800ef34:	2b2a      	cmp	r3, #42	; 0x2a
 800ef36:	d135      	bne.n	800efa4 <_svfiprintf_r+0x188>
 800ef38:	9b03      	ldr	r3, [sp, #12]
 800ef3a:	1d1a      	adds	r2, r3, #4
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	9203      	str	r2, [sp, #12]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	bfb8      	it	lt
 800ef44:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef48:	3402      	adds	r4, #2
 800ef4a:	9305      	str	r3, [sp, #20]
 800ef4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f018 <_svfiprintf_r+0x1fc>
 800ef50:	7821      	ldrb	r1, [r4, #0]
 800ef52:	2203      	movs	r2, #3
 800ef54:	4650      	mov	r0, sl
 800ef56:	f7f1 f9cb 	bl	80002f0 <memchr>
 800ef5a:	b140      	cbz	r0, 800ef6e <_svfiprintf_r+0x152>
 800ef5c:	2340      	movs	r3, #64	; 0x40
 800ef5e:	eba0 000a 	sub.w	r0, r0, sl
 800ef62:	fa03 f000 	lsl.w	r0, r3, r0
 800ef66:	9b04      	ldr	r3, [sp, #16]
 800ef68:	4303      	orrs	r3, r0
 800ef6a:	3401      	adds	r4, #1
 800ef6c:	9304      	str	r3, [sp, #16]
 800ef6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef72:	4826      	ldr	r0, [pc, #152]	; (800f00c <_svfiprintf_r+0x1f0>)
 800ef74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef78:	2206      	movs	r2, #6
 800ef7a:	f7f1 f9b9 	bl	80002f0 <memchr>
 800ef7e:	2800      	cmp	r0, #0
 800ef80:	d038      	beq.n	800eff4 <_svfiprintf_r+0x1d8>
 800ef82:	4b23      	ldr	r3, [pc, #140]	; (800f010 <_svfiprintf_r+0x1f4>)
 800ef84:	bb1b      	cbnz	r3, 800efce <_svfiprintf_r+0x1b2>
 800ef86:	9b03      	ldr	r3, [sp, #12]
 800ef88:	3307      	adds	r3, #7
 800ef8a:	f023 0307 	bic.w	r3, r3, #7
 800ef8e:	3308      	adds	r3, #8
 800ef90:	9303      	str	r3, [sp, #12]
 800ef92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef94:	4433      	add	r3, r6
 800ef96:	9309      	str	r3, [sp, #36]	; 0x24
 800ef98:	e767      	b.n	800ee6a <_svfiprintf_r+0x4e>
 800ef9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef9e:	460c      	mov	r4, r1
 800efa0:	2001      	movs	r0, #1
 800efa2:	e7a5      	b.n	800eef0 <_svfiprintf_r+0xd4>
 800efa4:	2300      	movs	r3, #0
 800efa6:	3401      	adds	r4, #1
 800efa8:	9305      	str	r3, [sp, #20]
 800efaa:	4619      	mov	r1, r3
 800efac:	f04f 0c0a 	mov.w	ip, #10
 800efb0:	4620      	mov	r0, r4
 800efb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efb6:	3a30      	subs	r2, #48	; 0x30
 800efb8:	2a09      	cmp	r2, #9
 800efba:	d903      	bls.n	800efc4 <_svfiprintf_r+0x1a8>
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d0c5      	beq.n	800ef4c <_svfiprintf_r+0x130>
 800efc0:	9105      	str	r1, [sp, #20]
 800efc2:	e7c3      	b.n	800ef4c <_svfiprintf_r+0x130>
 800efc4:	fb0c 2101 	mla	r1, ip, r1, r2
 800efc8:	4604      	mov	r4, r0
 800efca:	2301      	movs	r3, #1
 800efcc:	e7f0      	b.n	800efb0 <_svfiprintf_r+0x194>
 800efce:	ab03      	add	r3, sp, #12
 800efd0:	9300      	str	r3, [sp, #0]
 800efd2:	462a      	mov	r2, r5
 800efd4:	4b0f      	ldr	r3, [pc, #60]	; (800f014 <_svfiprintf_r+0x1f8>)
 800efd6:	a904      	add	r1, sp, #16
 800efd8:	4638      	mov	r0, r7
 800efda:	f3af 8000 	nop.w
 800efde:	1c42      	adds	r2, r0, #1
 800efe0:	4606      	mov	r6, r0
 800efe2:	d1d6      	bne.n	800ef92 <_svfiprintf_r+0x176>
 800efe4:	89ab      	ldrh	r3, [r5, #12]
 800efe6:	065b      	lsls	r3, r3, #25
 800efe8:	f53f af2c 	bmi.w	800ee44 <_svfiprintf_r+0x28>
 800efec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efee:	b01d      	add	sp, #116	; 0x74
 800eff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff4:	ab03      	add	r3, sp, #12
 800eff6:	9300      	str	r3, [sp, #0]
 800eff8:	462a      	mov	r2, r5
 800effa:	4b06      	ldr	r3, [pc, #24]	; (800f014 <_svfiprintf_r+0x1f8>)
 800effc:	a904      	add	r1, sp, #16
 800effe:	4638      	mov	r0, r7
 800f000:	f000 fba6 	bl	800f750 <_printf_i>
 800f004:	e7eb      	b.n	800efde <_svfiprintf_r+0x1c2>
 800f006:	bf00      	nop
 800f008:	0801075d 	.word	0x0801075d
 800f00c:	08010767 	.word	0x08010767
 800f010:	00000000 	.word	0x00000000
 800f014:	0800ed65 	.word	0x0800ed65
 800f018:	08010763 	.word	0x08010763

0800f01c <_sungetc_r>:
 800f01c:	b538      	push	{r3, r4, r5, lr}
 800f01e:	1c4b      	adds	r3, r1, #1
 800f020:	4614      	mov	r4, r2
 800f022:	d103      	bne.n	800f02c <_sungetc_r+0x10>
 800f024:	f04f 35ff 	mov.w	r5, #4294967295
 800f028:	4628      	mov	r0, r5
 800f02a:	bd38      	pop	{r3, r4, r5, pc}
 800f02c:	8993      	ldrh	r3, [r2, #12]
 800f02e:	f023 0320 	bic.w	r3, r3, #32
 800f032:	8193      	strh	r3, [r2, #12]
 800f034:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f036:	6852      	ldr	r2, [r2, #4]
 800f038:	b2cd      	uxtb	r5, r1
 800f03a:	b18b      	cbz	r3, 800f060 <_sungetc_r+0x44>
 800f03c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f03e:	4293      	cmp	r3, r2
 800f040:	dd08      	ble.n	800f054 <_sungetc_r+0x38>
 800f042:	6823      	ldr	r3, [r4, #0]
 800f044:	1e5a      	subs	r2, r3, #1
 800f046:	6022      	str	r2, [r4, #0]
 800f048:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f04c:	6863      	ldr	r3, [r4, #4]
 800f04e:	3301      	adds	r3, #1
 800f050:	6063      	str	r3, [r4, #4]
 800f052:	e7e9      	b.n	800f028 <_sungetc_r+0xc>
 800f054:	4621      	mov	r1, r4
 800f056:	f000 ff35 	bl	800fec4 <__submore>
 800f05a:	2800      	cmp	r0, #0
 800f05c:	d0f1      	beq.n	800f042 <_sungetc_r+0x26>
 800f05e:	e7e1      	b.n	800f024 <_sungetc_r+0x8>
 800f060:	6921      	ldr	r1, [r4, #16]
 800f062:	6823      	ldr	r3, [r4, #0]
 800f064:	b151      	cbz	r1, 800f07c <_sungetc_r+0x60>
 800f066:	4299      	cmp	r1, r3
 800f068:	d208      	bcs.n	800f07c <_sungetc_r+0x60>
 800f06a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f06e:	42a9      	cmp	r1, r5
 800f070:	d104      	bne.n	800f07c <_sungetc_r+0x60>
 800f072:	3b01      	subs	r3, #1
 800f074:	3201      	adds	r2, #1
 800f076:	6023      	str	r3, [r4, #0]
 800f078:	6062      	str	r2, [r4, #4]
 800f07a:	e7d5      	b.n	800f028 <_sungetc_r+0xc>
 800f07c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f084:	6363      	str	r3, [r4, #52]	; 0x34
 800f086:	2303      	movs	r3, #3
 800f088:	63a3      	str	r3, [r4, #56]	; 0x38
 800f08a:	4623      	mov	r3, r4
 800f08c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f090:	6023      	str	r3, [r4, #0]
 800f092:	2301      	movs	r3, #1
 800f094:	e7dc      	b.n	800f050 <_sungetc_r+0x34>

0800f096 <__ssrefill_r>:
 800f096:	b510      	push	{r4, lr}
 800f098:	460c      	mov	r4, r1
 800f09a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f09c:	b169      	cbz	r1, 800f0ba <__ssrefill_r+0x24>
 800f09e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f0a2:	4299      	cmp	r1, r3
 800f0a4:	d001      	beq.n	800f0aa <__ssrefill_r+0x14>
 800f0a6:	f7ff fa11 	bl	800e4cc <_free_r>
 800f0aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0ac:	6063      	str	r3, [r4, #4]
 800f0ae:	2000      	movs	r0, #0
 800f0b0:	6360      	str	r0, [r4, #52]	; 0x34
 800f0b2:	b113      	cbz	r3, 800f0ba <__ssrefill_r+0x24>
 800f0b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f0b6:	6023      	str	r3, [r4, #0]
 800f0b8:	bd10      	pop	{r4, pc}
 800f0ba:	6923      	ldr	r3, [r4, #16]
 800f0bc:	6023      	str	r3, [r4, #0]
 800f0be:	2300      	movs	r3, #0
 800f0c0:	6063      	str	r3, [r4, #4]
 800f0c2:	89a3      	ldrh	r3, [r4, #12]
 800f0c4:	f043 0320 	orr.w	r3, r3, #32
 800f0c8:	81a3      	strh	r3, [r4, #12]
 800f0ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ce:	e7f3      	b.n	800f0b8 <__ssrefill_r+0x22>

0800f0d0 <__ssvfiscanf_r>:
 800f0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0d4:	460c      	mov	r4, r1
 800f0d6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f0da:	2100      	movs	r1, #0
 800f0dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f0e0:	49a6      	ldr	r1, [pc, #664]	; (800f37c <__ssvfiscanf_r+0x2ac>)
 800f0e2:	91a0      	str	r1, [sp, #640]	; 0x280
 800f0e4:	f10d 0804 	add.w	r8, sp, #4
 800f0e8:	49a5      	ldr	r1, [pc, #660]	; (800f380 <__ssvfiscanf_r+0x2b0>)
 800f0ea:	4fa6      	ldr	r7, [pc, #664]	; (800f384 <__ssvfiscanf_r+0x2b4>)
 800f0ec:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f388 <__ssvfiscanf_r+0x2b8>
 800f0f0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f0f4:	4606      	mov	r6, r0
 800f0f6:	91a1      	str	r1, [sp, #644]	; 0x284
 800f0f8:	9300      	str	r3, [sp, #0]
 800f0fa:	7813      	ldrb	r3, [r2, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	f000 815a 	beq.w	800f3b6 <__ssvfiscanf_r+0x2e6>
 800f102:	5dd9      	ldrb	r1, [r3, r7]
 800f104:	f011 0108 	ands.w	r1, r1, #8
 800f108:	f102 0501 	add.w	r5, r2, #1
 800f10c:	d019      	beq.n	800f142 <__ssvfiscanf_r+0x72>
 800f10e:	6863      	ldr	r3, [r4, #4]
 800f110:	2b00      	cmp	r3, #0
 800f112:	dd0f      	ble.n	800f134 <__ssvfiscanf_r+0x64>
 800f114:	6823      	ldr	r3, [r4, #0]
 800f116:	781a      	ldrb	r2, [r3, #0]
 800f118:	5cba      	ldrb	r2, [r7, r2]
 800f11a:	0712      	lsls	r2, r2, #28
 800f11c:	d401      	bmi.n	800f122 <__ssvfiscanf_r+0x52>
 800f11e:	462a      	mov	r2, r5
 800f120:	e7eb      	b.n	800f0fa <__ssvfiscanf_r+0x2a>
 800f122:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f124:	3201      	adds	r2, #1
 800f126:	9245      	str	r2, [sp, #276]	; 0x114
 800f128:	6862      	ldr	r2, [r4, #4]
 800f12a:	3301      	adds	r3, #1
 800f12c:	3a01      	subs	r2, #1
 800f12e:	6062      	str	r2, [r4, #4]
 800f130:	6023      	str	r3, [r4, #0]
 800f132:	e7ec      	b.n	800f10e <__ssvfiscanf_r+0x3e>
 800f134:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f136:	4621      	mov	r1, r4
 800f138:	4630      	mov	r0, r6
 800f13a:	4798      	blx	r3
 800f13c:	2800      	cmp	r0, #0
 800f13e:	d0e9      	beq.n	800f114 <__ssvfiscanf_r+0x44>
 800f140:	e7ed      	b.n	800f11e <__ssvfiscanf_r+0x4e>
 800f142:	2b25      	cmp	r3, #37	; 0x25
 800f144:	d012      	beq.n	800f16c <__ssvfiscanf_r+0x9c>
 800f146:	469a      	mov	sl, r3
 800f148:	6863      	ldr	r3, [r4, #4]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	f340 8091 	ble.w	800f272 <__ssvfiscanf_r+0x1a2>
 800f150:	6822      	ldr	r2, [r4, #0]
 800f152:	7813      	ldrb	r3, [r2, #0]
 800f154:	4553      	cmp	r3, sl
 800f156:	f040 812e 	bne.w	800f3b6 <__ssvfiscanf_r+0x2e6>
 800f15a:	6863      	ldr	r3, [r4, #4]
 800f15c:	3b01      	subs	r3, #1
 800f15e:	6063      	str	r3, [r4, #4]
 800f160:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f162:	3201      	adds	r2, #1
 800f164:	3301      	adds	r3, #1
 800f166:	6022      	str	r2, [r4, #0]
 800f168:	9345      	str	r3, [sp, #276]	; 0x114
 800f16a:	e7d8      	b.n	800f11e <__ssvfiscanf_r+0x4e>
 800f16c:	9141      	str	r1, [sp, #260]	; 0x104
 800f16e:	9143      	str	r1, [sp, #268]	; 0x10c
 800f170:	7853      	ldrb	r3, [r2, #1]
 800f172:	2b2a      	cmp	r3, #42	; 0x2a
 800f174:	bf02      	ittt	eq
 800f176:	2310      	moveq	r3, #16
 800f178:	1c95      	addeq	r5, r2, #2
 800f17a:	9341      	streq	r3, [sp, #260]	; 0x104
 800f17c:	220a      	movs	r2, #10
 800f17e:	46aa      	mov	sl, r5
 800f180:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f184:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f188:	2b09      	cmp	r3, #9
 800f18a:	d91d      	bls.n	800f1c8 <__ssvfiscanf_r+0xf8>
 800f18c:	487e      	ldr	r0, [pc, #504]	; (800f388 <__ssvfiscanf_r+0x2b8>)
 800f18e:	2203      	movs	r2, #3
 800f190:	f7f1 f8ae 	bl	80002f0 <memchr>
 800f194:	b140      	cbz	r0, 800f1a8 <__ssvfiscanf_r+0xd8>
 800f196:	2301      	movs	r3, #1
 800f198:	eba0 0009 	sub.w	r0, r0, r9
 800f19c:	fa03 f000 	lsl.w	r0, r3, r0
 800f1a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f1a2:	4318      	orrs	r0, r3
 800f1a4:	9041      	str	r0, [sp, #260]	; 0x104
 800f1a6:	4655      	mov	r5, sl
 800f1a8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f1ac:	2b78      	cmp	r3, #120	; 0x78
 800f1ae:	d806      	bhi.n	800f1be <__ssvfiscanf_r+0xee>
 800f1b0:	2b57      	cmp	r3, #87	; 0x57
 800f1b2:	d810      	bhi.n	800f1d6 <__ssvfiscanf_r+0x106>
 800f1b4:	2b25      	cmp	r3, #37	; 0x25
 800f1b6:	d0c6      	beq.n	800f146 <__ssvfiscanf_r+0x76>
 800f1b8:	d856      	bhi.n	800f268 <__ssvfiscanf_r+0x198>
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d064      	beq.n	800f288 <__ssvfiscanf_r+0x1b8>
 800f1be:	2303      	movs	r3, #3
 800f1c0:	9347      	str	r3, [sp, #284]	; 0x11c
 800f1c2:	230a      	movs	r3, #10
 800f1c4:	9342      	str	r3, [sp, #264]	; 0x108
 800f1c6:	e071      	b.n	800f2ac <__ssvfiscanf_r+0x1dc>
 800f1c8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f1ca:	fb02 1103 	mla	r1, r2, r3, r1
 800f1ce:	3930      	subs	r1, #48	; 0x30
 800f1d0:	9143      	str	r1, [sp, #268]	; 0x10c
 800f1d2:	4655      	mov	r5, sl
 800f1d4:	e7d3      	b.n	800f17e <__ssvfiscanf_r+0xae>
 800f1d6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f1da:	2a20      	cmp	r2, #32
 800f1dc:	d8ef      	bhi.n	800f1be <__ssvfiscanf_r+0xee>
 800f1de:	a101      	add	r1, pc, #4	; (adr r1, 800f1e4 <__ssvfiscanf_r+0x114>)
 800f1e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f1e4:	0800f297 	.word	0x0800f297
 800f1e8:	0800f1bf 	.word	0x0800f1bf
 800f1ec:	0800f1bf 	.word	0x0800f1bf
 800f1f0:	0800f2f5 	.word	0x0800f2f5
 800f1f4:	0800f1bf 	.word	0x0800f1bf
 800f1f8:	0800f1bf 	.word	0x0800f1bf
 800f1fc:	0800f1bf 	.word	0x0800f1bf
 800f200:	0800f1bf 	.word	0x0800f1bf
 800f204:	0800f1bf 	.word	0x0800f1bf
 800f208:	0800f1bf 	.word	0x0800f1bf
 800f20c:	0800f1bf 	.word	0x0800f1bf
 800f210:	0800f30b 	.word	0x0800f30b
 800f214:	0800f2e1 	.word	0x0800f2e1
 800f218:	0800f26f 	.word	0x0800f26f
 800f21c:	0800f26f 	.word	0x0800f26f
 800f220:	0800f26f 	.word	0x0800f26f
 800f224:	0800f1bf 	.word	0x0800f1bf
 800f228:	0800f2e5 	.word	0x0800f2e5
 800f22c:	0800f1bf 	.word	0x0800f1bf
 800f230:	0800f1bf 	.word	0x0800f1bf
 800f234:	0800f1bf 	.word	0x0800f1bf
 800f238:	0800f1bf 	.word	0x0800f1bf
 800f23c:	0800f31b 	.word	0x0800f31b
 800f240:	0800f2ed 	.word	0x0800f2ed
 800f244:	0800f28f 	.word	0x0800f28f
 800f248:	0800f1bf 	.word	0x0800f1bf
 800f24c:	0800f1bf 	.word	0x0800f1bf
 800f250:	0800f317 	.word	0x0800f317
 800f254:	0800f1bf 	.word	0x0800f1bf
 800f258:	0800f2e1 	.word	0x0800f2e1
 800f25c:	0800f1bf 	.word	0x0800f1bf
 800f260:	0800f1bf 	.word	0x0800f1bf
 800f264:	0800f297 	.word	0x0800f297
 800f268:	3b45      	subs	r3, #69	; 0x45
 800f26a:	2b02      	cmp	r3, #2
 800f26c:	d8a7      	bhi.n	800f1be <__ssvfiscanf_r+0xee>
 800f26e:	2305      	movs	r3, #5
 800f270:	e01b      	b.n	800f2aa <__ssvfiscanf_r+0x1da>
 800f272:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f274:	4621      	mov	r1, r4
 800f276:	4630      	mov	r0, r6
 800f278:	4798      	blx	r3
 800f27a:	2800      	cmp	r0, #0
 800f27c:	f43f af68 	beq.w	800f150 <__ssvfiscanf_r+0x80>
 800f280:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f282:	2800      	cmp	r0, #0
 800f284:	f040 808d 	bne.w	800f3a2 <__ssvfiscanf_r+0x2d2>
 800f288:	f04f 30ff 	mov.w	r0, #4294967295
 800f28c:	e08f      	b.n	800f3ae <__ssvfiscanf_r+0x2de>
 800f28e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f290:	f042 0220 	orr.w	r2, r2, #32
 800f294:	9241      	str	r2, [sp, #260]	; 0x104
 800f296:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f29c:	9241      	str	r2, [sp, #260]	; 0x104
 800f29e:	2210      	movs	r2, #16
 800f2a0:	2b6f      	cmp	r3, #111	; 0x6f
 800f2a2:	9242      	str	r2, [sp, #264]	; 0x108
 800f2a4:	bf34      	ite	cc
 800f2a6:	2303      	movcc	r3, #3
 800f2a8:	2304      	movcs	r3, #4
 800f2aa:	9347      	str	r3, [sp, #284]	; 0x11c
 800f2ac:	6863      	ldr	r3, [r4, #4]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	dd42      	ble.n	800f338 <__ssvfiscanf_r+0x268>
 800f2b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f2b4:	0659      	lsls	r1, r3, #25
 800f2b6:	d404      	bmi.n	800f2c2 <__ssvfiscanf_r+0x1f2>
 800f2b8:	6823      	ldr	r3, [r4, #0]
 800f2ba:	781a      	ldrb	r2, [r3, #0]
 800f2bc:	5cba      	ldrb	r2, [r7, r2]
 800f2be:	0712      	lsls	r2, r2, #28
 800f2c0:	d441      	bmi.n	800f346 <__ssvfiscanf_r+0x276>
 800f2c2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f2c4:	2b02      	cmp	r3, #2
 800f2c6:	dc50      	bgt.n	800f36a <__ssvfiscanf_r+0x29a>
 800f2c8:	466b      	mov	r3, sp
 800f2ca:	4622      	mov	r2, r4
 800f2cc:	a941      	add	r1, sp, #260	; 0x104
 800f2ce:	4630      	mov	r0, r6
 800f2d0:	f000 fb64 	bl	800f99c <_scanf_chars>
 800f2d4:	2801      	cmp	r0, #1
 800f2d6:	d06e      	beq.n	800f3b6 <__ssvfiscanf_r+0x2e6>
 800f2d8:	2802      	cmp	r0, #2
 800f2da:	f47f af20 	bne.w	800f11e <__ssvfiscanf_r+0x4e>
 800f2de:	e7cf      	b.n	800f280 <__ssvfiscanf_r+0x1b0>
 800f2e0:	220a      	movs	r2, #10
 800f2e2:	e7dd      	b.n	800f2a0 <__ssvfiscanf_r+0x1d0>
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	9342      	str	r3, [sp, #264]	; 0x108
 800f2e8:	2303      	movs	r3, #3
 800f2ea:	e7de      	b.n	800f2aa <__ssvfiscanf_r+0x1da>
 800f2ec:	2308      	movs	r3, #8
 800f2ee:	9342      	str	r3, [sp, #264]	; 0x108
 800f2f0:	2304      	movs	r3, #4
 800f2f2:	e7da      	b.n	800f2aa <__ssvfiscanf_r+0x1da>
 800f2f4:	4629      	mov	r1, r5
 800f2f6:	4640      	mov	r0, r8
 800f2f8:	f000 fcb4 	bl	800fc64 <__sccl>
 800f2fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f2fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f302:	9341      	str	r3, [sp, #260]	; 0x104
 800f304:	4605      	mov	r5, r0
 800f306:	2301      	movs	r3, #1
 800f308:	e7cf      	b.n	800f2aa <__ssvfiscanf_r+0x1da>
 800f30a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f310:	9341      	str	r3, [sp, #260]	; 0x104
 800f312:	2300      	movs	r3, #0
 800f314:	e7c9      	b.n	800f2aa <__ssvfiscanf_r+0x1da>
 800f316:	2302      	movs	r3, #2
 800f318:	e7c7      	b.n	800f2aa <__ssvfiscanf_r+0x1da>
 800f31a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f31c:	06c3      	lsls	r3, r0, #27
 800f31e:	f53f aefe 	bmi.w	800f11e <__ssvfiscanf_r+0x4e>
 800f322:	9b00      	ldr	r3, [sp, #0]
 800f324:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f326:	1d19      	adds	r1, r3, #4
 800f328:	9100      	str	r1, [sp, #0]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f010 0f01 	tst.w	r0, #1
 800f330:	bf14      	ite	ne
 800f332:	801a      	strhne	r2, [r3, #0]
 800f334:	601a      	streq	r2, [r3, #0]
 800f336:	e6f2      	b.n	800f11e <__ssvfiscanf_r+0x4e>
 800f338:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f33a:	4621      	mov	r1, r4
 800f33c:	4630      	mov	r0, r6
 800f33e:	4798      	blx	r3
 800f340:	2800      	cmp	r0, #0
 800f342:	d0b6      	beq.n	800f2b2 <__ssvfiscanf_r+0x1e2>
 800f344:	e79c      	b.n	800f280 <__ssvfiscanf_r+0x1b0>
 800f346:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f348:	3201      	adds	r2, #1
 800f34a:	9245      	str	r2, [sp, #276]	; 0x114
 800f34c:	6862      	ldr	r2, [r4, #4]
 800f34e:	3a01      	subs	r2, #1
 800f350:	2a00      	cmp	r2, #0
 800f352:	6062      	str	r2, [r4, #4]
 800f354:	dd02      	ble.n	800f35c <__ssvfiscanf_r+0x28c>
 800f356:	3301      	adds	r3, #1
 800f358:	6023      	str	r3, [r4, #0]
 800f35a:	e7ad      	b.n	800f2b8 <__ssvfiscanf_r+0x1e8>
 800f35c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f35e:	4621      	mov	r1, r4
 800f360:	4630      	mov	r0, r6
 800f362:	4798      	blx	r3
 800f364:	2800      	cmp	r0, #0
 800f366:	d0a7      	beq.n	800f2b8 <__ssvfiscanf_r+0x1e8>
 800f368:	e78a      	b.n	800f280 <__ssvfiscanf_r+0x1b0>
 800f36a:	2b04      	cmp	r3, #4
 800f36c:	dc0e      	bgt.n	800f38c <__ssvfiscanf_r+0x2bc>
 800f36e:	466b      	mov	r3, sp
 800f370:	4622      	mov	r2, r4
 800f372:	a941      	add	r1, sp, #260	; 0x104
 800f374:	4630      	mov	r0, r6
 800f376:	f000 fb6b 	bl	800fa50 <_scanf_i>
 800f37a:	e7ab      	b.n	800f2d4 <__ssvfiscanf_r+0x204>
 800f37c:	0800f01d 	.word	0x0800f01d
 800f380:	0800f097 	.word	0x0800f097
 800f384:	0801065d 	.word	0x0801065d
 800f388:	08010763 	.word	0x08010763
 800f38c:	4b0b      	ldr	r3, [pc, #44]	; (800f3bc <__ssvfiscanf_r+0x2ec>)
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f43f aec5 	beq.w	800f11e <__ssvfiscanf_r+0x4e>
 800f394:	466b      	mov	r3, sp
 800f396:	4622      	mov	r2, r4
 800f398:	a941      	add	r1, sp, #260	; 0x104
 800f39a:	4630      	mov	r0, r6
 800f39c:	f3af 8000 	nop.w
 800f3a0:	e798      	b.n	800f2d4 <__ssvfiscanf_r+0x204>
 800f3a2:	89a3      	ldrh	r3, [r4, #12]
 800f3a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f3a8:	bf18      	it	ne
 800f3aa:	f04f 30ff 	movne.w	r0, #4294967295
 800f3ae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3b6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f3b8:	e7f9      	b.n	800f3ae <__ssvfiscanf_r+0x2de>
 800f3ba:	bf00      	nop
 800f3bc:	00000000 	.word	0x00000000

0800f3c0 <__sfputc_r>:
 800f3c0:	6893      	ldr	r3, [r2, #8]
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	b410      	push	{r4}
 800f3c8:	6093      	str	r3, [r2, #8]
 800f3ca:	da08      	bge.n	800f3de <__sfputc_r+0x1e>
 800f3cc:	6994      	ldr	r4, [r2, #24]
 800f3ce:	42a3      	cmp	r3, r4
 800f3d0:	db01      	blt.n	800f3d6 <__sfputc_r+0x16>
 800f3d2:	290a      	cmp	r1, #10
 800f3d4:	d103      	bne.n	800f3de <__sfputc_r+0x1e>
 800f3d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3da:	f000 bdad 	b.w	800ff38 <__swbuf_r>
 800f3de:	6813      	ldr	r3, [r2, #0]
 800f3e0:	1c58      	adds	r0, r3, #1
 800f3e2:	6010      	str	r0, [r2, #0]
 800f3e4:	7019      	strb	r1, [r3, #0]
 800f3e6:	4608      	mov	r0, r1
 800f3e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3ec:	4770      	bx	lr

0800f3ee <__sfputs_r>:
 800f3ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3f0:	4606      	mov	r6, r0
 800f3f2:	460f      	mov	r7, r1
 800f3f4:	4614      	mov	r4, r2
 800f3f6:	18d5      	adds	r5, r2, r3
 800f3f8:	42ac      	cmp	r4, r5
 800f3fa:	d101      	bne.n	800f400 <__sfputs_r+0x12>
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	e007      	b.n	800f410 <__sfputs_r+0x22>
 800f400:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f404:	463a      	mov	r2, r7
 800f406:	4630      	mov	r0, r6
 800f408:	f7ff ffda 	bl	800f3c0 <__sfputc_r>
 800f40c:	1c43      	adds	r3, r0, #1
 800f40e:	d1f3      	bne.n	800f3f8 <__sfputs_r+0xa>
 800f410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f414 <_vfiprintf_r>:
 800f414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f418:	460d      	mov	r5, r1
 800f41a:	b09d      	sub	sp, #116	; 0x74
 800f41c:	4614      	mov	r4, r2
 800f41e:	4698      	mov	r8, r3
 800f420:	4606      	mov	r6, r0
 800f422:	b118      	cbz	r0, 800f42c <_vfiprintf_r+0x18>
 800f424:	6983      	ldr	r3, [r0, #24]
 800f426:	b90b      	cbnz	r3, 800f42c <_vfiprintf_r+0x18>
 800f428:	f7fe ff3e 	bl	800e2a8 <__sinit>
 800f42c:	4b89      	ldr	r3, [pc, #548]	; (800f654 <_vfiprintf_r+0x240>)
 800f42e:	429d      	cmp	r5, r3
 800f430:	d11b      	bne.n	800f46a <_vfiprintf_r+0x56>
 800f432:	6875      	ldr	r5, [r6, #4]
 800f434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f436:	07d9      	lsls	r1, r3, #31
 800f438:	d405      	bmi.n	800f446 <_vfiprintf_r+0x32>
 800f43a:	89ab      	ldrh	r3, [r5, #12]
 800f43c:	059a      	lsls	r2, r3, #22
 800f43e:	d402      	bmi.n	800f446 <_vfiprintf_r+0x32>
 800f440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f442:	f7fe fff4 	bl	800e42e <__retarget_lock_acquire_recursive>
 800f446:	89ab      	ldrh	r3, [r5, #12]
 800f448:	071b      	lsls	r3, r3, #28
 800f44a:	d501      	bpl.n	800f450 <_vfiprintf_r+0x3c>
 800f44c:	692b      	ldr	r3, [r5, #16]
 800f44e:	b9eb      	cbnz	r3, 800f48c <_vfiprintf_r+0x78>
 800f450:	4629      	mov	r1, r5
 800f452:	4630      	mov	r0, r6
 800f454:	f000 fdc2 	bl	800ffdc <__swsetup_r>
 800f458:	b1c0      	cbz	r0, 800f48c <_vfiprintf_r+0x78>
 800f45a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f45c:	07dc      	lsls	r4, r3, #31
 800f45e:	d50e      	bpl.n	800f47e <_vfiprintf_r+0x6a>
 800f460:	f04f 30ff 	mov.w	r0, #4294967295
 800f464:	b01d      	add	sp, #116	; 0x74
 800f466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f46a:	4b7b      	ldr	r3, [pc, #492]	; (800f658 <_vfiprintf_r+0x244>)
 800f46c:	429d      	cmp	r5, r3
 800f46e:	d101      	bne.n	800f474 <_vfiprintf_r+0x60>
 800f470:	68b5      	ldr	r5, [r6, #8]
 800f472:	e7df      	b.n	800f434 <_vfiprintf_r+0x20>
 800f474:	4b79      	ldr	r3, [pc, #484]	; (800f65c <_vfiprintf_r+0x248>)
 800f476:	429d      	cmp	r5, r3
 800f478:	bf08      	it	eq
 800f47a:	68f5      	ldreq	r5, [r6, #12]
 800f47c:	e7da      	b.n	800f434 <_vfiprintf_r+0x20>
 800f47e:	89ab      	ldrh	r3, [r5, #12]
 800f480:	0598      	lsls	r0, r3, #22
 800f482:	d4ed      	bmi.n	800f460 <_vfiprintf_r+0x4c>
 800f484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f486:	f7fe ffd3 	bl	800e430 <__retarget_lock_release_recursive>
 800f48a:	e7e9      	b.n	800f460 <_vfiprintf_r+0x4c>
 800f48c:	2300      	movs	r3, #0
 800f48e:	9309      	str	r3, [sp, #36]	; 0x24
 800f490:	2320      	movs	r3, #32
 800f492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f496:	f8cd 800c 	str.w	r8, [sp, #12]
 800f49a:	2330      	movs	r3, #48	; 0x30
 800f49c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f660 <_vfiprintf_r+0x24c>
 800f4a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4a4:	f04f 0901 	mov.w	r9, #1
 800f4a8:	4623      	mov	r3, r4
 800f4aa:	469a      	mov	sl, r3
 800f4ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4b0:	b10a      	cbz	r2, 800f4b6 <_vfiprintf_r+0xa2>
 800f4b2:	2a25      	cmp	r2, #37	; 0x25
 800f4b4:	d1f9      	bne.n	800f4aa <_vfiprintf_r+0x96>
 800f4b6:	ebba 0b04 	subs.w	fp, sl, r4
 800f4ba:	d00b      	beq.n	800f4d4 <_vfiprintf_r+0xc0>
 800f4bc:	465b      	mov	r3, fp
 800f4be:	4622      	mov	r2, r4
 800f4c0:	4629      	mov	r1, r5
 800f4c2:	4630      	mov	r0, r6
 800f4c4:	f7ff ff93 	bl	800f3ee <__sfputs_r>
 800f4c8:	3001      	adds	r0, #1
 800f4ca:	f000 80aa 	beq.w	800f622 <_vfiprintf_r+0x20e>
 800f4ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4d0:	445a      	add	r2, fp
 800f4d2:	9209      	str	r2, [sp, #36]	; 0x24
 800f4d4:	f89a 3000 	ldrb.w	r3, [sl]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	f000 80a2 	beq.w	800f622 <_vfiprintf_r+0x20e>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f4e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4e8:	f10a 0a01 	add.w	sl, sl, #1
 800f4ec:	9304      	str	r3, [sp, #16]
 800f4ee:	9307      	str	r3, [sp, #28]
 800f4f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4f4:	931a      	str	r3, [sp, #104]	; 0x68
 800f4f6:	4654      	mov	r4, sl
 800f4f8:	2205      	movs	r2, #5
 800f4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4fe:	4858      	ldr	r0, [pc, #352]	; (800f660 <_vfiprintf_r+0x24c>)
 800f500:	f7f0 fef6 	bl	80002f0 <memchr>
 800f504:	9a04      	ldr	r2, [sp, #16]
 800f506:	b9d8      	cbnz	r0, 800f540 <_vfiprintf_r+0x12c>
 800f508:	06d1      	lsls	r1, r2, #27
 800f50a:	bf44      	itt	mi
 800f50c:	2320      	movmi	r3, #32
 800f50e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f512:	0713      	lsls	r3, r2, #28
 800f514:	bf44      	itt	mi
 800f516:	232b      	movmi	r3, #43	; 0x2b
 800f518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f51c:	f89a 3000 	ldrb.w	r3, [sl]
 800f520:	2b2a      	cmp	r3, #42	; 0x2a
 800f522:	d015      	beq.n	800f550 <_vfiprintf_r+0x13c>
 800f524:	9a07      	ldr	r2, [sp, #28]
 800f526:	4654      	mov	r4, sl
 800f528:	2000      	movs	r0, #0
 800f52a:	f04f 0c0a 	mov.w	ip, #10
 800f52e:	4621      	mov	r1, r4
 800f530:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f534:	3b30      	subs	r3, #48	; 0x30
 800f536:	2b09      	cmp	r3, #9
 800f538:	d94e      	bls.n	800f5d8 <_vfiprintf_r+0x1c4>
 800f53a:	b1b0      	cbz	r0, 800f56a <_vfiprintf_r+0x156>
 800f53c:	9207      	str	r2, [sp, #28]
 800f53e:	e014      	b.n	800f56a <_vfiprintf_r+0x156>
 800f540:	eba0 0308 	sub.w	r3, r0, r8
 800f544:	fa09 f303 	lsl.w	r3, r9, r3
 800f548:	4313      	orrs	r3, r2
 800f54a:	9304      	str	r3, [sp, #16]
 800f54c:	46a2      	mov	sl, r4
 800f54e:	e7d2      	b.n	800f4f6 <_vfiprintf_r+0xe2>
 800f550:	9b03      	ldr	r3, [sp, #12]
 800f552:	1d19      	adds	r1, r3, #4
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	9103      	str	r1, [sp, #12]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	bfbb      	ittet	lt
 800f55c:	425b      	neglt	r3, r3
 800f55e:	f042 0202 	orrlt.w	r2, r2, #2
 800f562:	9307      	strge	r3, [sp, #28]
 800f564:	9307      	strlt	r3, [sp, #28]
 800f566:	bfb8      	it	lt
 800f568:	9204      	strlt	r2, [sp, #16]
 800f56a:	7823      	ldrb	r3, [r4, #0]
 800f56c:	2b2e      	cmp	r3, #46	; 0x2e
 800f56e:	d10c      	bne.n	800f58a <_vfiprintf_r+0x176>
 800f570:	7863      	ldrb	r3, [r4, #1]
 800f572:	2b2a      	cmp	r3, #42	; 0x2a
 800f574:	d135      	bne.n	800f5e2 <_vfiprintf_r+0x1ce>
 800f576:	9b03      	ldr	r3, [sp, #12]
 800f578:	1d1a      	adds	r2, r3, #4
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	9203      	str	r2, [sp, #12]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	bfb8      	it	lt
 800f582:	f04f 33ff 	movlt.w	r3, #4294967295
 800f586:	3402      	adds	r4, #2
 800f588:	9305      	str	r3, [sp, #20]
 800f58a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f670 <_vfiprintf_r+0x25c>
 800f58e:	7821      	ldrb	r1, [r4, #0]
 800f590:	2203      	movs	r2, #3
 800f592:	4650      	mov	r0, sl
 800f594:	f7f0 feac 	bl	80002f0 <memchr>
 800f598:	b140      	cbz	r0, 800f5ac <_vfiprintf_r+0x198>
 800f59a:	2340      	movs	r3, #64	; 0x40
 800f59c:	eba0 000a 	sub.w	r0, r0, sl
 800f5a0:	fa03 f000 	lsl.w	r0, r3, r0
 800f5a4:	9b04      	ldr	r3, [sp, #16]
 800f5a6:	4303      	orrs	r3, r0
 800f5a8:	3401      	adds	r4, #1
 800f5aa:	9304      	str	r3, [sp, #16]
 800f5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5b0:	482c      	ldr	r0, [pc, #176]	; (800f664 <_vfiprintf_r+0x250>)
 800f5b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5b6:	2206      	movs	r2, #6
 800f5b8:	f7f0 fe9a 	bl	80002f0 <memchr>
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	d03f      	beq.n	800f640 <_vfiprintf_r+0x22c>
 800f5c0:	4b29      	ldr	r3, [pc, #164]	; (800f668 <_vfiprintf_r+0x254>)
 800f5c2:	bb1b      	cbnz	r3, 800f60c <_vfiprintf_r+0x1f8>
 800f5c4:	9b03      	ldr	r3, [sp, #12]
 800f5c6:	3307      	adds	r3, #7
 800f5c8:	f023 0307 	bic.w	r3, r3, #7
 800f5cc:	3308      	adds	r3, #8
 800f5ce:	9303      	str	r3, [sp, #12]
 800f5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5d2:	443b      	add	r3, r7
 800f5d4:	9309      	str	r3, [sp, #36]	; 0x24
 800f5d6:	e767      	b.n	800f4a8 <_vfiprintf_r+0x94>
 800f5d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5dc:	460c      	mov	r4, r1
 800f5de:	2001      	movs	r0, #1
 800f5e0:	e7a5      	b.n	800f52e <_vfiprintf_r+0x11a>
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	3401      	adds	r4, #1
 800f5e6:	9305      	str	r3, [sp, #20]
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	f04f 0c0a 	mov.w	ip, #10
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5f4:	3a30      	subs	r2, #48	; 0x30
 800f5f6:	2a09      	cmp	r2, #9
 800f5f8:	d903      	bls.n	800f602 <_vfiprintf_r+0x1ee>
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d0c5      	beq.n	800f58a <_vfiprintf_r+0x176>
 800f5fe:	9105      	str	r1, [sp, #20]
 800f600:	e7c3      	b.n	800f58a <_vfiprintf_r+0x176>
 800f602:	fb0c 2101 	mla	r1, ip, r1, r2
 800f606:	4604      	mov	r4, r0
 800f608:	2301      	movs	r3, #1
 800f60a:	e7f0      	b.n	800f5ee <_vfiprintf_r+0x1da>
 800f60c:	ab03      	add	r3, sp, #12
 800f60e:	9300      	str	r3, [sp, #0]
 800f610:	462a      	mov	r2, r5
 800f612:	4b16      	ldr	r3, [pc, #88]	; (800f66c <_vfiprintf_r+0x258>)
 800f614:	a904      	add	r1, sp, #16
 800f616:	4630      	mov	r0, r6
 800f618:	f3af 8000 	nop.w
 800f61c:	4607      	mov	r7, r0
 800f61e:	1c78      	adds	r0, r7, #1
 800f620:	d1d6      	bne.n	800f5d0 <_vfiprintf_r+0x1bc>
 800f622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f624:	07d9      	lsls	r1, r3, #31
 800f626:	d405      	bmi.n	800f634 <_vfiprintf_r+0x220>
 800f628:	89ab      	ldrh	r3, [r5, #12]
 800f62a:	059a      	lsls	r2, r3, #22
 800f62c:	d402      	bmi.n	800f634 <_vfiprintf_r+0x220>
 800f62e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f630:	f7fe fefe 	bl	800e430 <__retarget_lock_release_recursive>
 800f634:	89ab      	ldrh	r3, [r5, #12]
 800f636:	065b      	lsls	r3, r3, #25
 800f638:	f53f af12 	bmi.w	800f460 <_vfiprintf_r+0x4c>
 800f63c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f63e:	e711      	b.n	800f464 <_vfiprintf_r+0x50>
 800f640:	ab03      	add	r3, sp, #12
 800f642:	9300      	str	r3, [sp, #0]
 800f644:	462a      	mov	r2, r5
 800f646:	4b09      	ldr	r3, [pc, #36]	; (800f66c <_vfiprintf_r+0x258>)
 800f648:	a904      	add	r1, sp, #16
 800f64a:	4630      	mov	r0, r6
 800f64c:	f000 f880 	bl	800f750 <_printf_i>
 800f650:	e7e4      	b.n	800f61c <_vfiprintf_r+0x208>
 800f652:	bf00      	nop
 800f654:	08010568 	.word	0x08010568
 800f658:	08010588 	.word	0x08010588
 800f65c:	08010548 	.word	0x08010548
 800f660:	0801075d 	.word	0x0801075d
 800f664:	08010767 	.word	0x08010767
 800f668:	00000000 	.word	0x00000000
 800f66c:	0800f3ef 	.word	0x0800f3ef
 800f670:	08010763 	.word	0x08010763

0800f674 <_printf_common>:
 800f674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f678:	4616      	mov	r6, r2
 800f67a:	4699      	mov	r9, r3
 800f67c:	688a      	ldr	r2, [r1, #8]
 800f67e:	690b      	ldr	r3, [r1, #16]
 800f680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f684:	4293      	cmp	r3, r2
 800f686:	bfb8      	it	lt
 800f688:	4613      	movlt	r3, r2
 800f68a:	6033      	str	r3, [r6, #0]
 800f68c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f690:	4607      	mov	r7, r0
 800f692:	460c      	mov	r4, r1
 800f694:	b10a      	cbz	r2, 800f69a <_printf_common+0x26>
 800f696:	3301      	adds	r3, #1
 800f698:	6033      	str	r3, [r6, #0]
 800f69a:	6823      	ldr	r3, [r4, #0]
 800f69c:	0699      	lsls	r1, r3, #26
 800f69e:	bf42      	ittt	mi
 800f6a0:	6833      	ldrmi	r3, [r6, #0]
 800f6a2:	3302      	addmi	r3, #2
 800f6a4:	6033      	strmi	r3, [r6, #0]
 800f6a6:	6825      	ldr	r5, [r4, #0]
 800f6a8:	f015 0506 	ands.w	r5, r5, #6
 800f6ac:	d106      	bne.n	800f6bc <_printf_common+0x48>
 800f6ae:	f104 0a19 	add.w	sl, r4, #25
 800f6b2:	68e3      	ldr	r3, [r4, #12]
 800f6b4:	6832      	ldr	r2, [r6, #0]
 800f6b6:	1a9b      	subs	r3, r3, r2
 800f6b8:	42ab      	cmp	r3, r5
 800f6ba:	dc26      	bgt.n	800f70a <_printf_common+0x96>
 800f6bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f6c0:	1e13      	subs	r3, r2, #0
 800f6c2:	6822      	ldr	r2, [r4, #0]
 800f6c4:	bf18      	it	ne
 800f6c6:	2301      	movne	r3, #1
 800f6c8:	0692      	lsls	r2, r2, #26
 800f6ca:	d42b      	bmi.n	800f724 <_printf_common+0xb0>
 800f6cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f6d0:	4649      	mov	r1, r9
 800f6d2:	4638      	mov	r0, r7
 800f6d4:	47c0      	blx	r8
 800f6d6:	3001      	adds	r0, #1
 800f6d8:	d01e      	beq.n	800f718 <_printf_common+0xa4>
 800f6da:	6823      	ldr	r3, [r4, #0]
 800f6dc:	68e5      	ldr	r5, [r4, #12]
 800f6de:	6832      	ldr	r2, [r6, #0]
 800f6e0:	f003 0306 	and.w	r3, r3, #6
 800f6e4:	2b04      	cmp	r3, #4
 800f6e6:	bf08      	it	eq
 800f6e8:	1aad      	subeq	r5, r5, r2
 800f6ea:	68a3      	ldr	r3, [r4, #8]
 800f6ec:	6922      	ldr	r2, [r4, #16]
 800f6ee:	bf0c      	ite	eq
 800f6f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f6f4:	2500      	movne	r5, #0
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	bfc4      	itt	gt
 800f6fa:	1a9b      	subgt	r3, r3, r2
 800f6fc:	18ed      	addgt	r5, r5, r3
 800f6fe:	2600      	movs	r6, #0
 800f700:	341a      	adds	r4, #26
 800f702:	42b5      	cmp	r5, r6
 800f704:	d11a      	bne.n	800f73c <_printf_common+0xc8>
 800f706:	2000      	movs	r0, #0
 800f708:	e008      	b.n	800f71c <_printf_common+0xa8>
 800f70a:	2301      	movs	r3, #1
 800f70c:	4652      	mov	r2, sl
 800f70e:	4649      	mov	r1, r9
 800f710:	4638      	mov	r0, r7
 800f712:	47c0      	blx	r8
 800f714:	3001      	adds	r0, #1
 800f716:	d103      	bne.n	800f720 <_printf_common+0xac>
 800f718:	f04f 30ff 	mov.w	r0, #4294967295
 800f71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f720:	3501      	adds	r5, #1
 800f722:	e7c6      	b.n	800f6b2 <_printf_common+0x3e>
 800f724:	18e1      	adds	r1, r4, r3
 800f726:	1c5a      	adds	r2, r3, #1
 800f728:	2030      	movs	r0, #48	; 0x30
 800f72a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f72e:	4422      	add	r2, r4
 800f730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f738:	3302      	adds	r3, #2
 800f73a:	e7c7      	b.n	800f6cc <_printf_common+0x58>
 800f73c:	2301      	movs	r3, #1
 800f73e:	4622      	mov	r2, r4
 800f740:	4649      	mov	r1, r9
 800f742:	4638      	mov	r0, r7
 800f744:	47c0      	blx	r8
 800f746:	3001      	adds	r0, #1
 800f748:	d0e6      	beq.n	800f718 <_printf_common+0xa4>
 800f74a:	3601      	adds	r6, #1
 800f74c:	e7d9      	b.n	800f702 <_printf_common+0x8e>
	...

0800f750 <_printf_i>:
 800f750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f754:	7e0f      	ldrb	r7, [r1, #24]
 800f756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f758:	2f78      	cmp	r7, #120	; 0x78
 800f75a:	4691      	mov	r9, r2
 800f75c:	4680      	mov	r8, r0
 800f75e:	460c      	mov	r4, r1
 800f760:	469a      	mov	sl, r3
 800f762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f766:	d807      	bhi.n	800f778 <_printf_i+0x28>
 800f768:	2f62      	cmp	r7, #98	; 0x62
 800f76a:	d80a      	bhi.n	800f782 <_printf_i+0x32>
 800f76c:	2f00      	cmp	r7, #0
 800f76e:	f000 80d8 	beq.w	800f922 <_printf_i+0x1d2>
 800f772:	2f58      	cmp	r7, #88	; 0x58
 800f774:	f000 80a3 	beq.w	800f8be <_printf_i+0x16e>
 800f778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f77c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f780:	e03a      	b.n	800f7f8 <_printf_i+0xa8>
 800f782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f786:	2b15      	cmp	r3, #21
 800f788:	d8f6      	bhi.n	800f778 <_printf_i+0x28>
 800f78a:	a101      	add	r1, pc, #4	; (adr r1, 800f790 <_printf_i+0x40>)
 800f78c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f790:	0800f7e9 	.word	0x0800f7e9
 800f794:	0800f7fd 	.word	0x0800f7fd
 800f798:	0800f779 	.word	0x0800f779
 800f79c:	0800f779 	.word	0x0800f779
 800f7a0:	0800f779 	.word	0x0800f779
 800f7a4:	0800f779 	.word	0x0800f779
 800f7a8:	0800f7fd 	.word	0x0800f7fd
 800f7ac:	0800f779 	.word	0x0800f779
 800f7b0:	0800f779 	.word	0x0800f779
 800f7b4:	0800f779 	.word	0x0800f779
 800f7b8:	0800f779 	.word	0x0800f779
 800f7bc:	0800f909 	.word	0x0800f909
 800f7c0:	0800f82d 	.word	0x0800f82d
 800f7c4:	0800f8eb 	.word	0x0800f8eb
 800f7c8:	0800f779 	.word	0x0800f779
 800f7cc:	0800f779 	.word	0x0800f779
 800f7d0:	0800f92b 	.word	0x0800f92b
 800f7d4:	0800f779 	.word	0x0800f779
 800f7d8:	0800f82d 	.word	0x0800f82d
 800f7dc:	0800f779 	.word	0x0800f779
 800f7e0:	0800f779 	.word	0x0800f779
 800f7e4:	0800f8f3 	.word	0x0800f8f3
 800f7e8:	682b      	ldr	r3, [r5, #0]
 800f7ea:	1d1a      	adds	r2, r3, #4
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	602a      	str	r2, [r5, #0]
 800f7f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	e0a3      	b.n	800f944 <_printf_i+0x1f4>
 800f7fc:	6820      	ldr	r0, [r4, #0]
 800f7fe:	6829      	ldr	r1, [r5, #0]
 800f800:	0606      	lsls	r6, r0, #24
 800f802:	f101 0304 	add.w	r3, r1, #4
 800f806:	d50a      	bpl.n	800f81e <_printf_i+0xce>
 800f808:	680e      	ldr	r6, [r1, #0]
 800f80a:	602b      	str	r3, [r5, #0]
 800f80c:	2e00      	cmp	r6, #0
 800f80e:	da03      	bge.n	800f818 <_printf_i+0xc8>
 800f810:	232d      	movs	r3, #45	; 0x2d
 800f812:	4276      	negs	r6, r6
 800f814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f818:	485e      	ldr	r0, [pc, #376]	; (800f994 <_printf_i+0x244>)
 800f81a:	230a      	movs	r3, #10
 800f81c:	e019      	b.n	800f852 <_printf_i+0x102>
 800f81e:	680e      	ldr	r6, [r1, #0]
 800f820:	602b      	str	r3, [r5, #0]
 800f822:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f826:	bf18      	it	ne
 800f828:	b236      	sxthne	r6, r6
 800f82a:	e7ef      	b.n	800f80c <_printf_i+0xbc>
 800f82c:	682b      	ldr	r3, [r5, #0]
 800f82e:	6820      	ldr	r0, [r4, #0]
 800f830:	1d19      	adds	r1, r3, #4
 800f832:	6029      	str	r1, [r5, #0]
 800f834:	0601      	lsls	r1, r0, #24
 800f836:	d501      	bpl.n	800f83c <_printf_i+0xec>
 800f838:	681e      	ldr	r6, [r3, #0]
 800f83a:	e002      	b.n	800f842 <_printf_i+0xf2>
 800f83c:	0646      	lsls	r6, r0, #25
 800f83e:	d5fb      	bpl.n	800f838 <_printf_i+0xe8>
 800f840:	881e      	ldrh	r6, [r3, #0]
 800f842:	4854      	ldr	r0, [pc, #336]	; (800f994 <_printf_i+0x244>)
 800f844:	2f6f      	cmp	r7, #111	; 0x6f
 800f846:	bf0c      	ite	eq
 800f848:	2308      	moveq	r3, #8
 800f84a:	230a      	movne	r3, #10
 800f84c:	2100      	movs	r1, #0
 800f84e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f852:	6865      	ldr	r5, [r4, #4]
 800f854:	60a5      	str	r5, [r4, #8]
 800f856:	2d00      	cmp	r5, #0
 800f858:	bfa2      	ittt	ge
 800f85a:	6821      	ldrge	r1, [r4, #0]
 800f85c:	f021 0104 	bicge.w	r1, r1, #4
 800f860:	6021      	strge	r1, [r4, #0]
 800f862:	b90e      	cbnz	r6, 800f868 <_printf_i+0x118>
 800f864:	2d00      	cmp	r5, #0
 800f866:	d04d      	beq.n	800f904 <_printf_i+0x1b4>
 800f868:	4615      	mov	r5, r2
 800f86a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f86e:	fb03 6711 	mls	r7, r3, r1, r6
 800f872:	5dc7      	ldrb	r7, [r0, r7]
 800f874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f878:	4637      	mov	r7, r6
 800f87a:	42bb      	cmp	r3, r7
 800f87c:	460e      	mov	r6, r1
 800f87e:	d9f4      	bls.n	800f86a <_printf_i+0x11a>
 800f880:	2b08      	cmp	r3, #8
 800f882:	d10b      	bne.n	800f89c <_printf_i+0x14c>
 800f884:	6823      	ldr	r3, [r4, #0]
 800f886:	07de      	lsls	r6, r3, #31
 800f888:	d508      	bpl.n	800f89c <_printf_i+0x14c>
 800f88a:	6923      	ldr	r3, [r4, #16]
 800f88c:	6861      	ldr	r1, [r4, #4]
 800f88e:	4299      	cmp	r1, r3
 800f890:	bfde      	ittt	le
 800f892:	2330      	movle	r3, #48	; 0x30
 800f894:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f898:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f89c:	1b52      	subs	r2, r2, r5
 800f89e:	6122      	str	r2, [r4, #16]
 800f8a0:	f8cd a000 	str.w	sl, [sp]
 800f8a4:	464b      	mov	r3, r9
 800f8a6:	aa03      	add	r2, sp, #12
 800f8a8:	4621      	mov	r1, r4
 800f8aa:	4640      	mov	r0, r8
 800f8ac:	f7ff fee2 	bl	800f674 <_printf_common>
 800f8b0:	3001      	adds	r0, #1
 800f8b2:	d14c      	bne.n	800f94e <_printf_i+0x1fe>
 800f8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f8b8:	b004      	add	sp, #16
 800f8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8be:	4835      	ldr	r0, [pc, #212]	; (800f994 <_printf_i+0x244>)
 800f8c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f8c4:	6829      	ldr	r1, [r5, #0]
 800f8c6:	6823      	ldr	r3, [r4, #0]
 800f8c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800f8cc:	6029      	str	r1, [r5, #0]
 800f8ce:	061d      	lsls	r5, r3, #24
 800f8d0:	d514      	bpl.n	800f8fc <_printf_i+0x1ac>
 800f8d2:	07df      	lsls	r7, r3, #31
 800f8d4:	bf44      	itt	mi
 800f8d6:	f043 0320 	orrmi.w	r3, r3, #32
 800f8da:	6023      	strmi	r3, [r4, #0]
 800f8dc:	b91e      	cbnz	r6, 800f8e6 <_printf_i+0x196>
 800f8de:	6823      	ldr	r3, [r4, #0]
 800f8e0:	f023 0320 	bic.w	r3, r3, #32
 800f8e4:	6023      	str	r3, [r4, #0]
 800f8e6:	2310      	movs	r3, #16
 800f8e8:	e7b0      	b.n	800f84c <_printf_i+0xfc>
 800f8ea:	6823      	ldr	r3, [r4, #0]
 800f8ec:	f043 0320 	orr.w	r3, r3, #32
 800f8f0:	6023      	str	r3, [r4, #0]
 800f8f2:	2378      	movs	r3, #120	; 0x78
 800f8f4:	4828      	ldr	r0, [pc, #160]	; (800f998 <_printf_i+0x248>)
 800f8f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f8fa:	e7e3      	b.n	800f8c4 <_printf_i+0x174>
 800f8fc:	0659      	lsls	r1, r3, #25
 800f8fe:	bf48      	it	mi
 800f900:	b2b6      	uxthmi	r6, r6
 800f902:	e7e6      	b.n	800f8d2 <_printf_i+0x182>
 800f904:	4615      	mov	r5, r2
 800f906:	e7bb      	b.n	800f880 <_printf_i+0x130>
 800f908:	682b      	ldr	r3, [r5, #0]
 800f90a:	6826      	ldr	r6, [r4, #0]
 800f90c:	6961      	ldr	r1, [r4, #20]
 800f90e:	1d18      	adds	r0, r3, #4
 800f910:	6028      	str	r0, [r5, #0]
 800f912:	0635      	lsls	r5, r6, #24
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	d501      	bpl.n	800f91c <_printf_i+0x1cc>
 800f918:	6019      	str	r1, [r3, #0]
 800f91a:	e002      	b.n	800f922 <_printf_i+0x1d2>
 800f91c:	0670      	lsls	r0, r6, #25
 800f91e:	d5fb      	bpl.n	800f918 <_printf_i+0x1c8>
 800f920:	8019      	strh	r1, [r3, #0]
 800f922:	2300      	movs	r3, #0
 800f924:	6123      	str	r3, [r4, #16]
 800f926:	4615      	mov	r5, r2
 800f928:	e7ba      	b.n	800f8a0 <_printf_i+0x150>
 800f92a:	682b      	ldr	r3, [r5, #0]
 800f92c:	1d1a      	adds	r2, r3, #4
 800f92e:	602a      	str	r2, [r5, #0]
 800f930:	681d      	ldr	r5, [r3, #0]
 800f932:	6862      	ldr	r2, [r4, #4]
 800f934:	2100      	movs	r1, #0
 800f936:	4628      	mov	r0, r5
 800f938:	f7f0 fcda 	bl	80002f0 <memchr>
 800f93c:	b108      	cbz	r0, 800f942 <_printf_i+0x1f2>
 800f93e:	1b40      	subs	r0, r0, r5
 800f940:	6060      	str	r0, [r4, #4]
 800f942:	6863      	ldr	r3, [r4, #4]
 800f944:	6123      	str	r3, [r4, #16]
 800f946:	2300      	movs	r3, #0
 800f948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f94c:	e7a8      	b.n	800f8a0 <_printf_i+0x150>
 800f94e:	6923      	ldr	r3, [r4, #16]
 800f950:	462a      	mov	r2, r5
 800f952:	4649      	mov	r1, r9
 800f954:	4640      	mov	r0, r8
 800f956:	47d0      	blx	sl
 800f958:	3001      	adds	r0, #1
 800f95a:	d0ab      	beq.n	800f8b4 <_printf_i+0x164>
 800f95c:	6823      	ldr	r3, [r4, #0]
 800f95e:	079b      	lsls	r3, r3, #30
 800f960:	d413      	bmi.n	800f98a <_printf_i+0x23a>
 800f962:	68e0      	ldr	r0, [r4, #12]
 800f964:	9b03      	ldr	r3, [sp, #12]
 800f966:	4298      	cmp	r0, r3
 800f968:	bfb8      	it	lt
 800f96a:	4618      	movlt	r0, r3
 800f96c:	e7a4      	b.n	800f8b8 <_printf_i+0x168>
 800f96e:	2301      	movs	r3, #1
 800f970:	4632      	mov	r2, r6
 800f972:	4649      	mov	r1, r9
 800f974:	4640      	mov	r0, r8
 800f976:	47d0      	blx	sl
 800f978:	3001      	adds	r0, #1
 800f97a:	d09b      	beq.n	800f8b4 <_printf_i+0x164>
 800f97c:	3501      	adds	r5, #1
 800f97e:	68e3      	ldr	r3, [r4, #12]
 800f980:	9903      	ldr	r1, [sp, #12]
 800f982:	1a5b      	subs	r3, r3, r1
 800f984:	42ab      	cmp	r3, r5
 800f986:	dcf2      	bgt.n	800f96e <_printf_i+0x21e>
 800f988:	e7eb      	b.n	800f962 <_printf_i+0x212>
 800f98a:	2500      	movs	r5, #0
 800f98c:	f104 0619 	add.w	r6, r4, #25
 800f990:	e7f5      	b.n	800f97e <_printf_i+0x22e>
 800f992:	bf00      	nop
 800f994:	0801076e 	.word	0x0801076e
 800f998:	0801077f 	.word	0x0801077f

0800f99c <_scanf_chars>:
 800f99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9a0:	4615      	mov	r5, r2
 800f9a2:	688a      	ldr	r2, [r1, #8]
 800f9a4:	4680      	mov	r8, r0
 800f9a6:	460c      	mov	r4, r1
 800f9a8:	b932      	cbnz	r2, 800f9b8 <_scanf_chars+0x1c>
 800f9aa:	698a      	ldr	r2, [r1, #24]
 800f9ac:	2a00      	cmp	r2, #0
 800f9ae:	bf0c      	ite	eq
 800f9b0:	2201      	moveq	r2, #1
 800f9b2:	f04f 32ff 	movne.w	r2, #4294967295
 800f9b6:	608a      	str	r2, [r1, #8]
 800f9b8:	6822      	ldr	r2, [r4, #0]
 800f9ba:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800fa4c <_scanf_chars+0xb0>
 800f9be:	06d1      	lsls	r1, r2, #27
 800f9c0:	bf5f      	itttt	pl
 800f9c2:	681a      	ldrpl	r2, [r3, #0]
 800f9c4:	1d11      	addpl	r1, r2, #4
 800f9c6:	6019      	strpl	r1, [r3, #0]
 800f9c8:	6816      	ldrpl	r6, [r2, #0]
 800f9ca:	2700      	movs	r7, #0
 800f9cc:	69a0      	ldr	r0, [r4, #24]
 800f9ce:	b188      	cbz	r0, 800f9f4 <_scanf_chars+0x58>
 800f9d0:	2801      	cmp	r0, #1
 800f9d2:	d107      	bne.n	800f9e4 <_scanf_chars+0x48>
 800f9d4:	682a      	ldr	r2, [r5, #0]
 800f9d6:	7811      	ldrb	r1, [r2, #0]
 800f9d8:	6962      	ldr	r2, [r4, #20]
 800f9da:	5c52      	ldrb	r2, [r2, r1]
 800f9dc:	b952      	cbnz	r2, 800f9f4 <_scanf_chars+0x58>
 800f9de:	2f00      	cmp	r7, #0
 800f9e0:	d031      	beq.n	800fa46 <_scanf_chars+0xaa>
 800f9e2:	e022      	b.n	800fa2a <_scanf_chars+0x8e>
 800f9e4:	2802      	cmp	r0, #2
 800f9e6:	d120      	bne.n	800fa2a <_scanf_chars+0x8e>
 800f9e8:	682b      	ldr	r3, [r5, #0]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	f813 3009 	ldrb.w	r3, [r3, r9]
 800f9f0:	071b      	lsls	r3, r3, #28
 800f9f2:	d41a      	bmi.n	800fa2a <_scanf_chars+0x8e>
 800f9f4:	6823      	ldr	r3, [r4, #0]
 800f9f6:	06da      	lsls	r2, r3, #27
 800f9f8:	bf5e      	ittt	pl
 800f9fa:	682b      	ldrpl	r3, [r5, #0]
 800f9fc:	781b      	ldrbpl	r3, [r3, #0]
 800f9fe:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fa02:	682a      	ldr	r2, [r5, #0]
 800fa04:	686b      	ldr	r3, [r5, #4]
 800fa06:	3201      	adds	r2, #1
 800fa08:	602a      	str	r2, [r5, #0]
 800fa0a:	68a2      	ldr	r2, [r4, #8]
 800fa0c:	3b01      	subs	r3, #1
 800fa0e:	3a01      	subs	r2, #1
 800fa10:	606b      	str	r3, [r5, #4]
 800fa12:	3701      	adds	r7, #1
 800fa14:	60a2      	str	r2, [r4, #8]
 800fa16:	b142      	cbz	r2, 800fa2a <_scanf_chars+0x8e>
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	dcd7      	bgt.n	800f9cc <_scanf_chars+0x30>
 800fa1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fa20:	4629      	mov	r1, r5
 800fa22:	4640      	mov	r0, r8
 800fa24:	4798      	blx	r3
 800fa26:	2800      	cmp	r0, #0
 800fa28:	d0d0      	beq.n	800f9cc <_scanf_chars+0x30>
 800fa2a:	6823      	ldr	r3, [r4, #0]
 800fa2c:	f013 0310 	ands.w	r3, r3, #16
 800fa30:	d105      	bne.n	800fa3e <_scanf_chars+0xa2>
 800fa32:	68e2      	ldr	r2, [r4, #12]
 800fa34:	3201      	adds	r2, #1
 800fa36:	60e2      	str	r2, [r4, #12]
 800fa38:	69a2      	ldr	r2, [r4, #24]
 800fa3a:	b102      	cbz	r2, 800fa3e <_scanf_chars+0xa2>
 800fa3c:	7033      	strb	r3, [r6, #0]
 800fa3e:	6923      	ldr	r3, [r4, #16]
 800fa40:	443b      	add	r3, r7
 800fa42:	6123      	str	r3, [r4, #16]
 800fa44:	2000      	movs	r0, #0
 800fa46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa4a:	bf00      	nop
 800fa4c:	0801065d 	.word	0x0801065d

0800fa50 <_scanf_i>:
 800fa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa54:	4698      	mov	r8, r3
 800fa56:	4b76      	ldr	r3, [pc, #472]	; (800fc30 <_scanf_i+0x1e0>)
 800fa58:	460c      	mov	r4, r1
 800fa5a:	4682      	mov	sl, r0
 800fa5c:	4616      	mov	r6, r2
 800fa5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fa62:	b087      	sub	sp, #28
 800fa64:	ab03      	add	r3, sp, #12
 800fa66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fa6a:	4b72      	ldr	r3, [pc, #456]	; (800fc34 <_scanf_i+0x1e4>)
 800fa6c:	69a1      	ldr	r1, [r4, #24]
 800fa6e:	4a72      	ldr	r2, [pc, #456]	; (800fc38 <_scanf_i+0x1e8>)
 800fa70:	2903      	cmp	r1, #3
 800fa72:	bf18      	it	ne
 800fa74:	461a      	movne	r2, r3
 800fa76:	68a3      	ldr	r3, [r4, #8]
 800fa78:	9201      	str	r2, [sp, #4]
 800fa7a:	1e5a      	subs	r2, r3, #1
 800fa7c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fa80:	bf88      	it	hi
 800fa82:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fa86:	4627      	mov	r7, r4
 800fa88:	bf82      	ittt	hi
 800fa8a:	eb03 0905 	addhi.w	r9, r3, r5
 800fa8e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fa92:	60a3      	strhi	r3, [r4, #8]
 800fa94:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fa98:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800fa9c:	bf98      	it	ls
 800fa9e:	f04f 0900 	movls.w	r9, #0
 800faa2:	6023      	str	r3, [r4, #0]
 800faa4:	463d      	mov	r5, r7
 800faa6:	f04f 0b00 	mov.w	fp, #0
 800faaa:	6831      	ldr	r1, [r6, #0]
 800faac:	ab03      	add	r3, sp, #12
 800faae:	7809      	ldrb	r1, [r1, #0]
 800fab0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fab4:	2202      	movs	r2, #2
 800fab6:	f7f0 fc1b 	bl	80002f0 <memchr>
 800faba:	b328      	cbz	r0, 800fb08 <_scanf_i+0xb8>
 800fabc:	f1bb 0f01 	cmp.w	fp, #1
 800fac0:	d159      	bne.n	800fb76 <_scanf_i+0x126>
 800fac2:	6862      	ldr	r2, [r4, #4]
 800fac4:	b92a      	cbnz	r2, 800fad2 <_scanf_i+0x82>
 800fac6:	6822      	ldr	r2, [r4, #0]
 800fac8:	2308      	movs	r3, #8
 800faca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800face:	6063      	str	r3, [r4, #4]
 800fad0:	6022      	str	r2, [r4, #0]
 800fad2:	6822      	ldr	r2, [r4, #0]
 800fad4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fad8:	6022      	str	r2, [r4, #0]
 800fada:	68a2      	ldr	r2, [r4, #8]
 800fadc:	1e51      	subs	r1, r2, #1
 800fade:	60a1      	str	r1, [r4, #8]
 800fae0:	b192      	cbz	r2, 800fb08 <_scanf_i+0xb8>
 800fae2:	6832      	ldr	r2, [r6, #0]
 800fae4:	1c51      	adds	r1, r2, #1
 800fae6:	6031      	str	r1, [r6, #0]
 800fae8:	7812      	ldrb	r2, [r2, #0]
 800faea:	f805 2b01 	strb.w	r2, [r5], #1
 800faee:	6872      	ldr	r2, [r6, #4]
 800faf0:	3a01      	subs	r2, #1
 800faf2:	2a00      	cmp	r2, #0
 800faf4:	6072      	str	r2, [r6, #4]
 800faf6:	dc07      	bgt.n	800fb08 <_scanf_i+0xb8>
 800faf8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800fafc:	4631      	mov	r1, r6
 800fafe:	4650      	mov	r0, sl
 800fb00:	4790      	blx	r2
 800fb02:	2800      	cmp	r0, #0
 800fb04:	f040 8085 	bne.w	800fc12 <_scanf_i+0x1c2>
 800fb08:	f10b 0b01 	add.w	fp, fp, #1
 800fb0c:	f1bb 0f03 	cmp.w	fp, #3
 800fb10:	d1cb      	bne.n	800faaa <_scanf_i+0x5a>
 800fb12:	6863      	ldr	r3, [r4, #4]
 800fb14:	b90b      	cbnz	r3, 800fb1a <_scanf_i+0xca>
 800fb16:	230a      	movs	r3, #10
 800fb18:	6063      	str	r3, [r4, #4]
 800fb1a:	6863      	ldr	r3, [r4, #4]
 800fb1c:	4947      	ldr	r1, [pc, #284]	; (800fc3c <_scanf_i+0x1ec>)
 800fb1e:	6960      	ldr	r0, [r4, #20]
 800fb20:	1ac9      	subs	r1, r1, r3
 800fb22:	f000 f89f 	bl	800fc64 <__sccl>
 800fb26:	f04f 0b00 	mov.w	fp, #0
 800fb2a:	68a3      	ldr	r3, [r4, #8]
 800fb2c:	6822      	ldr	r2, [r4, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d03d      	beq.n	800fbae <_scanf_i+0x15e>
 800fb32:	6831      	ldr	r1, [r6, #0]
 800fb34:	6960      	ldr	r0, [r4, #20]
 800fb36:	f891 c000 	ldrb.w	ip, [r1]
 800fb3a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	d035      	beq.n	800fbae <_scanf_i+0x15e>
 800fb42:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800fb46:	d124      	bne.n	800fb92 <_scanf_i+0x142>
 800fb48:	0510      	lsls	r0, r2, #20
 800fb4a:	d522      	bpl.n	800fb92 <_scanf_i+0x142>
 800fb4c:	f10b 0b01 	add.w	fp, fp, #1
 800fb50:	f1b9 0f00 	cmp.w	r9, #0
 800fb54:	d003      	beq.n	800fb5e <_scanf_i+0x10e>
 800fb56:	3301      	adds	r3, #1
 800fb58:	f109 39ff 	add.w	r9, r9, #4294967295
 800fb5c:	60a3      	str	r3, [r4, #8]
 800fb5e:	6873      	ldr	r3, [r6, #4]
 800fb60:	3b01      	subs	r3, #1
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	6073      	str	r3, [r6, #4]
 800fb66:	dd1b      	ble.n	800fba0 <_scanf_i+0x150>
 800fb68:	6833      	ldr	r3, [r6, #0]
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	6033      	str	r3, [r6, #0]
 800fb6e:	68a3      	ldr	r3, [r4, #8]
 800fb70:	3b01      	subs	r3, #1
 800fb72:	60a3      	str	r3, [r4, #8]
 800fb74:	e7d9      	b.n	800fb2a <_scanf_i+0xda>
 800fb76:	f1bb 0f02 	cmp.w	fp, #2
 800fb7a:	d1ae      	bne.n	800fada <_scanf_i+0x8a>
 800fb7c:	6822      	ldr	r2, [r4, #0]
 800fb7e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800fb82:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fb86:	d1bf      	bne.n	800fb08 <_scanf_i+0xb8>
 800fb88:	2310      	movs	r3, #16
 800fb8a:	6063      	str	r3, [r4, #4]
 800fb8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fb90:	e7a2      	b.n	800fad8 <_scanf_i+0x88>
 800fb92:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800fb96:	6022      	str	r2, [r4, #0]
 800fb98:	780b      	ldrb	r3, [r1, #0]
 800fb9a:	f805 3b01 	strb.w	r3, [r5], #1
 800fb9e:	e7de      	b.n	800fb5e <_scanf_i+0x10e>
 800fba0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fba4:	4631      	mov	r1, r6
 800fba6:	4650      	mov	r0, sl
 800fba8:	4798      	blx	r3
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d0df      	beq.n	800fb6e <_scanf_i+0x11e>
 800fbae:	6823      	ldr	r3, [r4, #0]
 800fbb0:	05db      	lsls	r3, r3, #23
 800fbb2:	d50d      	bpl.n	800fbd0 <_scanf_i+0x180>
 800fbb4:	42bd      	cmp	r5, r7
 800fbb6:	d909      	bls.n	800fbcc <_scanf_i+0x17c>
 800fbb8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800fbbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fbc0:	4632      	mov	r2, r6
 800fbc2:	4650      	mov	r0, sl
 800fbc4:	4798      	blx	r3
 800fbc6:	f105 39ff 	add.w	r9, r5, #4294967295
 800fbca:	464d      	mov	r5, r9
 800fbcc:	42bd      	cmp	r5, r7
 800fbce:	d02d      	beq.n	800fc2c <_scanf_i+0x1dc>
 800fbd0:	6822      	ldr	r2, [r4, #0]
 800fbd2:	f012 0210 	ands.w	r2, r2, #16
 800fbd6:	d113      	bne.n	800fc00 <_scanf_i+0x1b0>
 800fbd8:	702a      	strb	r2, [r5, #0]
 800fbda:	6863      	ldr	r3, [r4, #4]
 800fbdc:	9e01      	ldr	r6, [sp, #4]
 800fbde:	4639      	mov	r1, r7
 800fbe0:	4650      	mov	r0, sl
 800fbe2:	47b0      	blx	r6
 800fbe4:	6821      	ldr	r1, [r4, #0]
 800fbe6:	f8d8 3000 	ldr.w	r3, [r8]
 800fbea:	f011 0f20 	tst.w	r1, #32
 800fbee:	d013      	beq.n	800fc18 <_scanf_i+0x1c8>
 800fbf0:	1d1a      	adds	r2, r3, #4
 800fbf2:	f8c8 2000 	str.w	r2, [r8]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	6018      	str	r0, [r3, #0]
 800fbfa:	68e3      	ldr	r3, [r4, #12]
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	60e3      	str	r3, [r4, #12]
 800fc00:	1bed      	subs	r5, r5, r7
 800fc02:	44ab      	add	fp, r5
 800fc04:	6925      	ldr	r5, [r4, #16]
 800fc06:	445d      	add	r5, fp
 800fc08:	6125      	str	r5, [r4, #16]
 800fc0a:	2000      	movs	r0, #0
 800fc0c:	b007      	add	sp, #28
 800fc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc12:	f04f 0b00 	mov.w	fp, #0
 800fc16:	e7ca      	b.n	800fbae <_scanf_i+0x15e>
 800fc18:	1d1a      	adds	r2, r3, #4
 800fc1a:	f8c8 2000 	str.w	r2, [r8]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	f011 0f01 	tst.w	r1, #1
 800fc24:	bf14      	ite	ne
 800fc26:	8018      	strhne	r0, [r3, #0]
 800fc28:	6018      	streq	r0, [r3, #0]
 800fc2a:	e7e6      	b.n	800fbfa <_scanf_i+0x1aa>
 800fc2c:	2001      	movs	r0, #1
 800fc2e:	e7ed      	b.n	800fc0c <_scanf_i+0x1bc>
 800fc30:	08010458 	.word	0x08010458
 800fc34:	0800fec1 	.word	0x0800fec1
 800fc38:	0800fdd9 	.word	0x0800fdd9
 800fc3c:	080107a9 	.word	0x080107a9

0800fc40 <_read_r>:
 800fc40:	b538      	push	{r3, r4, r5, lr}
 800fc42:	4d07      	ldr	r5, [pc, #28]	; (800fc60 <_read_r+0x20>)
 800fc44:	4604      	mov	r4, r0
 800fc46:	4608      	mov	r0, r1
 800fc48:	4611      	mov	r1, r2
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	602a      	str	r2, [r5, #0]
 800fc4e:	461a      	mov	r2, r3
 800fc50:	f7f1 fa32 	bl	80010b8 <_read>
 800fc54:	1c43      	adds	r3, r0, #1
 800fc56:	d102      	bne.n	800fc5e <_read_r+0x1e>
 800fc58:	682b      	ldr	r3, [r5, #0]
 800fc5a:	b103      	cbz	r3, 800fc5e <_read_r+0x1e>
 800fc5c:	6023      	str	r3, [r4, #0]
 800fc5e:	bd38      	pop	{r3, r4, r5, pc}
 800fc60:	200059a8 	.word	0x200059a8

0800fc64 <__sccl>:
 800fc64:	b570      	push	{r4, r5, r6, lr}
 800fc66:	780b      	ldrb	r3, [r1, #0]
 800fc68:	4604      	mov	r4, r0
 800fc6a:	2b5e      	cmp	r3, #94	; 0x5e
 800fc6c:	bf0b      	itete	eq
 800fc6e:	784b      	ldrbeq	r3, [r1, #1]
 800fc70:	1c48      	addne	r0, r1, #1
 800fc72:	1c88      	addeq	r0, r1, #2
 800fc74:	2200      	movne	r2, #0
 800fc76:	bf08      	it	eq
 800fc78:	2201      	moveq	r2, #1
 800fc7a:	1e61      	subs	r1, r4, #1
 800fc7c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800fc80:	f801 2f01 	strb.w	r2, [r1, #1]!
 800fc84:	42a9      	cmp	r1, r5
 800fc86:	d1fb      	bne.n	800fc80 <__sccl+0x1c>
 800fc88:	b90b      	cbnz	r3, 800fc8e <__sccl+0x2a>
 800fc8a:	3801      	subs	r0, #1
 800fc8c:	bd70      	pop	{r4, r5, r6, pc}
 800fc8e:	f082 0201 	eor.w	r2, r2, #1
 800fc92:	54e2      	strb	r2, [r4, r3]
 800fc94:	4605      	mov	r5, r0
 800fc96:	4628      	mov	r0, r5
 800fc98:	f810 1b01 	ldrb.w	r1, [r0], #1
 800fc9c:	292d      	cmp	r1, #45	; 0x2d
 800fc9e:	d006      	beq.n	800fcae <__sccl+0x4a>
 800fca0:	295d      	cmp	r1, #93	; 0x5d
 800fca2:	d0f3      	beq.n	800fc8c <__sccl+0x28>
 800fca4:	b909      	cbnz	r1, 800fcaa <__sccl+0x46>
 800fca6:	4628      	mov	r0, r5
 800fca8:	e7f0      	b.n	800fc8c <__sccl+0x28>
 800fcaa:	460b      	mov	r3, r1
 800fcac:	e7f1      	b.n	800fc92 <__sccl+0x2e>
 800fcae:	786e      	ldrb	r6, [r5, #1]
 800fcb0:	2e5d      	cmp	r6, #93	; 0x5d
 800fcb2:	d0fa      	beq.n	800fcaa <__sccl+0x46>
 800fcb4:	42b3      	cmp	r3, r6
 800fcb6:	dcf8      	bgt.n	800fcaa <__sccl+0x46>
 800fcb8:	3502      	adds	r5, #2
 800fcba:	4619      	mov	r1, r3
 800fcbc:	3101      	adds	r1, #1
 800fcbe:	428e      	cmp	r6, r1
 800fcc0:	5462      	strb	r2, [r4, r1]
 800fcc2:	dcfb      	bgt.n	800fcbc <__sccl+0x58>
 800fcc4:	1af1      	subs	r1, r6, r3
 800fcc6:	3901      	subs	r1, #1
 800fcc8:	1c58      	adds	r0, r3, #1
 800fcca:	42b3      	cmp	r3, r6
 800fccc:	bfa8      	it	ge
 800fcce:	2100      	movge	r1, #0
 800fcd0:	1843      	adds	r3, r0, r1
 800fcd2:	e7e0      	b.n	800fc96 <__sccl+0x32>

0800fcd4 <_strtol_l.constprop.0>:
 800fcd4:	2b01      	cmp	r3, #1
 800fcd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcda:	d001      	beq.n	800fce0 <_strtol_l.constprop.0+0xc>
 800fcdc:	2b24      	cmp	r3, #36	; 0x24
 800fcde:	d906      	bls.n	800fcee <_strtol_l.constprop.0+0x1a>
 800fce0:	f7fe fa84 	bl	800e1ec <__errno>
 800fce4:	2316      	movs	r3, #22
 800fce6:	6003      	str	r3, [r0, #0]
 800fce8:	2000      	movs	r0, #0
 800fcea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fdd4 <_strtol_l.constprop.0+0x100>
 800fcf2:	460d      	mov	r5, r1
 800fcf4:	462e      	mov	r6, r5
 800fcf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fcfa:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fcfe:	f017 0708 	ands.w	r7, r7, #8
 800fd02:	d1f7      	bne.n	800fcf4 <_strtol_l.constprop.0+0x20>
 800fd04:	2c2d      	cmp	r4, #45	; 0x2d
 800fd06:	d132      	bne.n	800fd6e <_strtol_l.constprop.0+0x9a>
 800fd08:	782c      	ldrb	r4, [r5, #0]
 800fd0a:	2701      	movs	r7, #1
 800fd0c:	1cb5      	adds	r5, r6, #2
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d05b      	beq.n	800fdca <_strtol_l.constprop.0+0xf6>
 800fd12:	2b10      	cmp	r3, #16
 800fd14:	d109      	bne.n	800fd2a <_strtol_l.constprop.0+0x56>
 800fd16:	2c30      	cmp	r4, #48	; 0x30
 800fd18:	d107      	bne.n	800fd2a <_strtol_l.constprop.0+0x56>
 800fd1a:	782c      	ldrb	r4, [r5, #0]
 800fd1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fd20:	2c58      	cmp	r4, #88	; 0x58
 800fd22:	d14d      	bne.n	800fdc0 <_strtol_l.constprop.0+0xec>
 800fd24:	786c      	ldrb	r4, [r5, #1]
 800fd26:	2310      	movs	r3, #16
 800fd28:	3502      	adds	r5, #2
 800fd2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fd2e:	f108 38ff 	add.w	r8, r8, #4294967295
 800fd32:	f04f 0c00 	mov.w	ip, #0
 800fd36:	fbb8 f9f3 	udiv	r9, r8, r3
 800fd3a:	4666      	mov	r6, ip
 800fd3c:	fb03 8a19 	mls	sl, r3, r9, r8
 800fd40:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fd44:	f1be 0f09 	cmp.w	lr, #9
 800fd48:	d816      	bhi.n	800fd78 <_strtol_l.constprop.0+0xa4>
 800fd4a:	4674      	mov	r4, lr
 800fd4c:	42a3      	cmp	r3, r4
 800fd4e:	dd24      	ble.n	800fd9a <_strtol_l.constprop.0+0xc6>
 800fd50:	f1bc 0f00 	cmp.w	ip, #0
 800fd54:	db1e      	blt.n	800fd94 <_strtol_l.constprop.0+0xc0>
 800fd56:	45b1      	cmp	r9, r6
 800fd58:	d31c      	bcc.n	800fd94 <_strtol_l.constprop.0+0xc0>
 800fd5a:	d101      	bne.n	800fd60 <_strtol_l.constprop.0+0x8c>
 800fd5c:	45a2      	cmp	sl, r4
 800fd5e:	db19      	blt.n	800fd94 <_strtol_l.constprop.0+0xc0>
 800fd60:	fb06 4603 	mla	r6, r6, r3, r4
 800fd64:	f04f 0c01 	mov.w	ip, #1
 800fd68:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd6c:	e7e8      	b.n	800fd40 <_strtol_l.constprop.0+0x6c>
 800fd6e:	2c2b      	cmp	r4, #43	; 0x2b
 800fd70:	bf04      	itt	eq
 800fd72:	782c      	ldrbeq	r4, [r5, #0]
 800fd74:	1cb5      	addeq	r5, r6, #2
 800fd76:	e7ca      	b.n	800fd0e <_strtol_l.constprop.0+0x3a>
 800fd78:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fd7c:	f1be 0f19 	cmp.w	lr, #25
 800fd80:	d801      	bhi.n	800fd86 <_strtol_l.constprop.0+0xb2>
 800fd82:	3c37      	subs	r4, #55	; 0x37
 800fd84:	e7e2      	b.n	800fd4c <_strtol_l.constprop.0+0x78>
 800fd86:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fd8a:	f1be 0f19 	cmp.w	lr, #25
 800fd8e:	d804      	bhi.n	800fd9a <_strtol_l.constprop.0+0xc6>
 800fd90:	3c57      	subs	r4, #87	; 0x57
 800fd92:	e7db      	b.n	800fd4c <_strtol_l.constprop.0+0x78>
 800fd94:	f04f 3cff 	mov.w	ip, #4294967295
 800fd98:	e7e6      	b.n	800fd68 <_strtol_l.constprop.0+0x94>
 800fd9a:	f1bc 0f00 	cmp.w	ip, #0
 800fd9e:	da05      	bge.n	800fdac <_strtol_l.constprop.0+0xd8>
 800fda0:	2322      	movs	r3, #34	; 0x22
 800fda2:	6003      	str	r3, [r0, #0]
 800fda4:	4646      	mov	r6, r8
 800fda6:	b942      	cbnz	r2, 800fdba <_strtol_l.constprop.0+0xe6>
 800fda8:	4630      	mov	r0, r6
 800fdaa:	e79e      	b.n	800fcea <_strtol_l.constprop.0+0x16>
 800fdac:	b107      	cbz	r7, 800fdb0 <_strtol_l.constprop.0+0xdc>
 800fdae:	4276      	negs	r6, r6
 800fdb0:	2a00      	cmp	r2, #0
 800fdb2:	d0f9      	beq.n	800fda8 <_strtol_l.constprop.0+0xd4>
 800fdb4:	f1bc 0f00 	cmp.w	ip, #0
 800fdb8:	d000      	beq.n	800fdbc <_strtol_l.constprop.0+0xe8>
 800fdba:	1e69      	subs	r1, r5, #1
 800fdbc:	6011      	str	r1, [r2, #0]
 800fdbe:	e7f3      	b.n	800fda8 <_strtol_l.constprop.0+0xd4>
 800fdc0:	2430      	movs	r4, #48	; 0x30
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d1b1      	bne.n	800fd2a <_strtol_l.constprop.0+0x56>
 800fdc6:	2308      	movs	r3, #8
 800fdc8:	e7af      	b.n	800fd2a <_strtol_l.constprop.0+0x56>
 800fdca:	2c30      	cmp	r4, #48	; 0x30
 800fdcc:	d0a5      	beq.n	800fd1a <_strtol_l.constprop.0+0x46>
 800fdce:	230a      	movs	r3, #10
 800fdd0:	e7ab      	b.n	800fd2a <_strtol_l.constprop.0+0x56>
 800fdd2:	bf00      	nop
 800fdd4:	0801065d 	.word	0x0801065d

0800fdd8 <_strtol_r>:
 800fdd8:	f7ff bf7c 	b.w	800fcd4 <_strtol_l.constprop.0>

0800fddc <_strtoul_l.constprop.0>:
 800fddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fde0:	4f36      	ldr	r7, [pc, #216]	; (800febc <_strtoul_l.constprop.0+0xe0>)
 800fde2:	4686      	mov	lr, r0
 800fde4:	460d      	mov	r5, r1
 800fde6:	4628      	mov	r0, r5
 800fde8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdec:	5de6      	ldrb	r6, [r4, r7]
 800fdee:	f016 0608 	ands.w	r6, r6, #8
 800fdf2:	d1f8      	bne.n	800fde6 <_strtoul_l.constprop.0+0xa>
 800fdf4:	2c2d      	cmp	r4, #45	; 0x2d
 800fdf6:	d12f      	bne.n	800fe58 <_strtoul_l.constprop.0+0x7c>
 800fdf8:	782c      	ldrb	r4, [r5, #0]
 800fdfa:	2601      	movs	r6, #1
 800fdfc:	1c85      	adds	r5, r0, #2
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d057      	beq.n	800feb2 <_strtoul_l.constprop.0+0xd6>
 800fe02:	2b10      	cmp	r3, #16
 800fe04:	d109      	bne.n	800fe1a <_strtoul_l.constprop.0+0x3e>
 800fe06:	2c30      	cmp	r4, #48	; 0x30
 800fe08:	d107      	bne.n	800fe1a <_strtoul_l.constprop.0+0x3e>
 800fe0a:	7828      	ldrb	r0, [r5, #0]
 800fe0c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800fe10:	2858      	cmp	r0, #88	; 0x58
 800fe12:	d149      	bne.n	800fea8 <_strtoul_l.constprop.0+0xcc>
 800fe14:	786c      	ldrb	r4, [r5, #1]
 800fe16:	2310      	movs	r3, #16
 800fe18:	3502      	adds	r5, #2
 800fe1a:	f04f 38ff 	mov.w	r8, #4294967295
 800fe1e:	2700      	movs	r7, #0
 800fe20:	fbb8 f8f3 	udiv	r8, r8, r3
 800fe24:	fb03 f908 	mul.w	r9, r3, r8
 800fe28:	ea6f 0909 	mvn.w	r9, r9
 800fe2c:	4638      	mov	r0, r7
 800fe2e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fe32:	f1bc 0f09 	cmp.w	ip, #9
 800fe36:	d814      	bhi.n	800fe62 <_strtoul_l.constprop.0+0x86>
 800fe38:	4664      	mov	r4, ip
 800fe3a:	42a3      	cmp	r3, r4
 800fe3c:	dd22      	ble.n	800fe84 <_strtoul_l.constprop.0+0xa8>
 800fe3e:	2f00      	cmp	r7, #0
 800fe40:	db1d      	blt.n	800fe7e <_strtoul_l.constprop.0+0xa2>
 800fe42:	4580      	cmp	r8, r0
 800fe44:	d31b      	bcc.n	800fe7e <_strtoul_l.constprop.0+0xa2>
 800fe46:	d101      	bne.n	800fe4c <_strtoul_l.constprop.0+0x70>
 800fe48:	45a1      	cmp	r9, r4
 800fe4a:	db18      	blt.n	800fe7e <_strtoul_l.constprop.0+0xa2>
 800fe4c:	fb00 4003 	mla	r0, r0, r3, r4
 800fe50:	2701      	movs	r7, #1
 800fe52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fe56:	e7ea      	b.n	800fe2e <_strtoul_l.constprop.0+0x52>
 800fe58:	2c2b      	cmp	r4, #43	; 0x2b
 800fe5a:	bf04      	itt	eq
 800fe5c:	782c      	ldrbeq	r4, [r5, #0]
 800fe5e:	1c85      	addeq	r5, r0, #2
 800fe60:	e7cd      	b.n	800fdfe <_strtoul_l.constprop.0+0x22>
 800fe62:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fe66:	f1bc 0f19 	cmp.w	ip, #25
 800fe6a:	d801      	bhi.n	800fe70 <_strtoul_l.constprop.0+0x94>
 800fe6c:	3c37      	subs	r4, #55	; 0x37
 800fe6e:	e7e4      	b.n	800fe3a <_strtoul_l.constprop.0+0x5e>
 800fe70:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fe74:	f1bc 0f19 	cmp.w	ip, #25
 800fe78:	d804      	bhi.n	800fe84 <_strtoul_l.constprop.0+0xa8>
 800fe7a:	3c57      	subs	r4, #87	; 0x57
 800fe7c:	e7dd      	b.n	800fe3a <_strtoul_l.constprop.0+0x5e>
 800fe7e:	f04f 37ff 	mov.w	r7, #4294967295
 800fe82:	e7e6      	b.n	800fe52 <_strtoul_l.constprop.0+0x76>
 800fe84:	2f00      	cmp	r7, #0
 800fe86:	da07      	bge.n	800fe98 <_strtoul_l.constprop.0+0xbc>
 800fe88:	2322      	movs	r3, #34	; 0x22
 800fe8a:	f8ce 3000 	str.w	r3, [lr]
 800fe8e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe92:	b932      	cbnz	r2, 800fea2 <_strtoul_l.constprop.0+0xc6>
 800fe94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe98:	b106      	cbz	r6, 800fe9c <_strtoul_l.constprop.0+0xc0>
 800fe9a:	4240      	negs	r0, r0
 800fe9c:	2a00      	cmp	r2, #0
 800fe9e:	d0f9      	beq.n	800fe94 <_strtoul_l.constprop.0+0xb8>
 800fea0:	b107      	cbz	r7, 800fea4 <_strtoul_l.constprop.0+0xc8>
 800fea2:	1e69      	subs	r1, r5, #1
 800fea4:	6011      	str	r1, [r2, #0]
 800fea6:	e7f5      	b.n	800fe94 <_strtoul_l.constprop.0+0xb8>
 800fea8:	2430      	movs	r4, #48	; 0x30
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d1b5      	bne.n	800fe1a <_strtoul_l.constprop.0+0x3e>
 800feae:	2308      	movs	r3, #8
 800feb0:	e7b3      	b.n	800fe1a <_strtoul_l.constprop.0+0x3e>
 800feb2:	2c30      	cmp	r4, #48	; 0x30
 800feb4:	d0a9      	beq.n	800fe0a <_strtoul_l.constprop.0+0x2e>
 800feb6:	230a      	movs	r3, #10
 800feb8:	e7af      	b.n	800fe1a <_strtoul_l.constprop.0+0x3e>
 800feba:	bf00      	nop
 800febc:	0801065d 	.word	0x0801065d

0800fec0 <_strtoul_r>:
 800fec0:	f7ff bf8c 	b.w	800fddc <_strtoul_l.constprop.0>

0800fec4 <__submore>:
 800fec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fec8:	460c      	mov	r4, r1
 800feca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fed0:	4299      	cmp	r1, r3
 800fed2:	d11d      	bne.n	800ff10 <__submore+0x4c>
 800fed4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fed8:	f7fe fb64 	bl	800e5a4 <_malloc_r>
 800fedc:	b918      	cbnz	r0, 800fee6 <__submore+0x22>
 800fede:	f04f 30ff 	mov.w	r0, #4294967295
 800fee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800feea:	63a3      	str	r3, [r4, #56]	; 0x38
 800feec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fef0:	6360      	str	r0, [r4, #52]	; 0x34
 800fef2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800fef6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fefa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800fefe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ff02:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ff06:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ff0a:	6020      	str	r0, [r4, #0]
 800ff0c:	2000      	movs	r0, #0
 800ff0e:	e7e8      	b.n	800fee2 <__submore+0x1e>
 800ff10:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ff12:	0077      	lsls	r7, r6, #1
 800ff14:	463a      	mov	r2, r7
 800ff16:	f000 f955 	bl	80101c4 <_realloc_r>
 800ff1a:	4605      	mov	r5, r0
 800ff1c:	2800      	cmp	r0, #0
 800ff1e:	d0de      	beq.n	800fede <__submore+0x1a>
 800ff20:	eb00 0806 	add.w	r8, r0, r6
 800ff24:	4601      	mov	r1, r0
 800ff26:	4632      	mov	r2, r6
 800ff28:	4640      	mov	r0, r8
 800ff2a:	f7fe faa3 	bl	800e474 <memcpy>
 800ff2e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ff32:	f8c4 8000 	str.w	r8, [r4]
 800ff36:	e7e9      	b.n	800ff0c <__submore+0x48>

0800ff38 <__swbuf_r>:
 800ff38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff3a:	460e      	mov	r6, r1
 800ff3c:	4614      	mov	r4, r2
 800ff3e:	4605      	mov	r5, r0
 800ff40:	b118      	cbz	r0, 800ff4a <__swbuf_r+0x12>
 800ff42:	6983      	ldr	r3, [r0, #24]
 800ff44:	b90b      	cbnz	r3, 800ff4a <__swbuf_r+0x12>
 800ff46:	f7fe f9af 	bl	800e2a8 <__sinit>
 800ff4a:	4b21      	ldr	r3, [pc, #132]	; (800ffd0 <__swbuf_r+0x98>)
 800ff4c:	429c      	cmp	r4, r3
 800ff4e:	d12b      	bne.n	800ffa8 <__swbuf_r+0x70>
 800ff50:	686c      	ldr	r4, [r5, #4]
 800ff52:	69a3      	ldr	r3, [r4, #24]
 800ff54:	60a3      	str	r3, [r4, #8]
 800ff56:	89a3      	ldrh	r3, [r4, #12]
 800ff58:	071a      	lsls	r2, r3, #28
 800ff5a:	d52f      	bpl.n	800ffbc <__swbuf_r+0x84>
 800ff5c:	6923      	ldr	r3, [r4, #16]
 800ff5e:	b36b      	cbz	r3, 800ffbc <__swbuf_r+0x84>
 800ff60:	6923      	ldr	r3, [r4, #16]
 800ff62:	6820      	ldr	r0, [r4, #0]
 800ff64:	1ac0      	subs	r0, r0, r3
 800ff66:	6963      	ldr	r3, [r4, #20]
 800ff68:	b2f6      	uxtb	r6, r6
 800ff6a:	4283      	cmp	r3, r0
 800ff6c:	4637      	mov	r7, r6
 800ff6e:	dc04      	bgt.n	800ff7a <__swbuf_r+0x42>
 800ff70:	4621      	mov	r1, r4
 800ff72:	4628      	mov	r0, r5
 800ff74:	f7fe fe8a 	bl	800ec8c <_fflush_r>
 800ff78:	bb30      	cbnz	r0, 800ffc8 <__swbuf_r+0x90>
 800ff7a:	68a3      	ldr	r3, [r4, #8]
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	60a3      	str	r3, [r4, #8]
 800ff80:	6823      	ldr	r3, [r4, #0]
 800ff82:	1c5a      	adds	r2, r3, #1
 800ff84:	6022      	str	r2, [r4, #0]
 800ff86:	701e      	strb	r6, [r3, #0]
 800ff88:	6963      	ldr	r3, [r4, #20]
 800ff8a:	3001      	adds	r0, #1
 800ff8c:	4283      	cmp	r3, r0
 800ff8e:	d004      	beq.n	800ff9a <__swbuf_r+0x62>
 800ff90:	89a3      	ldrh	r3, [r4, #12]
 800ff92:	07db      	lsls	r3, r3, #31
 800ff94:	d506      	bpl.n	800ffa4 <__swbuf_r+0x6c>
 800ff96:	2e0a      	cmp	r6, #10
 800ff98:	d104      	bne.n	800ffa4 <__swbuf_r+0x6c>
 800ff9a:	4621      	mov	r1, r4
 800ff9c:	4628      	mov	r0, r5
 800ff9e:	f7fe fe75 	bl	800ec8c <_fflush_r>
 800ffa2:	b988      	cbnz	r0, 800ffc8 <__swbuf_r+0x90>
 800ffa4:	4638      	mov	r0, r7
 800ffa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffa8:	4b0a      	ldr	r3, [pc, #40]	; (800ffd4 <__swbuf_r+0x9c>)
 800ffaa:	429c      	cmp	r4, r3
 800ffac:	d101      	bne.n	800ffb2 <__swbuf_r+0x7a>
 800ffae:	68ac      	ldr	r4, [r5, #8]
 800ffb0:	e7cf      	b.n	800ff52 <__swbuf_r+0x1a>
 800ffb2:	4b09      	ldr	r3, [pc, #36]	; (800ffd8 <__swbuf_r+0xa0>)
 800ffb4:	429c      	cmp	r4, r3
 800ffb6:	bf08      	it	eq
 800ffb8:	68ec      	ldreq	r4, [r5, #12]
 800ffba:	e7ca      	b.n	800ff52 <__swbuf_r+0x1a>
 800ffbc:	4621      	mov	r1, r4
 800ffbe:	4628      	mov	r0, r5
 800ffc0:	f000 f80c 	bl	800ffdc <__swsetup_r>
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	d0cb      	beq.n	800ff60 <__swbuf_r+0x28>
 800ffc8:	f04f 37ff 	mov.w	r7, #4294967295
 800ffcc:	e7ea      	b.n	800ffa4 <__swbuf_r+0x6c>
 800ffce:	bf00      	nop
 800ffd0:	08010568 	.word	0x08010568
 800ffd4:	08010588 	.word	0x08010588
 800ffd8:	08010548 	.word	0x08010548

0800ffdc <__swsetup_r>:
 800ffdc:	4b32      	ldr	r3, [pc, #200]	; (80100a8 <__swsetup_r+0xcc>)
 800ffde:	b570      	push	{r4, r5, r6, lr}
 800ffe0:	681d      	ldr	r5, [r3, #0]
 800ffe2:	4606      	mov	r6, r0
 800ffe4:	460c      	mov	r4, r1
 800ffe6:	b125      	cbz	r5, 800fff2 <__swsetup_r+0x16>
 800ffe8:	69ab      	ldr	r3, [r5, #24]
 800ffea:	b913      	cbnz	r3, 800fff2 <__swsetup_r+0x16>
 800ffec:	4628      	mov	r0, r5
 800ffee:	f7fe f95b 	bl	800e2a8 <__sinit>
 800fff2:	4b2e      	ldr	r3, [pc, #184]	; (80100ac <__swsetup_r+0xd0>)
 800fff4:	429c      	cmp	r4, r3
 800fff6:	d10f      	bne.n	8010018 <__swsetup_r+0x3c>
 800fff8:	686c      	ldr	r4, [r5, #4]
 800fffa:	89a3      	ldrh	r3, [r4, #12]
 800fffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010000:	0719      	lsls	r1, r3, #28
 8010002:	d42c      	bmi.n	801005e <__swsetup_r+0x82>
 8010004:	06dd      	lsls	r5, r3, #27
 8010006:	d411      	bmi.n	801002c <__swsetup_r+0x50>
 8010008:	2309      	movs	r3, #9
 801000a:	6033      	str	r3, [r6, #0]
 801000c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010010:	81a3      	strh	r3, [r4, #12]
 8010012:	f04f 30ff 	mov.w	r0, #4294967295
 8010016:	e03e      	b.n	8010096 <__swsetup_r+0xba>
 8010018:	4b25      	ldr	r3, [pc, #148]	; (80100b0 <__swsetup_r+0xd4>)
 801001a:	429c      	cmp	r4, r3
 801001c:	d101      	bne.n	8010022 <__swsetup_r+0x46>
 801001e:	68ac      	ldr	r4, [r5, #8]
 8010020:	e7eb      	b.n	800fffa <__swsetup_r+0x1e>
 8010022:	4b24      	ldr	r3, [pc, #144]	; (80100b4 <__swsetup_r+0xd8>)
 8010024:	429c      	cmp	r4, r3
 8010026:	bf08      	it	eq
 8010028:	68ec      	ldreq	r4, [r5, #12]
 801002a:	e7e6      	b.n	800fffa <__swsetup_r+0x1e>
 801002c:	0758      	lsls	r0, r3, #29
 801002e:	d512      	bpl.n	8010056 <__swsetup_r+0x7a>
 8010030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010032:	b141      	cbz	r1, 8010046 <__swsetup_r+0x6a>
 8010034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010038:	4299      	cmp	r1, r3
 801003a:	d002      	beq.n	8010042 <__swsetup_r+0x66>
 801003c:	4630      	mov	r0, r6
 801003e:	f7fe fa45 	bl	800e4cc <_free_r>
 8010042:	2300      	movs	r3, #0
 8010044:	6363      	str	r3, [r4, #52]	; 0x34
 8010046:	89a3      	ldrh	r3, [r4, #12]
 8010048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801004c:	81a3      	strh	r3, [r4, #12]
 801004e:	2300      	movs	r3, #0
 8010050:	6063      	str	r3, [r4, #4]
 8010052:	6923      	ldr	r3, [r4, #16]
 8010054:	6023      	str	r3, [r4, #0]
 8010056:	89a3      	ldrh	r3, [r4, #12]
 8010058:	f043 0308 	orr.w	r3, r3, #8
 801005c:	81a3      	strh	r3, [r4, #12]
 801005e:	6923      	ldr	r3, [r4, #16]
 8010060:	b94b      	cbnz	r3, 8010076 <__swsetup_r+0x9a>
 8010062:	89a3      	ldrh	r3, [r4, #12]
 8010064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801006c:	d003      	beq.n	8010076 <__swsetup_r+0x9a>
 801006e:	4621      	mov	r1, r4
 8010070:	4630      	mov	r0, r6
 8010072:	f000 f84d 	bl	8010110 <__smakebuf_r>
 8010076:	89a0      	ldrh	r0, [r4, #12]
 8010078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801007c:	f010 0301 	ands.w	r3, r0, #1
 8010080:	d00a      	beq.n	8010098 <__swsetup_r+0xbc>
 8010082:	2300      	movs	r3, #0
 8010084:	60a3      	str	r3, [r4, #8]
 8010086:	6963      	ldr	r3, [r4, #20]
 8010088:	425b      	negs	r3, r3
 801008a:	61a3      	str	r3, [r4, #24]
 801008c:	6923      	ldr	r3, [r4, #16]
 801008e:	b943      	cbnz	r3, 80100a2 <__swsetup_r+0xc6>
 8010090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010094:	d1ba      	bne.n	801000c <__swsetup_r+0x30>
 8010096:	bd70      	pop	{r4, r5, r6, pc}
 8010098:	0781      	lsls	r1, r0, #30
 801009a:	bf58      	it	pl
 801009c:	6963      	ldrpl	r3, [r4, #20]
 801009e:	60a3      	str	r3, [r4, #8]
 80100a0:	e7f4      	b.n	801008c <__swsetup_r+0xb0>
 80100a2:	2000      	movs	r0, #0
 80100a4:	e7f7      	b.n	8010096 <__swsetup_r+0xba>
 80100a6:	bf00      	nop
 80100a8:	20000014 	.word	0x20000014
 80100ac:	08010568 	.word	0x08010568
 80100b0:	08010588 	.word	0x08010588
 80100b4:	08010548 	.word	0x08010548

080100b8 <abort>:
 80100b8:	b508      	push	{r3, lr}
 80100ba:	2006      	movs	r0, #6
 80100bc:	f000 f8da 	bl	8010274 <raise>
 80100c0:	2001      	movs	r0, #1
 80100c2:	f7f0 ffef 	bl	80010a4 <_exit>

080100c6 <__swhatbuf_r>:
 80100c6:	b570      	push	{r4, r5, r6, lr}
 80100c8:	460e      	mov	r6, r1
 80100ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100ce:	2900      	cmp	r1, #0
 80100d0:	b096      	sub	sp, #88	; 0x58
 80100d2:	4614      	mov	r4, r2
 80100d4:	461d      	mov	r5, r3
 80100d6:	da08      	bge.n	80100ea <__swhatbuf_r+0x24>
 80100d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80100dc:	2200      	movs	r2, #0
 80100de:	602a      	str	r2, [r5, #0]
 80100e0:	061a      	lsls	r2, r3, #24
 80100e2:	d410      	bmi.n	8010106 <__swhatbuf_r+0x40>
 80100e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100e8:	e00e      	b.n	8010108 <__swhatbuf_r+0x42>
 80100ea:	466a      	mov	r2, sp
 80100ec:	f000 f8de 	bl	80102ac <_fstat_r>
 80100f0:	2800      	cmp	r0, #0
 80100f2:	dbf1      	blt.n	80100d8 <__swhatbuf_r+0x12>
 80100f4:	9a01      	ldr	r2, [sp, #4]
 80100f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80100fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80100fe:	425a      	negs	r2, r3
 8010100:	415a      	adcs	r2, r3
 8010102:	602a      	str	r2, [r5, #0]
 8010104:	e7ee      	b.n	80100e4 <__swhatbuf_r+0x1e>
 8010106:	2340      	movs	r3, #64	; 0x40
 8010108:	2000      	movs	r0, #0
 801010a:	6023      	str	r3, [r4, #0]
 801010c:	b016      	add	sp, #88	; 0x58
 801010e:	bd70      	pop	{r4, r5, r6, pc}

08010110 <__smakebuf_r>:
 8010110:	898b      	ldrh	r3, [r1, #12]
 8010112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010114:	079d      	lsls	r5, r3, #30
 8010116:	4606      	mov	r6, r0
 8010118:	460c      	mov	r4, r1
 801011a:	d507      	bpl.n	801012c <__smakebuf_r+0x1c>
 801011c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010120:	6023      	str	r3, [r4, #0]
 8010122:	6123      	str	r3, [r4, #16]
 8010124:	2301      	movs	r3, #1
 8010126:	6163      	str	r3, [r4, #20]
 8010128:	b002      	add	sp, #8
 801012a:	bd70      	pop	{r4, r5, r6, pc}
 801012c:	ab01      	add	r3, sp, #4
 801012e:	466a      	mov	r2, sp
 8010130:	f7ff ffc9 	bl	80100c6 <__swhatbuf_r>
 8010134:	9900      	ldr	r1, [sp, #0]
 8010136:	4605      	mov	r5, r0
 8010138:	4630      	mov	r0, r6
 801013a:	f7fe fa33 	bl	800e5a4 <_malloc_r>
 801013e:	b948      	cbnz	r0, 8010154 <__smakebuf_r+0x44>
 8010140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010144:	059a      	lsls	r2, r3, #22
 8010146:	d4ef      	bmi.n	8010128 <__smakebuf_r+0x18>
 8010148:	f023 0303 	bic.w	r3, r3, #3
 801014c:	f043 0302 	orr.w	r3, r3, #2
 8010150:	81a3      	strh	r3, [r4, #12]
 8010152:	e7e3      	b.n	801011c <__smakebuf_r+0xc>
 8010154:	4b0d      	ldr	r3, [pc, #52]	; (801018c <__smakebuf_r+0x7c>)
 8010156:	62b3      	str	r3, [r6, #40]	; 0x28
 8010158:	89a3      	ldrh	r3, [r4, #12]
 801015a:	6020      	str	r0, [r4, #0]
 801015c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010160:	81a3      	strh	r3, [r4, #12]
 8010162:	9b00      	ldr	r3, [sp, #0]
 8010164:	6163      	str	r3, [r4, #20]
 8010166:	9b01      	ldr	r3, [sp, #4]
 8010168:	6120      	str	r0, [r4, #16]
 801016a:	b15b      	cbz	r3, 8010184 <__smakebuf_r+0x74>
 801016c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010170:	4630      	mov	r0, r6
 8010172:	f000 f8ad 	bl	80102d0 <_isatty_r>
 8010176:	b128      	cbz	r0, 8010184 <__smakebuf_r+0x74>
 8010178:	89a3      	ldrh	r3, [r4, #12]
 801017a:	f023 0303 	bic.w	r3, r3, #3
 801017e:	f043 0301 	orr.w	r3, r3, #1
 8010182:	81a3      	strh	r3, [r4, #12]
 8010184:	89a0      	ldrh	r0, [r4, #12]
 8010186:	4305      	orrs	r5, r0
 8010188:	81a5      	strh	r5, [r4, #12]
 801018a:	e7cd      	b.n	8010128 <__smakebuf_r+0x18>
 801018c:	0800e241 	.word	0x0800e241

08010190 <memmove>:
 8010190:	4288      	cmp	r0, r1
 8010192:	b510      	push	{r4, lr}
 8010194:	eb01 0402 	add.w	r4, r1, r2
 8010198:	d902      	bls.n	80101a0 <memmove+0x10>
 801019a:	4284      	cmp	r4, r0
 801019c:	4623      	mov	r3, r4
 801019e:	d807      	bhi.n	80101b0 <memmove+0x20>
 80101a0:	1e43      	subs	r3, r0, #1
 80101a2:	42a1      	cmp	r1, r4
 80101a4:	d008      	beq.n	80101b8 <memmove+0x28>
 80101a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80101ae:	e7f8      	b.n	80101a2 <memmove+0x12>
 80101b0:	4402      	add	r2, r0
 80101b2:	4601      	mov	r1, r0
 80101b4:	428a      	cmp	r2, r1
 80101b6:	d100      	bne.n	80101ba <memmove+0x2a>
 80101b8:	bd10      	pop	{r4, pc}
 80101ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80101c2:	e7f7      	b.n	80101b4 <memmove+0x24>

080101c4 <_realloc_r>:
 80101c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101c8:	4680      	mov	r8, r0
 80101ca:	4614      	mov	r4, r2
 80101cc:	460e      	mov	r6, r1
 80101ce:	b921      	cbnz	r1, 80101da <_realloc_r+0x16>
 80101d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101d4:	4611      	mov	r1, r2
 80101d6:	f7fe b9e5 	b.w	800e5a4 <_malloc_r>
 80101da:	b92a      	cbnz	r2, 80101e8 <_realloc_r+0x24>
 80101dc:	f7fe f976 	bl	800e4cc <_free_r>
 80101e0:	4625      	mov	r5, r4
 80101e2:	4628      	mov	r0, r5
 80101e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101e8:	f000 f882 	bl	80102f0 <_malloc_usable_size_r>
 80101ec:	4284      	cmp	r4, r0
 80101ee:	4607      	mov	r7, r0
 80101f0:	d802      	bhi.n	80101f8 <_realloc_r+0x34>
 80101f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80101f6:	d812      	bhi.n	801021e <_realloc_r+0x5a>
 80101f8:	4621      	mov	r1, r4
 80101fa:	4640      	mov	r0, r8
 80101fc:	f7fe f9d2 	bl	800e5a4 <_malloc_r>
 8010200:	4605      	mov	r5, r0
 8010202:	2800      	cmp	r0, #0
 8010204:	d0ed      	beq.n	80101e2 <_realloc_r+0x1e>
 8010206:	42bc      	cmp	r4, r7
 8010208:	4622      	mov	r2, r4
 801020a:	4631      	mov	r1, r6
 801020c:	bf28      	it	cs
 801020e:	463a      	movcs	r2, r7
 8010210:	f7fe f930 	bl	800e474 <memcpy>
 8010214:	4631      	mov	r1, r6
 8010216:	4640      	mov	r0, r8
 8010218:	f7fe f958 	bl	800e4cc <_free_r>
 801021c:	e7e1      	b.n	80101e2 <_realloc_r+0x1e>
 801021e:	4635      	mov	r5, r6
 8010220:	e7df      	b.n	80101e2 <_realloc_r+0x1e>

08010222 <_raise_r>:
 8010222:	291f      	cmp	r1, #31
 8010224:	b538      	push	{r3, r4, r5, lr}
 8010226:	4604      	mov	r4, r0
 8010228:	460d      	mov	r5, r1
 801022a:	d904      	bls.n	8010236 <_raise_r+0x14>
 801022c:	2316      	movs	r3, #22
 801022e:	6003      	str	r3, [r0, #0]
 8010230:	f04f 30ff 	mov.w	r0, #4294967295
 8010234:	bd38      	pop	{r3, r4, r5, pc}
 8010236:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010238:	b112      	cbz	r2, 8010240 <_raise_r+0x1e>
 801023a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801023e:	b94b      	cbnz	r3, 8010254 <_raise_r+0x32>
 8010240:	4620      	mov	r0, r4
 8010242:	f000 f831 	bl	80102a8 <_getpid_r>
 8010246:	462a      	mov	r2, r5
 8010248:	4601      	mov	r1, r0
 801024a:	4620      	mov	r0, r4
 801024c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010250:	f000 b818 	b.w	8010284 <_kill_r>
 8010254:	2b01      	cmp	r3, #1
 8010256:	d00a      	beq.n	801026e <_raise_r+0x4c>
 8010258:	1c59      	adds	r1, r3, #1
 801025a:	d103      	bne.n	8010264 <_raise_r+0x42>
 801025c:	2316      	movs	r3, #22
 801025e:	6003      	str	r3, [r0, #0]
 8010260:	2001      	movs	r0, #1
 8010262:	e7e7      	b.n	8010234 <_raise_r+0x12>
 8010264:	2400      	movs	r4, #0
 8010266:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801026a:	4628      	mov	r0, r5
 801026c:	4798      	blx	r3
 801026e:	2000      	movs	r0, #0
 8010270:	e7e0      	b.n	8010234 <_raise_r+0x12>
	...

08010274 <raise>:
 8010274:	4b02      	ldr	r3, [pc, #8]	; (8010280 <raise+0xc>)
 8010276:	4601      	mov	r1, r0
 8010278:	6818      	ldr	r0, [r3, #0]
 801027a:	f7ff bfd2 	b.w	8010222 <_raise_r>
 801027e:	bf00      	nop
 8010280:	20000014 	.word	0x20000014

08010284 <_kill_r>:
 8010284:	b538      	push	{r3, r4, r5, lr}
 8010286:	4d07      	ldr	r5, [pc, #28]	; (80102a4 <_kill_r+0x20>)
 8010288:	2300      	movs	r3, #0
 801028a:	4604      	mov	r4, r0
 801028c:	4608      	mov	r0, r1
 801028e:	4611      	mov	r1, r2
 8010290:	602b      	str	r3, [r5, #0]
 8010292:	f7f0 fef7 	bl	8001084 <_kill>
 8010296:	1c43      	adds	r3, r0, #1
 8010298:	d102      	bne.n	80102a0 <_kill_r+0x1c>
 801029a:	682b      	ldr	r3, [r5, #0]
 801029c:	b103      	cbz	r3, 80102a0 <_kill_r+0x1c>
 801029e:	6023      	str	r3, [r4, #0]
 80102a0:	bd38      	pop	{r3, r4, r5, pc}
 80102a2:	bf00      	nop
 80102a4:	200059a8 	.word	0x200059a8

080102a8 <_getpid_r>:
 80102a8:	f7f0 bee4 	b.w	8001074 <_getpid>

080102ac <_fstat_r>:
 80102ac:	b538      	push	{r3, r4, r5, lr}
 80102ae:	4d07      	ldr	r5, [pc, #28]	; (80102cc <_fstat_r+0x20>)
 80102b0:	2300      	movs	r3, #0
 80102b2:	4604      	mov	r4, r0
 80102b4:	4608      	mov	r0, r1
 80102b6:	4611      	mov	r1, r2
 80102b8:	602b      	str	r3, [r5, #0]
 80102ba:	f7f0 ff42 	bl	8001142 <_fstat>
 80102be:	1c43      	adds	r3, r0, #1
 80102c0:	d102      	bne.n	80102c8 <_fstat_r+0x1c>
 80102c2:	682b      	ldr	r3, [r5, #0]
 80102c4:	b103      	cbz	r3, 80102c8 <_fstat_r+0x1c>
 80102c6:	6023      	str	r3, [r4, #0]
 80102c8:	bd38      	pop	{r3, r4, r5, pc}
 80102ca:	bf00      	nop
 80102cc:	200059a8 	.word	0x200059a8

080102d0 <_isatty_r>:
 80102d0:	b538      	push	{r3, r4, r5, lr}
 80102d2:	4d06      	ldr	r5, [pc, #24]	; (80102ec <_isatty_r+0x1c>)
 80102d4:	2300      	movs	r3, #0
 80102d6:	4604      	mov	r4, r0
 80102d8:	4608      	mov	r0, r1
 80102da:	602b      	str	r3, [r5, #0]
 80102dc:	f7f0 ff41 	bl	8001162 <_isatty>
 80102e0:	1c43      	adds	r3, r0, #1
 80102e2:	d102      	bne.n	80102ea <_isatty_r+0x1a>
 80102e4:	682b      	ldr	r3, [r5, #0]
 80102e6:	b103      	cbz	r3, 80102ea <_isatty_r+0x1a>
 80102e8:	6023      	str	r3, [r4, #0]
 80102ea:	bd38      	pop	{r3, r4, r5, pc}
 80102ec:	200059a8 	.word	0x200059a8

080102f0 <_malloc_usable_size_r>:
 80102f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102f4:	1f18      	subs	r0, r3, #4
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	bfbc      	itt	lt
 80102fa:	580b      	ldrlt	r3, [r1, r0]
 80102fc:	18c0      	addlt	r0, r0, r3
 80102fe:	4770      	bx	lr

08010300 <_init>:
 8010300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010302:	bf00      	nop
 8010304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010306:	bc08      	pop	{r3}
 8010308:	469e      	mov	lr, r3
 801030a:	4770      	bx	lr

0801030c <_fini>:
 801030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801030e:	bf00      	nop
 8010310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010312:	bc08      	pop	{r3}
 8010314:	469e      	mov	lr, r3
 8010316:	4770      	bx	lr

08010318 <__rsa_Encrypt_veneer>:
 8010318:	f85f f000 	ldr.w	pc, [pc]	; 801031c <__rsa_Encrypt_veneer+0x4>
 801031c:	00001c79 	.word	0x00001c79

08010320 <__rsa_Decrypt_veneer>:
 8010320:	f85f f000 	ldr.w	pc, [pc]	; 8010324 <__rsa_Decrypt_veneer+0x4>
 8010324:	00001c9d 	.word	0x00001c9d

08010328 <__rsa_init_new_veneer>:
 8010328:	f85f f000 	ldr.w	pc, [pc]	; 801032c <__rsa_init_new_veneer+0x4>
 801032c:	00001829 	.word	0x00001829

08010330 <__BN_bn2str_veneer>:
 8010330:	f85f f000 	ldr.w	pc, [pc]	; 8010334 <__BN_bn2str_veneer+0x4>
 8010334:	00000001 	.word	0x00000001

08010338 <__rsa_init_veneer>:
 8010338:	f85f f000 	ldr.w	pc, [pc]	; 801033c <__rsa_init_veneer+0x4>
 801033c:	00001a09 	.word	0x00001a09

08010340 <__BN_str2bn_veneer>:
 8010340:	f85f f000 	ldr.w	pc, [pc]	; 8010344 <__BN_str2bn_veneer+0x4>
 8010344:	00000081 	.word	0x00000081

08010348 <__prime_random_veneer>:
 8010348:	f85f f000 	ldr.w	pc, [pc]	; 801034c <__prime_random_veneer+0x4>
 801034c:	000015ed 	.word	0x000015ed

Disassembly of section .itcm:

00000000 <BN_bn2str>:
	errno = EAGAIN;
	return -1;
}

int _execve(char *name, char **argv, char **env)
{
       0:	b580      	push	{r7, lr}
       2:	b084      	sub	sp, #16
       4:	af00      	add	r7, sp, #0
       6:	6078      	str	r0, [r7, #4]
       8:	6039      	str	r1, [r7, #0]
       a:	687b      	ldr	r3, [r7, #4]
	errno = ENOMEM;
       c:	2200      	movs	r2, #0
       e:	701a      	strb	r2, [r3, #0]
      10:	2101      	movs	r1, #1
      12:	2020      	movs	r0, #32
      14:	f001 ff28 	bl	1e68 <__calloc_veneer>
	return -1;
      18:	4603      	mov	r3, r0
}
      1a:	60bb      	str	r3, [r7, #8]
      1c:	2311      	movs	r3, #17
      1e:	60fb      	str	r3, [r7, #12]
      20:	e01e      	b.n	60 <BN_bn2str+0x60>
  */
void HAL_ResumeTick(void)
{
  /* Enable TIM6 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
}
      22:	683b      	ldr	r3, [r7, #0]
    __HAL_RCC_RNG_CLK_DISABLE();
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }
}
      24:	681a      	ldr	r2, [r3, #0]
      26:	68fb      	ldr	r3, [r7, #12]
      28:	00db      	lsls	r3, r3, #3
      2a:	4413      	add	r3, r2
      2c:	e9d3 0100 	ldrd	r0, r1, [r3]
      30:	f04f 0200 	mov.w	r2, #0
      34:	f04f 0300 	mov.w	r3, #0

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
      38:	000a      	movs	r2, r1
      3a:	2300      	movs	r3, #0
      3c:	4611      	mov	r1, r2
      3e:	683b      	ldr	r3, [r7, #0]
    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
    HAL_DMA_DeInit(uartHandle->hdmatx);

    /* USART3 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
      40:	681a      	ldr	r2, [r3, #0]
      42:	68fb      	ldr	r3, [r7, #12]
      44:	00db      	lsls	r3, r3, #3
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
      46:	4413      	add	r3, r2
      48:	e9d3 2300 	ldrd	r2, r3, [r3]
      4c:	4613      	mov	r3, r2
      4e:	460a      	mov	r2, r1
      50:	490a      	ldr	r1, [pc, #40]	; (7c <BN_bn2str+0x7c>)
      52:	68b8      	ldr	r0, [r7, #8]
      54:	f001 fee8 	bl	1e28 <__sprintf_veneer>
      58:	68b9      	ldr	r1, [r7, #8]
      5a:	6878      	ldr	r0, [r7, #4]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
      5c:	f001 ff00 	bl	1e60 <__strcat_veneer>
      60:	68fb      	ldr	r3, [r7, #12]
}
      62:	1e5a      	subs	r2, r3, #1
      64:	60fa      	str	r2, [r7, #12]
      66:	2b00      	cmp	r3, #0
      68:	d1db      	bne.n	22 <BN_bn2str+0x22>
      6a:	68b8      	ldr	r0, [r7, #8]
      6c:	f001 fee4 	bl	1e38 <__free_veneer>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
      70:	2300      	movs	r3, #0
		return pxNewTimer;
      72:	4618      	mov	r0, r3
	}
      74:	3710      	adds	r7, #16
      76:	46bd      	mov	sp, r7
      78:	bd80      	pop	{r7, pc}
      7a:	bf00      	nop
    HAL_NVIC_DisableIRQ(ETH_IRQn);
  /* USER CODE BEGIN ETH_MspDeInit 1 */

  /* USER CODE END ETH_MspDeInit 1 */
  }
}
      7c:	0801037c 	.word	0x0801037c

00000080 <BN_str2bn>:
      80:	b590      	push	{r4, r7, lr}
      82:	b087      	sub	sp, #28
      84:	af00      	add	r7, sp, #0
      86:	6078      	str	r0, [r7, #4]
      88:	6039      	str	r1, [r7, #0]
      8a:	2108      	movs	r1, #8

	taskENTER_CRITICAL();
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
      8c:	2040      	movs	r0, #64	; 0x40
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
      8e:	f001 feeb 	bl	1e68 <__calloc_veneer>
      92:	4603      	mov	r3, r0
      94:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
      96:	2300      	movs	r3, #0
      98:	617b      	str	r3, [r7, #20]
}
      9a:	4926      	ldr	r1, [pc, #152]	; (134 <BN_str2bn+0xb4>)
      9c:	6878      	ldr	r0, [r7, #4]
      9e:	f001 fec7 	bl	1e30 <__strtok_veneer>
      a2:	6138      	str	r0, [r7, #16]
      a4:	e013      	b.n	ce <BN_str2bn+0x4e>
      a6:	697b      	ldr	r3, [r7, #20]
      a8:	1c5a      	adds	r2, r3, #1
      aa:	617a      	str	r2, [r7, #20]
      ac:	00db      	lsls	r3, r3, #3
      ae:	68ba      	ldr	r2, [r7, #8]
      b0:	18d4      	adds	r4, r2, r3
      b2:	2210      	movs	r2, #16
      b4:	2100      	movs	r1, #0
      b6:	6938      	ldr	r0, [r7, #16]
      b8:	f001 fec6 	bl	1e48 <__strtoull_veneer>
    __HAL_RNG_DISABLE_IT(hrng);

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;

    if (hrng->State != HAL_RNG_STATE_ERROR)
      bc:	4602      	mov	r2, r0
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
      be:	460b      	mov	r3, r1
      c0:	e9c4 2300 	strd	r2, r3, [r4]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
      c4:	491b      	ldr	r1, [pc, #108]	; (134 <BN_str2bn+0xb4>)
      c6:	2000      	movs	r0, #0
      c8:	f001 feb2 	bl	1e30 <__strtok_veneer>
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
      cc:	6138      	str	r0, [r7, #16]
      ce:	693b      	ldr	r3, [r7, #16]
      d0:	2b00      	cmp	r3, #0
      d2:	d002      	beq.n	da <BN_str2bn+0x5a>
      d4:	697b      	ldr	r3, [r7, #20]
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
      d6:	2b40      	cmp	r3, #64	; 0x40
      d8:	d1e5      	bne.n	a6 <BN_str2bn+0x26>
      da:	2300      	movs	r3, #0
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
      dc:	60fb      	str	r3, [r7, #12]
      de:	e012      	b.n	106 <BN_str2bn+0x86>
      e0:	697b      	ldr	r3, [r7, #20]
      e2:	1e5a      	subs	r2, r3, #1
      e4:	68fb      	ldr	r3, [r7, #12]
      e6:	1ad3      	subs	r3, r2, r3
      e8:	00db      	lsls	r3, r3, #3
      ea:	68ba      	ldr	r2, [r7, #8]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->BCDCallback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#else
  HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
}
      ec:	4413      	add	r3, r2
      ee:	683a      	ldr	r2, [r7, #0]
      f0:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG (PWR->WKUPEPR, regMask, pinConfig);
      f2:	68fa      	ldr	r2, [r7, #12]
      f4:	00d2      	lsls	r2, r2, #3
      f6:	4411      	add	r1, r2
      f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  MODIFY_REG (EXTI->IMR2, PWR_EXTI_WAKEUP_PINS_MASK, (sPinParams->WakeUpPin << EXTI_IMR2_IM55_Pos));
      fc:	e9c1 2300 	strd	r2, r3, [r1]
     100:	68fb      	ldr	r3, [r7, #12]
     102:	3301      	adds	r3, #1
     104:	60fb      	str	r3, [r7, #12]
     106:	697b      	ldr	r3, [r7, #20]
     108:	2b11      	cmp	r3, #17
     10a:	bfa8      	it	ge
     10c:	2311      	movge	r3, #17
     10e:	68fa      	ldr	r2, [r7, #12]
     110:	429a      	cmp	r2, r3
     112:	d1e5      	bne.n	e0 <BN_str2bn+0x60>
     114:	6838      	ldr	r0, [r7, #0]
}
     116:	f000 f80f 	bl	138 <BN_uint64_length>
     11a:	4603      	mov	r3, r0
     11c:	461a      	mov	r2, r3
     11e:	683b      	ldr	r3, [r7, #0]
     120:	609a      	str	r2, [r3, #8]
     122:	68b8      	ldr	r0, [r7, #8]
     124:	f001 fe88 	bl	1e38 <__free_veneer>
    if ((mp != NULL) && (mp->mem_arr != NULL)) {
     128:	2300      	movs	r3, #0
     12a:	4618      	mov	r0, r3
     12c:	371c      	adds	r7, #28
     12e:	46bd      	mov	sp, r7
     130:	bd90      	pop	{r4, r7, pc}
     132:	bf00      	nop
     134:	08010388 	.word	0x08010388

00000138 <BN_uint64_length>:
      mp->head    = NULL;
     138:	b480      	push	{r7}
     13a:	b085      	sub	sp, #20
      mp->mem_sz  = sz;
     13c:	af00      	add	r7, sp, #0
     13e:	6078      	str	r0, [r7, #4]
     140:	2311      	movs	r3, #17
      mp->name    = name;
     142:	60fb      	str	r3, [r7, #12]
     144:	e00d      	b.n	162 <BN_uint64_length+0x2a>
     146:	687b      	ldr	r3, [r7, #4]
      mp->bl_sz   = block_size;
     148:	681a      	ldr	r2, [r3, #0]
     14a:	68fb      	ldr	r3, [r7, #12]
     14c:	00db      	lsls	r3, r3, #3
      mp->bl_cnt  = block_count;
     14e:	4413      	add	r3, r2
     150:	e9d3 2300 	ldrd	r2, r3, [r3]
      mp->n       = 0U;
     154:	4313      	orrs	r3, r2
     156:	d004      	beq.n	162 <BN_uint64_length+0x2a>
     158:	68fb      	ldr	r3, [r7, #12]
      mp->status = MPOOL_STATUS;
     15a:	3301      	adds	r3, #1
     15c:	60fb      	str	r3, [r7, #12]
     15e:	68fb      	ldr	r3, [r7, #12]
      if (mem_cb == 0) {
     160:	e005      	b.n	16e <BN_uint64_length+0x36>
     162:	68fb      	ldr	r3, [r7, #12]
     164:	1e5a      	subs	r2, r3, #1
        mp->status |= 1U;
     166:	60fa      	str	r2, [r7, #12]
     168:	2b00      	cmp	r3, #0
     16a:	d1ec      	bne.n	146 <BN_uint64_length+0xe>
     16c:	2300      	movs	r3, #0
     16e:	4618      	mov	r0, r3
     170:	3714      	adds	r7, #20
      if (mem_mp == 0) {
     172:	46bd      	mov	sp, r7
     174:	f85d 7b04 	ldr.w	r7, [sp], #4
        mp->status |= 2U;
     178:	4770      	bx	lr

0000017a <BN_high_length>:
     17a:	b4f0      	push	{r4, r5, r6, r7}
     17c:	b084      	sub	sp, #16
     17e:	af00      	add	r7, sp, #0
     180:	6078      	str	r0, [r7, #4]
     182:	2140      	movs	r1, #64	; 0x40
      if (mem_mp == 0) {
     184:	60f9      	str	r1, [r7, #12]
      if ((mem_cb == 0) && (mp != NULL)) {
     186:	e021      	b.n	1cc <BN_high_length+0x52>
     188:	6879      	ldr	r1, [r7, #4]
     18a:	6808      	ldr	r0, [r1, #0]
     18c:	6879      	ldr	r1, [r7, #4]
     18e:	688c      	ldr	r4, [r1, #8]
     190:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
        vPortFree (mp);
     194:	4421      	add	r1, r4
     196:	00c9      	lsls	r1, r1, #3
      mp = NULL;
     198:	4401      	add	r1, r0
     19a:	e9d1 0100 	ldrd	r0, r1, [r1]
}
     19e:	68fc      	ldr	r4, [r7, #12]
     1a0:	f1c4 0620 	rsb	r6, r4, #32
     1a4:	f1a4 0520 	sub.w	r5, r4, #32
     1a8:	fa20 f204 	lsr.w	r2, r0, r4
	}
     1ac:	fa01 f606 	lsl.w	r6, r1, r6
     1b0:	4332      	orrs	r2, r6
     1b2:	fa21 f505 	lsr.w	r5, r1, r5
     1b6:	432a      	orrs	r2, r5
     1b8:	fa21 f304 	lsr.w	r3, r1, r4
     1bc:	ea52 0103 	orrs.w	r1, r2, r3
     1c0:	d004      	beq.n	1cc <BN_high_length+0x52>
     1c2:	68fb      	ldr	r3, [r7, #12]
     1c4:	3301      	adds	r3, #1
     1c6:	60fb      	str	r3, [r7, #12]
  while ((GPIO_Pin >> position) != 0x00U)
     1c8:	68fb      	ldr	r3, [r7, #12]
     1ca:	e005      	b.n	1d8 <BN_high_length+0x5e>
     1cc:	68f9      	ldr	r1, [r7, #12]
     1ce:	1e48      	subs	r0, r1, #1
     1d0:	60f8      	str	r0, [r7, #12]
     1d2:	2900      	cmp	r1, #0
     1d4:	d1d8      	bne.n	188 <BN_high_length+0xe>
}
     1d6:	2300      	movs	r3, #0
     1d8:	4618      	mov	r0, r3
     1da:	3710      	adds	r7, #16
     1dc:	46bd      	mov	sp, r7
     1de:	bcf0      	pop	{r4, r5, r6, r7}
     1e0:	4770      	bx	lr

000001e2 <BN_bit_length>:
     1e2:	b4f0      	push	{r4, r5, r6, r7}
     1e4:	b084      	sub	sp, #16
     1e6:	af00      	add	r7, sp, #0
     1e8:	6078      	str	r0, [r7, #4]
     1ea:	2140      	movs	r1, #64	; 0x40
     1ec:	60f9      	str	r1, [r7, #12]
     1ee:	e026      	b.n	23e <_Min_Heap_Size+0x3e>
     1f0:	6879      	ldr	r1, [r7, #4]
     1f2:	6808      	ldr	r0, [r1, #0]
     1f4:	6879      	ldr	r1, [r7, #4]
     1f6:	688c      	ldr	r4, [r1, #8]
     1f8:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
     1fc:	4421      	add	r1, r4
     1fe:	00c9      	lsls	r1, r1, #3
     200:	4401      	add	r1, r0
     202:	e9d1 0100 	ldrd	r0, r1, [r1]
     206:	68fc      	ldr	r4, [r7, #12]
     208:	f1c4 0620 	rsb	r6, r4, #32
     20c:	f1a4 0520 	sub.w	r5, r4, #32
     210:	fa20 f204 	lsr.w	r2, r0, r4
}
     214:	fa01 f606 	lsl.w	r6, r1, r6
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
     218:	4332      	orrs	r2, r6
     21a:	fa21 f505 	lsr.w	r5, r1, r5
      return HAL_ERROR;
     21e:	432a      	orrs	r2, r5
  return HAL_OK;
     220:	fa21 f304 	lsr.w	r3, r1, r4
}
     224:	ea52 0103 	orrs.w	r1, r2, r3
     228:	d009      	beq.n	23e <_Min_Heap_Size+0x3e>
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	689b      	ldr	r3, [r3, #8]
     22e:	3b01      	subs	r3, #1
     230:	019a      	lsls	r2, r3, #6
     232:	68fb      	ldr	r3, [r7, #12]
     234:	3301      	adds	r3, #1
     236:	60fb      	str	r3, [r7, #12]
     238:	68fb      	ldr	r3, [r7, #12]
     23a:	4413      	add	r3, r2
     23c:	e005      	b.n	24a <_Min_Heap_Size+0x4a>
     23e:	68f9      	ldr	r1, [r7, #12]
     240:	1e48      	subs	r0, r1, #1
     242:	60f8      	str	r0, [r7, #12]
     244:	2900      	cmp	r1, #0
     246:	d1d3      	bne.n	1f0 <BN_bit_length+0xe>
     248:	2300      	movs	r3, #0
     24a:	4618      	mov	r0, r3
     24c:	3710      	adds	r7, #16
     24e:	46bd      	mov	sp, r7
     250:	bcf0      	pop	{r4, r5, r6, r7}
     252:	4770      	bx	lr

00000254 <BN_add>:
          hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
          pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
     254:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
     258:	b08d      	sub	sp, #52	; 0x34
     25a:	af00      	add	r7, sp, #0
     25c:	60f8      	str	r0, [r7, #12]
     25e:	60b9      	str	r1, [r7, #8]
     260:	607a      	str	r2, [r7, #4]
     262:	f04f 0200 	mov.w	r2, #0
     266:	f04f 0300 	mov.w	r3, #0
    }
    else
    {
      common_system_clock = 0U;
     26a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }
    break;
     26e:	68bb      	ldr	r3, [r7, #8]

  default:
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
     270:	689a      	ldr	r2, [r3, #8]
     272:	68fb      	ldr	r3, [r7, #12]
     274:	689b      	ldr	r3, [r3, #8]
     276:	429a      	cmp	r2, r3
     278:	bf38      	it	cc
     27a:	461a      	movcc	r2, r3
     27c:	687b      	ldr	r3, [r7, #4]
     27e:	609a      	str	r2, [r3, #8]
     280:	2300      	movs	r3, #0
    break;
     282:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
#if defined (RCC_D1CFGR_D1CPRE)
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
     284:	e04a      	b.n	31c <BN_add+0xc8>
     286:	68fb      	ldr	r3, [r7, #12]
     288:	681a      	ldr	r2, [r3, #0]
     28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     28c:	00db      	lsls	r3, r3, #3
     28e:	4413      	add	r3, r2
     290:	e9d3 0100 	ldrd	r0, r1, [r3]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;
     294:	68bb      	ldr	r3, [r7, #8]
     296:	681a      	ldr	r2, [r3, #0]
     298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     29a:	00db      	lsls	r3, r3, #3
     29c:	4413      	add	r3, r2

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
     29e:	e9d3 2300 	ldrd	r2, r3, [r3]
     2a2:	1884      	adds	r4, r0, r2
     2a4:	eb41 0503 	adc.w	r5, r1, r3
     2a8:	e9c7 4506 	strd	r4, r5, [r7, #24]
     2ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
     2b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     2b4:	eb10 0802 	adds.w	r8, r0, r2
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
     2b8:	eb41 0903 	adc.w	r9, r1, r3
     2bc:	e9c7 8904 	strd	r8, r9, [r7, #16]
#endif /* DUAL_CORE && CORE_CM4 */
}
     2c0:	68fb      	ldr	r3, [r7, #12]
     2c2:	681a      	ldr	r2, [r3, #0]
     2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     2c6:	00db      	lsls	r3, r3, #3
     2c8:	4413      	add	r3, r2
     2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
     2ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
     2d2:	4290      	cmp	r0, r2
     2d4:	eb71 0303 	sbcs.w	r3, r1, r3
     2d8:	d307      	bcc.n	2ea <BN_add+0x96>
     2da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
     2de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     2e2:	4290      	cmp	r0, r2
     2e4:	eb71 0303 	sbcs.w	r3, r1, r3
     2e8:	d206      	bcs.n	2f8 <BN_add+0xa4>
     2ea:	f04f 0201 	mov.w	r2, #1
     2ee:	f04f 0300 	mov.w	r3, #0
     2f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
     2f6:	e005      	b.n	304 <BN_add+0xb0>
     2f8:	f04f 0200 	mov.w	r2, #0
     2fc:	f04f 0300 	mov.w	r3, #0
}
     300:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
     304:	687b      	ldr	r3, [r7, #4]
     306:	681a      	ldr	r2, [r3, #0]
     308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     30a:	00db      	lsls	r3, r3, #3
     30c:	18d1      	adds	r1, r2, r3
     30e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
     312:	e9c1 2300 	strd	r2, r3, [r1]
      break;
     316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      status = HAL_ERROR;
     318:	3301      	adds	r3, #1
     31a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
     31c:	687b      	ldr	r3, [r7, #4]
  if (status == HAL_OK)
     31e:	689a      	ldr	r2, [r3, #8]
     320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     322:	429a      	cmp	r2, r3
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
     324:	d1af      	bne.n	286 <BN_add+0x32>
     326:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     32a:	1e51      	subs	r1, r2, #1
     32c:	430b      	orrs	r3, r1
     32e:	d112      	bne.n	356 <BN_add+0x102>
     330:	687b      	ldr	r3, [r7, #4]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
     332:	689b      	ldr	r3, [r3, #8]
     334:	2b11      	cmp	r3, #17
     336:	d00e      	beq.n	356 <BN_add+0x102>
     338:	687b      	ldr	r3, [r7, #4]
     33a:	681a      	ldr	r2, [r3, #0]
     33c:	687b      	ldr	r3, [r7, #4]
     33e:	689b      	ldr	r3, [r3, #8]
     340:	1c58      	adds	r0, r3, #1
     342:	6879      	ldr	r1, [r7, #4]
     344:	6088      	str	r0, [r1, #8]
     346:	00db      	lsls	r3, r3, #3
     348:	18d1      	adds	r1, r2, r3
     34a:	f04f 0201 	mov.w	r2, #1
     34e:	f04f 0300 	mov.w	r3, #0
     352:	e9c1 2300 	strd	r2, r3, [r1]
     356:	687b      	ldr	r3, [r7, #4]
     358:	689b      	ldr	r3, [r3, #8]
     35a:	623b      	str	r3, [r7, #32]
     35c:	e00d      	b.n	37a <BN_add+0x126>
     35e:	687b      	ldr	r3, [r7, #4]
     360:	681a      	ldr	r2, [r3, #0]
     362:	6a3b      	ldr	r3, [r7, #32]
     364:	00db      	lsls	r3, r3, #3
     366:	18d1      	adds	r1, r2, r3
     368:	f04f 0200 	mov.w	r2, #0
     36c:	f04f 0300 	mov.w	r3, #0
      __HAL_TIM_MOE_ENABLE(htim);
     370:	e9c1 2300 	strd	r2, r3, [r1]
     374:	6a3b      	ldr	r3, [r7, #32]
     376:	3301      	adds	r3, #1
     378:	623b      	str	r3, [r7, #32]
     37a:	6a3b      	ldr	r3, [r7, #32]
     37c:	2b11      	cmp	r3, #17
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
     37e:	d1ee      	bne.n	35e <BN_add+0x10a>
     380:	2300      	movs	r3, #0
     382:	4618      	mov	r0, r3
     384:	3734      	adds	r7, #52	; 0x34
     386:	46bd      	mov	sp, r7
     388:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
     38c:	4770      	bx	lr

0000038e <BN_sub>:
     38e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
     392:	b08f      	sub	sp, #60	; 0x3c
     394:	af00      	add	r7, sp, #0
     396:	60f8      	str	r0, [r7, #12]
     398:	60b9      	str	r1, [r7, #8]
     39a:	607a      	str	r2, [r7, #4]
     39c:	f04f 0201 	mov.w	r2, #1
     3a0:	f04f 0300 	mov.w	r3, #0
     3a4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
     3a8:	68fb      	ldr	r3, [r7, #12]
     3aa:	689a      	ldr	r2, [r3, #8]
     3ac:	687b      	ldr	r3, [r7, #4]
     3ae:	609a      	str	r2, [r3, #8]
     3b0:	2300      	movs	r3, #0
     3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
     3b4:	e04e      	b.n	454 <_Min_Stack_Size+0x54>
     3b6:	68fb      	ldr	r3, [r7, #12]
     3b8:	681a      	ldr	r2, [r3, #0]
     3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3bc:	00db      	lsls	r3, r3, #3
     3be:	4413      	add	r3, r2
     3c0:	e9d3 0100 	ldrd	r0, r1, [r3]
     3c4:	68bb      	ldr	r3, [r7, #8]
     3c6:	681a      	ldr	r2, [r3, #0]
     3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3ca:	00db      	lsls	r3, r3, #3
     3cc:	4413      	add	r3, r2
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
     3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
     3d2:	1a84      	subs	r4, r0, r2
     3d4:	eb61 0503 	sbc.w	r5, r1, r3
     3d8:	f114 38ff 	adds.w	r8, r4, #4294967295
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
     3dc:	f145 39ff 	adc.w	r9, r5, #4294967295
     3e0:	e9c7 8906 	strd	r8, r9, [r7, #24]
     3e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
        __HAL_TIM_ENABLE(htim);
     3e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
     3ec:	eb10 0a02 	adds.w	sl, r0, r2
     3f0:	eb41 0b03 	adc.w	fp, r1, r3
     3f4:	e9c7 ab04 	strd	sl, fp, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
     3f8:	68fb      	ldr	r3, [r7, #12]
      __HAL_TIM_ENABLE(htim);
     3fa:	681a      	ldr	r2, [r3, #0]
     3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     3fe:	00db      	lsls	r3, r3, #3
     400:	4413      	add	r3, r2
     402:	e9d3 2300 	ldrd	r2, r3, [r3]
     406:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
     40a:	4290      	cmp	r0, r2
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
     40c:	eb71 0303 	sbcs.w	r3, r1, r3
}
     410:	d307      	bcc.n	422 <_Min_Stack_Size+0x22>
     412:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
     416:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     41a:	4290      	cmp	r0, r2
     41c:	eb71 0303 	sbcs.w	r3, r1, r3
     420:	d206      	bcs.n	430 <_Min_Stack_Size+0x30>
     422:	f04f 0201 	mov.w	r2, #1
     426:	f04f 0300 	mov.w	r3, #0
     42a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
     42e:	e005      	b.n	43c <_Min_Stack_Size+0x3c>
     430:	f04f 0200 	mov.w	r2, #0
     434:	f04f 0300 	mov.w	r3, #0
     438:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
     43c:	687b      	ldr	r3, [r7, #4]
     43e:	681a      	ldr	r2, [r3, #0]
     440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     442:	00db      	lsls	r3, r3, #3
     444:	18d1      	adds	r1, r2, r3
     446:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     44a:	e9c1 2300 	strd	r2, r3, [r1]
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
     44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     450:	3301      	adds	r3, #1
     452:	62fb      	str	r3, [r7, #44]	; 0x2c
     454:	687b      	ldr	r3, [r7, #4]
     456:	689a      	ldr	r2, [r3, #8]
     458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     45a:	429a      	cmp	r2, r3
     45c:	d1ab      	bne.n	3b6 <BN_sub+0x28>
     45e:	687b      	ldr	r3, [r7, #4]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
     460:	689b      	ldr	r3, [r3, #8]
     462:	62bb      	str	r3, [r7, #40]	; 0x28
     464:	e00d      	b.n	482 <_Min_Stack_Size+0x82>
     466:	687b      	ldr	r3, [r7, #4]
     468:	681a      	ldr	r2, [r3, #0]
     46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     46c:	00db      	lsls	r3, r3, #3
     46e:	18d1      	adds	r1, r2, r3
     470:	f04f 0200 	mov.w	r2, #0
     474:	f04f 0300 	mov.w	r3, #0
     478:	e9c1 2300 	strd	r2, r3, [r1]
     47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     47e:	3301      	adds	r3, #1
  return HAL_OK;
     480:	62bb      	str	r3, [r7, #40]	; 0x28
}
     482:	6abb      	ldr	r3, [r7, #40]	; 0x28
     484:	2b11      	cmp	r3, #17
     486:	d1ee      	bne.n	466 <_Min_Stack_Size+0x66>
     488:	687b      	ldr	r3, [r7, #4]
     48a:	689b      	ldr	r3, [r3, #8]
     48c:	627b      	str	r3, [r7, #36]	; 0x24
     48e:	e00f      	b.n	4b0 <_Min_Stack_Size+0xb0>
     490:	687b      	ldr	r3, [r7, #4]
     492:	681a      	ldr	r2, [r3, #0]
     494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     496:	00db      	lsls	r3, r3, #3
  }

  if(ItMode != ((uint32_t)RESET))
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
     498:	4413      	add	r3, r2
     49a:	e9d3 2300 	ldrd	r2, r3, [r3]
     49e:	4313      	orrs	r3, r2
     4a0:	d006      	beq.n	4b0 <_Min_Stack_Size+0xb0>
     4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     4a4:	3301      	adds	r3, #1
     4a6:	461a      	mov	r2, r3
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
     4a8:	687b      	ldr	r3, [r7, #4]
     4aa:	609a      	str	r2, [r3, #8]
     4ac:	2300      	movs	r3, #0
     4ae:	e008      	b.n	4c2 <_Min_Stack_Size+0xc2>
     4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     4b2:	1e5a      	subs	r2, r3, #1
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
     4b4:	627a      	str	r2, [r7, #36]	; 0x24
     4b6:	2b00      	cmp	r3, #0
     4b8:	d1ea      	bne.n	490 <_Min_Stack_Size+0x90>
     4ba:	687b      	ldr	r3, [r7, #4]
     4bc:	2200      	movs	r2, #0
     4be:	609a      	str	r2, [r3, #8]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
     4c0:	2300      	movs	r3, #0
     4c2:	4618      	mov	r0, r3
     4c4:	373c      	adds	r7, #60	; 0x3c
     4c6:	46bd      	mov	sp, r7
     4c8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
     4cc:	4770      	bx	lr

000004ce <BN_mul2>:
     4ce:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}

  dmatxdesclist->CurTxDesc = descidx;
     4d2:	b088      	sub	sp, #32
     4d4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
     4d6:	6078      	str	r0, [r7, #4]
}
     4d8:	6039      	str	r1, [r7, #0]

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
     4da:	f04f 0200 	mov.w	r2, #0
     4de:	f04f 0300 	mov.w	r3, #0
     4e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
     4e6:	f04f 0200 	mov.w	r2, #0
}
     4ea:	f04f 0300 	mov.w	r3, #0
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
     4ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
     4f2:	687b      	ldr	r3, [r7, #4]
     4f4:	689a      	ldr	r2, [r3, #8]
     4f6:	683b      	ldr	r3, [r7, #0]
     4f8:	609a      	str	r2, [r3, #8]
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
     4fa:	2300      	movs	r3, #0
     4fc:	60fb      	str	r3, [r7, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
     4fe:	e036      	b.n	56e <BN_mul2+0xa0>
     500:	687b      	ldr	r3, [r7, #4]
     502:	681a      	ldr	r2, [r3, #0]
     504:	68fb      	ldr	r3, [r7, #12]
     506:	00db      	lsls	r3, r3, #3
     508:	4413      	add	r3, r2
     50a:	e9d3 2300 	ldrd	r2, r3, [r3]
     50e:	2b00      	cmp	r3, #0
     510:	da06      	bge.n	520 <BN_mul2+0x52>
     512:	f04f 0201 	mov.w	r2, #1
     516:	f04f 0300 	mov.w	r3, #0
     51a:	e9c7 2304 	strd	r2, r3, [r7, #16]
     51e:	e005      	b.n	52c <BN_mul2+0x5e>
     520:	f04f 0200 	mov.w	r2, #0
     524:	f04f 0300 	mov.w	r3, #0
     528:	e9c7 2304 	strd	r2, r3, [r7, #16]
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	681a      	ldr	r2, [r3, #0]
     530:	68fb      	ldr	r3, [r7, #12]
     532:	00db      	lsls	r3, r3, #3
     534:	4413      	add	r3, r2
     536:	e9d3 2300 	ldrd	r2, r3, [r3]
     53a:	eb12 0802 	adds.w	r8, r2, r2
     53e:	eb43 0903 	adc.w	r9, r3, r3
     542:	4640      	mov	r0, r8
     544:	4649      	mov	r1, r9
     546:	683b      	ldr	r3, [r7, #0]
     548:	681a      	ldr	r2, [r3, #0]
     54a:	68fb      	ldr	r3, [r7, #12]
     54c:	00db      	lsls	r3, r3, #3
     54e:	18d6      	adds	r6, r2, r3
     550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     554:	ea40 0402 	orr.w	r4, r0, r2
     558:	ea41 0503 	orr.w	r5, r1, r3
     55c:	e9c6 4500 	strd	r4, r5, [r6]
     560:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     564:	e9c7 2306 	strd	r2, r3, [r7, #24]
     568:	68fb      	ldr	r3, [r7, #12]
     56a:	3301      	adds	r3, #1
     56c:	60fb      	str	r3, [r7, #12]
     56e:	683b      	ldr	r3, [r7, #0]
     570:	689a      	ldr	r2, [r3, #8]
     572:	68fb      	ldr	r3, [r7, #12]
     574:	429a      	cmp	r2, r3
     576:	d1c3      	bne.n	500 <BN_mul2+0x32>
     578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     57c:	1e51      	subs	r1, r2, #1
     57e:	430b      	orrs	r3, r1
     580:	d112      	bne.n	5a8 <BN_mul2+0xda>
     582:	683b      	ldr	r3, [r7, #0]
     584:	689b      	ldr	r3, [r3, #8]
     586:	2b11      	cmp	r3, #17
     588:	d00e      	beq.n	5a8 <BN_mul2+0xda>
     58a:	683b      	ldr	r3, [r7, #0]
     58c:	681a      	ldr	r2, [r3, #0]
     58e:	683b      	ldr	r3, [r7, #0]
     590:	689b      	ldr	r3, [r3, #8]
     592:	1c58      	adds	r0, r3, #1
     594:	6839      	ldr	r1, [r7, #0]
     596:	6088      	str	r0, [r1, #8]
     598:	00db      	lsls	r3, r3, #3
     59a:	18d1      	adds	r1, r2, r3
     59c:	f04f 0201 	mov.w	r2, #1
     5a0:	f04f 0300 	mov.w	r3, #0
     5a4:	e9c1 2300 	strd	r2, r3, [r1]
     5a8:	683b      	ldr	r3, [r7, #0]
     5aa:	689b      	ldr	r3, [r3, #8]
     5ac:	60bb      	str	r3, [r7, #8]
     5ae:	e00d      	b.n	5cc <BN_mul2+0xfe>
     5b0:	683b      	ldr	r3, [r7, #0]
     5b2:	681a      	ldr	r2, [r3, #0]
     5b4:	68bb      	ldr	r3, [r7, #8]
     5b6:	00db      	lsls	r3, r3, #3
     5b8:	18d1      	adds	r1, r2, r3
     5ba:	f04f 0200 	mov.w	r2, #0
     5be:	f04f 0300 	mov.w	r3, #0
     5c2:	e9c1 2300 	strd	r2, r3, [r1]
     5c6:	68bb      	ldr	r3, [r7, #8]
     5c8:	3301      	adds	r3, #1
     5ca:	60bb      	str	r3, [r7, #8]
     5cc:	68bb      	ldr	r3, [r7, #8]
     5ce:	2b11      	cmp	r3, #17
     5d0:	d1ee      	bne.n	5b0 <BN_mul2+0xe2>
     5d2:	2300      	movs	r3, #0
     5d4:	4618      	mov	r0, r3
     5d6:	3720      	adds	r7, #32
     5d8:	46bd      	mov	sp, r7
     5da:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
     5de:	4770      	bx	lr

000005e0 <BN_div2>:
     5e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
     5e4:	b088      	sub	sp, #32
     5e6:	af00      	add	r7, sp, #0
     5e8:	6078      	str	r0, [r7, #4]
     5ea:	6039      	str	r1, [r7, #0]
     5ec:	f04f 0200 	mov.w	r2, #0
     5f0:	f04f 0300 	mov.w	r3, #0
     5f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
     5f8:	f04f 0200 	mov.w	r2, #0
     5fc:	f04f 0300 	mov.w	r3, #0
     600:	e9c7 2304 	strd	r2, r3, [r7, #16]
     604:	687b      	ldr	r3, [r7, #4]
     606:	689a      	ldr	r2, [r3, #8]
     608:	683b      	ldr	r3, [r7, #0]
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
     60a:	609a      	str	r2, [r3, #8]
     60c:	683b      	ldr	r3, [r7, #0]
     60e:	689b      	ldr	r3, [r3, #8]
     610:	60fb      	str	r3, [r7, #12]
     612:	e039      	b.n	688 <BN_div2+0xa8>
     614:	687b      	ldr	r3, [r7, #4]
     616:	681a      	ldr	r2, [r3, #0]
     618:	68fb      	ldr	r3, [r7, #12]
     61a:	00db      	lsls	r3, r3, #3
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
     61c:	4413      	add	r3, r2
     61e:	e9d3 2300 	ldrd	r2, r3, [r3]
     622:	f002 0401 	and.w	r4, r2, #1
     626:	2500      	movs	r5, #0
     628:	ea54 0305 	orrs.w	r3, r4, r5
    hdma->State = HAL_DMA_STATE_READY;
     62c:	d006      	beq.n	63c <BN_div2+0x5c>
     62e:	f04f 0200 	mov.w	r2, #0
     632:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    __HAL_UNLOCK(hdma);
     636:	e9c7 2304 	strd	r2, r3, [r7, #16]
     63a:	e005      	b.n	648 <BN_div2+0x68>
     63c:	f04f 0200 	mov.w	r2, #0
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
     640:	f04f 0300 	mov.w	r3, #0
     644:	e9c7 2304 	strd	r2, r3, [r7, #16]
     648:	687b      	ldr	r3, [r7, #4]
     64a:	681a      	ldr	r2, [r3, #0]
     64c:	68fb      	ldr	r3, [r7, #12]
     64e:	00db      	lsls	r3, r3, #3
     650:	4413      	add	r3, r2
     652:	e9d3 0100 	ldrd	r0, r1, [r3]
     656:	f04f 0200 	mov.w	r2, #0
     65a:	f04f 0300 	mov.w	r3, #0
     65e:	0842      	lsrs	r2, r0, #1
     660:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
     664:	084b      	lsrs	r3, r1, #1
     666:	6839      	ldr	r1, [r7, #0]
     668:	6808      	ldr	r0, [r1, #0]
     66a:	68f9      	ldr	r1, [r7, #12]
     66c:	00c9      	lsls	r1, r1, #3
     66e:	1846      	adds	r6, r0, r1
     670:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
     674:	ea42 0800 	orr.w	r8, r2, r0
     678:	ea43 0901 	orr.w	r9, r3, r1
     67c:	e9c6 8900 	strd	r8, r9, [r6]
     680:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     684:	e9c7 2306 	strd	r2, r3, [r7, #24]
     688:	68fb      	ldr	r3, [r7, #12]
     68a:	1e5a      	subs	r2, r3, #1
     68c:	60fa      	str	r2, [r7, #12]
     68e:	2b00      	cmp	r3, #0
     690:	d1c0      	bne.n	614 <BN_div2+0x34>
     692:	683b      	ldr	r3, [r7, #0]
     694:	681a      	ldr	r2, [r3, #0]
     696:	683b      	ldr	r3, [r7, #0]
     698:	6899      	ldr	r1, [r3, #8]
     69a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
     69e:	440b      	add	r3, r1
     6a0:	00db      	lsls	r3, r3, #3
     6a2:	4413      	add	r3, r2
     6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
     6a8:	4313      	orrs	r3, r2
     6aa:	d108      	bne.n	6be <BN_div2+0xde>
     6ac:	683b      	ldr	r3, [r7, #0]
     6ae:	689b      	ldr	r3, [r3, #8]
     6b0:	2b00      	cmp	r3, #0
     6b2:	d004      	beq.n	6be <BN_div2+0xde>
     6b4:	683b      	ldr	r3, [r7, #0]
     6b6:	689b      	ldr	r3, [r3, #8]
     6b8:	1e5a      	subs	r2, r3, #1
     6ba:	683b      	ldr	r3, [r7, #0]
     6bc:	609a      	str	r2, [r3, #8]
     6be:	683b      	ldr	r3, [r7, #0]
     6c0:	689b      	ldr	r3, [r3, #8]
     6c2:	60bb      	str	r3, [r7, #8]
     6c4:	e00d      	b.n	6e2 <BN_div2+0x102>
     6c6:	683b      	ldr	r3, [r7, #0]
     6c8:	681a      	ldr	r2, [r3, #0]
     6ca:	68bb      	ldr	r3, [r7, #8]
     6cc:	00db      	lsls	r3, r3, #3
     6ce:	18d1      	adds	r1, r2, r3
     6d0:	f04f 0200 	mov.w	r2, #0
     6d4:	f04f 0300 	mov.w	r3, #0
     6d8:	e9c1 2300 	strd	r2, r3, [r1]
     6dc:	68bb      	ldr	r3, [r7, #8]
     6de:	3301      	adds	r3, #1
     6e0:	60bb      	str	r3, [r7, #8]
     6e2:	68bb      	ldr	r3, [r7, #8]
     6e4:	2b11      	cmp	r3, #17
     6e6:	d1ee      	bne.n	6c6 <BN_div2+0xe6>
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     6e8:	2300      	movs	r3, #0
     6ea:	4618      	mov	r0, r3
     6ec:	3720      	adds	r7, #32
     6ee:	46bd      	mov	sp, r7
     6f0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
     6f4:	4770      	bx	lr

000006f6 <BN_left>:
     6f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     6fa:	b08d      	sub	sp, #52	; 0x34
     6fc:	af00      	add	r7, sp, #0
     6fe:	60f8      	str	r0, [r7, #12]
     700:	60b9      	str	r1, [r7, #8]
     702:	607a      	str	r2, [r7, #4]
     704:	68bb      	ldr	r3, [r7, #8]
     706:	119b      	asrs	r3, r3, #6
     708:	623b      	str	r3, [r7, #32]
  return status;
     70a:	68bb      	ldr	r3, [r7, #8]
}
     70c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     710:	61fb      	str	r3, [r7, #28]
     712:	2110      	movs	r1, #16
     714:	2001      	movs	r0, #1
     716:	f001 fba7 	bl	1e68 <__calloc_veneer>
     71a:	4603      	mov	r3, r0
     71c:	61bb      	str	r3, [r7, #24]
     71e:	2108      	movs	r1, #8
     720:	2011      	movs	r0, #17
     722:	f001 fba1 	bl	1e68 <__calloc_veneer>
     726:	4603      	mov	r3, r0
     728:	461a      	mov	r2, r3
     72a:	69bb      	ldr	r3, [r7, #24]
     72c:	601a      	str	r2, [r3, #0]
     72e:	69bb      	ldr	r3, [r7, #24]
     730:	681a      	ldr	r2, [r3, #0]
     732:	6a3b      	ldr	r3, [r7, #32]
     734:	00db      	lsls	r3, r3, #3
     736:	18d0      	adds	r0, r2, r3
     738:	68fb      	ldr	r3, [r7, #12]
     73a:	6819      	ldr	r1, [r3, #0]
     73c:	6a3b      	ldr	r3, [r7, #32]
     73e:	f1c3 0311 	rsb	r3, r3, #17
     742:	461a      	mov	r2, r3
     744:	68fb      	ldr	r3, [r7, #12]
     746:	689b      	ldr	r3, [r3, #8]
     748:	4293      	cmp	r3, r2
     74a:	bf28      	it	cs
     74c:	4613      	movcs	r3, r2
     74e:	00db      	lsls	r3, r3, #3
     750:	461a      	mov	r2, r3
     752:	f001 fb91 	bl	1e78 <__memcpy_veneer>
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
     756:	f04f 0200 	mov.w	r2, #0
     75a:	f04f 0300 	mov.w	r3, #0
     75e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
     762:	f04f 0200 	mov.w	r2, #0
     766:	f04f 0300 	mov.w	r3, #0
     76a:	e9c7 2304 	strd	r2, r3, [r7, #16]
     76e:	68fb      	ldr	r3, [r7, #12]
     770:	689a      	ldr	r2, [r3, #8]
     772:	6a3b      	ldr	r3, [r7, #32]
    {
      temp = hpcd->Instance->GOTGINT;
     774:	4413      	add	r3, r2
     776:	2b11      	cmp	r3, #17
     778:	bf28      	it	cs
     77a:	2311      	movcs	r3, #17

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
     77c:	461a      	mov	r2, r3
     77e:	69bb      	ldr	r3, [r7, #24]
     780:	609a      	str	r2, [r3, #8]
     782:	6a3b      	ldr	r3, [r7, #32]
     784:	627b      	str	r3, [r7, #36]	; 0x24
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
     786:	e054      	b.n	832 <BN_left+0x13c>
     788:	69bb      	ldr	r3, [r7, #24]
     78a:	681a      	ldr	r2, [r3, #0]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
     78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     78e:	00db      	lsls	r3, r3, #3
     790:	4413      	add	r3, r2
     792:	e9d3 2300 	ldrd	r2, r3, [r3]
     796:	69f9      	ldr	r1, [r7, #28]
     798:	f1c1 0140 	rsb	r1, r1, #64	; 0x40
     79c:	f1c1 0620 	rsb	r6, r1, #32
    }
  }
}
     7a0:	f1a1 0020 	sub.w	r0, r1, #32
     7a4:	fa22 f801 	lsr.w	r8, r2, r1
          break;
     7a8:	fa03 f606 	lsl.w	r6, r3, r6
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
     7ac:	ea48 0806 	orr.w	r8, r8, r6
     7b0:	fa23 f000 	lsr.w	r0, r3, r0
     7b4:	ea48 0800 	orr.w	r8, r8, r0
     7b8:	fa23 f901 	lsr.w	r9, r3, r1
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
     7bc:	e9c7 8904 	strd	r8, r9, [r7, #16]
     7c0:	69bb      	ldr	r3, [r7, #24]
     7c2:	681a      	ldr	r2, [r3, #0]
          frequency = pll2_clocks.PLL2_R_Frequency;
     7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     7c6:	00db      	lsls	r3, r3, #3
          break;
     7c8:	4413      	add	r3, r2
          frequency = 0;
     7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
          break;
     7ce:	69b9      	ldr	r1, [r7, #24]
          frequency = 0;
     7d0:	6808      	ldr	r0, [r1, #0]
     7d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
          break;
     7d4:	00c9      	lsls	r1, r1, #3
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
     7d6:	eb00 0c01 	add.w	ip, r0, r1
     7da:	69f9      	ldr	r1, [r7, #28]
     7dc:	f1a1 0620 	sub.w	r6, r1, #32
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
     7e0:	f1c1 0020 	rsb	r0, r1, #32
     7e4:	fa03 f501 	lsl.w	r5, r3, r1
     7e8:	fa02 f606 	lsl.w	r6, r2, r6
      switch (srcclk)
     7ec:	4335      	orrs	r5, r6
     7ee:	fa22 f000 	lsr.w	r0, r2, r0
     7f2:	4305      	orrs	r5, r0
     7f4:	fa02 f401 	lsl.w	r4, r2, r1
     7f8:	e9cc 4500 	strd	r4, r5, [ip]
     7fc:	69bb      	ldr	r3, [r7, #24]
     7fe:	681a      	ldr	r2, [r3, #0]
     800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     802:	00db      	lsls	r3, r3, #3
     804:	4413      	add	r3, r2
     806:	e9d3 0100 	ldrd	r0, r1, [r3]
     80a:	69bb      	ldr	r3, [r7, #24]
     80c:	681a      	ldr	r2, [r3, #0]
     80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     810:	00db      	lsls	r3, r3, #3
     812:	18d6      	adds	r6, r2, r3
     814:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     818:	ea40 0a02 	orr.w	sl, r0, r2
     81c:	ea41 0b03 	orr.w	fp, r1, r3
     820:	e9c6 ab00 	strd	sl, fp, [r6]
     824:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     828:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
     82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     82e:	3301      	adds	r3, #1
     830:	627b      	str	r3, [r7, #36]	; 0x24
     832:	69fb      	ldr	r3, [r7, #28]
     834:	2b00      	cmp	r3, #0
     836:	d004      	beq.n	842 <BN_left+0x14c>
     838:	69bb      	ldr	r3, [r7, #24]
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
     83a:	689a      	ldr	r2, [r3, #8]
     83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     83e:	429a      	cmp	r2, r3
          break;
     840:	d1a2      	bne.n	788 <BN_left+0x92>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
     842:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     846:	4313      	orrs	r3, r2
     848:	d010      	beq.n	86c <BN_left+0x176>
     84a:	69bb      	ldr	r3, [r7, #24]
     84c:	689b      	ldr	r3, [r3, #8]
     84e:	2b11      	cmp	r3, #17
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
     850:	d00c      	beq.n	86c <BN_left+0x176>
     852:	69bb      	ldr	r3, [r7, #24]
     854:	681a      	ldr	r2, [r3, #0]
     856:	69bb      	ldr	r3, [r7, #24]
     858:	689b      	ldr	r3, [r3, #8]
          frequency = pll2_clocks.PLL2_Q_Frequency;
     85a:	1c58      	adds	r0, r3, #1
     85c:	69b9      	ldr	r1, [r7, #24]
          break;
     85e:	6088      	str	r0, [r1, #8]
          frequency = 0;
     860:	00db      	lsls	r3, r3, #3
     862:	18d1      	adds	r1, r2, r3
          break;
     864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
     868:	e9c1 2300 	strd	r2, r3, [r1]
     86c:	687b      	ldr	r3, [r7, #4]
     86e:	6818      	ldr	r0, [r3, #0]
     870:	69bb      	ldr	r3, [r7, #24]
     872:	681b      	ldr	r3, [r3, #0]
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
     874:	2288      	movs	r2, #136	; 0x88
     876:	4619      	mov	r1, r3
     878:	f001 fafe 	bl	1e78 <__memcpy_veneer>
     87c:	69bb      	ldr	r3, [r7, #24]
          frequency = pll3_clocks.PLL3_Q_Frequency;
     87e:	685a      	ldr	r2, [r3, #4]
     880:	687b      	ldr	r3, [r7, #4]
          break;
     882:	605a      	str	r2, [r3, #4]
          frequency = 0;
     884:	69bb      	ldr	r3, [r7, #24]
     886:	689a      	ldr	r2, [r3, #8]
          break;
     888:	687b      	ldr	r3, [r7, #4]
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
     88a:	609a      	str	r2, [r3, #8]
     88c:	69bb      	ldr	r3, [r7, #24]
     88e:	681b      	ldr	r3, [r3, #0]
     890:	4618      	mov	r0, r3
     892:	f001 fad1 	bl	1e38 <__free_veneer>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
     896:	69b8      	ldr	r0, [r7, #24]
     898:	f001 face 	bl	1e38 <__free_veneer>
     89c:	2300      	movs	r3, #0
     89e:	4618      	mov	r0, r3
     8a0:	3734      	adds	r7, #52	; 0x34
     8a2:	46bd      	mov	sp, r7
     8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000008a8 <BN_cmp>:
          break;
     8a8:	b580      	push	{r7, lr}
          frequency = 0;
     8aa:	b084      	sub	sp, #16
     8ac:	af00      	add	r7, sp, #0
          break;
     8ae:	6078      	str	r0, [r7, #4]
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
     8b0:	6039      	str	r1, [r7, #0]
     8b2:	2210      	movs	r2, #16
     8b4:	6839      	ldr	r1, [r7, #0]
     8b6:	6878      	ldr	r0, [r7, #4]
     8b8:	f001 fada 	bl	1e70 <__memcmp_veneer>
     8bc:	4603      	mov	r3, r0
          frequency = CSI_VALUE;
     8be:	2b00      	cmp	r3, #0
     8c0:	d101      	bne.n	8c6 <BN_cmp+0x1e>
          break;
     8c2:	2300      	movs	r3, #0
           frequency = 0;
     8c4:	e044      	b.n	950 <BN_cmp+0xa8>
     8c6:	687b      	ldr	r3, [r7, #4]
          break;
     8c8:	689a      	ldr	r2, [r3, #8]
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
     8ca:	683b      	ldr	r3, [r7, #0]
     8cc:	689b      	ldr	r3, [r3, #8]
     8ce:	429a      	cmp	r2, r3
     8d0:	d901      	bls.n	8d6 <BN_cmp+0x2e>
     8d2:	2301      	movs	r3, #1
     8d4:	e03c      	b.n	950 <BN_cmp+0xa8>
     8d6:	687b      	ldr	r3, [r7, #4]
          frequency = HSE_VALUE;
     8d8:	689a      	ldr	r2, [r3, #8]
     8da:	683b      	ldr	r3, [r7, #0]
          break;
     8dc:	689b      	ldr	r3, [r3, #8]
          frequency = 0;
     8de:	429a      	cmp	r2, r3
     8e0:	d202      	bcs.n	8e8 <BN_cmp+0x40>
          break;
     8e2:	f04f 33ff 	mov.w	r3, #4294967295
          frequency = 0;
     8e6:	e033      	b.n	950 <BN_cmp+0xa8>
          break;
     8e8:	687b      	ldr	r3, [r7, #4]
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
     8ea:	689b      	ldr	r3, [r3, #8]
     8ec:	60fb      	str	r3, [r7, #12]
     8ee:	e029      	b.n	944 <BN_cmp+0x9c>
     8f0:	687b      	ldr	r3, [r7, #4]
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
     8f2:	681a      	ldr	r2, [r3, #0]
     8f4:	68fb      	ldr	r3, [r7, #12]
     8f6:	00db      	lsls	r3, r3, #3
     8f8:	4413      	add	r3, r2
     8fa:	e9d3 0100 	ldrd	r0, r1, [r3]
      switch (srcclk)
     8fe:	683b      	ldr	r3, [r7, #0]
     900:	681a      	ldr	r2, [r3, #0]
     902:	68fb      	ldr	r3, [r7, #12]
     904:	00db      	lsls	r3, r3, #3
     906:	4413      	add	r3, r2
     908:	e9d3 2300 	ldrd	r2, r3, [r3]
     90c:	4299      	cmp	r1, r3
     90e:	bf08      	it	eq
     910:	4290      	cmpeq	r0, r2
     912:	d100      	bne.n	916 <BN_cmp+0x6e>
     914:	e016      	b.n	944 <BN_cmp+0x9c>
     916:	687b      	ldr	r3, [r7, #4]
     918:	681a      	ldr	r2, [r3, #0]
     91a:	68fb      	ldr	r3, [r7, #12]
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
     91c:	00db      	lsls	r3, r3, #3
     91e:	4413      	add	r3, r2
     920:	e9d3 2300 	ldrd	r2, r3, [r3]
     924:	6839      	ldr	r1, [r7, #0]
     926:	6808      	ldr	r0, [r1, #0]
     928:	68f9      	ldr	r1, [r7, #12]
          frequency = HSE_VALUE;
     92a:	00c9      	lsls	r1, r1, #3
     92c:	4401      	add	r1, r0
          break;
     92e:	e9d1 0100 	ldrd	r0, r1, [r1]
          frequency = 0;
     932:	4290      	cmp	r0, r2
          break;
     934:	eb71 0303 	sbcs.w	r3, r1, r3
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
     938:	d201      	bcs.n	93e <BN_cmp+0x96>
     93a:	2301      	movs	r3, #1
     93c:	e008      	b.n	950 <BN_cmp+0xa8>
     93e:	f04f 33ff 	mov.w	r3, #4294967295
     942:	e005      	b.n	950 <BN_cmp+0xa8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
     944:	68fb      	ldr	r3, [r7, #12]
     946:	1e5a      	subs	r2, r3, #1
     948:	60fa      	str	r2, [r7, #12]
     94a:	2b00      	cmp	r3, #0
     94c:	d1d0      	bne.n	8f0 <BN_cmp+0x48>
          frequency = pll1_clocks.PLL1_Q_Frequency;
     94e:	2300      	movs	r3, #0
     950:	4618      	mov	r0, r3
          break;
     952:	3710      	adds	r7, #16
          frequency = 0;
     954:	46bd      	mov	sp, r7
     956:	bd80      	pop	{r7, pc}

00000958 <BN_mul>:
          break;
     958:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
     95c:	b08e      	sub	sp, #56	; 0x38
     95e:	af00      	add	r7, sp, #0
     960:	60f8      	str	r0, [r7, #12]
     962:	60b9      	str	r1, [r7, #8]
     964:	607a      	str	r2, [r7, #4]
     966:	603b      	str	r3, [r7, #0]
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
     968:	68b9      	ldr	r1, [r7, #8]
     96a:	68f8      	ldr	r0, [r7, #12]
     96c:	f7ff ff9c 	bl	8a8 <BN_cmp>
     970:	4603      	mov	r3, r0
          frequency = pll2_clocks.PLL2_Q_Frequency;
     972:	f1b3 3fff 	cmp.w	r3, #4294967295
          break;
     976:	d105      	bne.n	984 <BN_mul+0x2c>
          frequency = 0;
     978:	68fb      	ldr	r3, [r7, #12]
     97a:	623b      	str	r3, [r7, #32]
          break;
     97c:	68bb      	ldr	r3, [r7, #8]
          frequency = 0;
     97e:	60fb      	str	r3, [r7, #12]
     980:	6a3b      	ldr	r3, [r7, #32]
          break;
     982:	60bb      	str	r3, [r7, #8]
      frequency = 0;
     984:	2110      	movs	r1, #16
     986:	2001      	movs	r0, #1
  return frequency;
     988:	f001 fa6e 	bl	1e68 <__calloc_veneer>
}
     98c:	4603      	mov	r3, r0
     98e:	61fb      	str	r3, [r7, #28]
     990:	2108      	movs	r1, #8
     992:	2011      	movs	r0, #17
     994:	f001 fa68 	bl	1e68 <__calloc_veneer>
     998:	4603      	mov	r3, r0
     99a:	461a      	mov	r2, r3
     99c:	69fb      	ldr	r3, [r7, #28]
     99e:	601a      	str	r2, [r3, #0]
     9a0:	2110      	movs	r1, #16
     9a2:	2001      	movs	r0, #1
        bn_x = bn_y;
        bn_y = bn_temp;
    }
    BN *result_temp, *bn_x_left_shift;
    BN_NEW(result_temp);
    BN_NEW(bn_x_left_shift);
     9a4:	f001 fa60 	bl	1e68 <__calloc_veneer>
     9a8:	4603      	mov	r3, r0
     9aa:	61bb      	str	r3, [r7, #24]
     9ac:	2108      	movs	r1, #8
     9ae:	2011      	movs	r0, #17
     9b0:	f001 fa5a 	bl	1e68 <__calloc_veneer>
     9b4:	4603      	mov	r3, r0
     9b6:	461a      	mov	r2, r3
     9b8:	69bb      	ldr	r3, [r7, #24]
     9ba:	601a      	str	r2, [r3, #0]
    BN_COPY(bn_x_left_shift, bn_x);
     9bc:	69bb      	ldr	r3, [r7, #24]
     9be:	6818      	ldr	r0, [r3, #0]
     9c0:	68fb      	ldr	r3, [r7, #12]
     9c2:	681b      	ldr	r3, [r3, #0]
     9c4:	2288      	movs	r2, #136	; 0x88
     9c6:	4619      	mov	r1, r3
     9c8:	f001 fa56 	bl	1e78 <__memcpy_veneer>
     9cc:	68fb      	ldr	r3, [r7, #12]
     9ce:	685a      	ldr	r2, [r3, #4]
     9d0:	69bb      	ldr	r3, [r7, #24]
     9d2:	605a      	str	r2, [r3, #4]
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	689a      	ldr	r2, [r3, #8]
     9d8:	69bb      	ldr	r3, [r7, #24]
     9da:	609a      	str	r2, [r3, #8]
    uint64_t bn_y_data;
    int32_t bn_y_high_length = BN_high_length(bn_y);
     9dc:	68b8      	ldr	r0, [r7, #8]
     9de:	f7ff fbcc 	bl	17a <BN_high_length>
     9e2:	6178      	str	r0, [r7, #20]
    for (int32_t i = 0; i != bn_y->uint64_length; i++) {
     9e4:	2300      	movs	r3, #0
     9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
     9e8:	e09e      	b.n	b28 <BN_mul+0x1d0>
        bn_y_data = bn_y->data[i];
     9ea:	68bb      	ldr	r3, [r7, #8]
     9ec:	681a      	ldr	r2, [r3, #0]
     9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     9f0:	00db      	lsls	r3, r3, #3
     9f2:	4413      	add	r3, r2
     9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
     9f8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        if (bn_x->uint64_length + i + 1 < bn_n->uint64_length) {
     9fc:	68fb      	ldr	r3, [r7, #12]
     9fe:	689a      	ldr	r2, [r3, #8]
     a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a02:	4413      	add	r3, r2
     a04:	1c5a      	adds	r2, r3, #1
     a06:	687b      	ldr	r3, [r7, #4]
     a08:	689b      	ldr	r3, [r3, #8]
     a0a:	429a      	cmp	r2, r3
     a0c:	d22f      	bcs.n	a6e <BN_mul+0x116>
            for (int32_t j = 0; j != 64 && 0 != bn_y_data; j++) {
     a0e:	2300      	movs	r3, #0
     a10:	62bb      	str	r3, [r7, #40]	; 0x28
     a12:	e024      	b.n	a5e <BN_mul+0x106>
                if (1 & bn_y_data) {
     a14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
     a18:	f002 0401 	and.w	r4, r2, #1
     a1c:	2500      	movs	r5, #0
     a1e:	ea54 0305 	orrs.w	r3, r4, r5
     a22:	d00d      	beq.n	a40 <BN_mul+0xe8>
                    BN_left(bn_x, (i << 6) + j, bn_x_left_shift);
     a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a26:	019a      	lsls	r2, r3, #6
     a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
     a2a:	4413      	add	r3, r2
     a2c:	69ba      	ldr	r2, [r7, #24]
     a2e:	4619      	mov	r1, r3
     a30:	68f8      	ldr	r0, [r7, #12]
     a32:	f7ff fe60 	bl	6f6 <BN_left>
                    BN_add(result_temp, bn_x_left_shift, result_temp);
     a36:	69fa      	ldr	r2, [r7, #28]
     a38:	69b9      	ldr	r1, [r7, #24]
     a3a:	69f8      	ldr	r0, [r7, #28]
     a3c:	f7ff fc0a 	bl	254 <BN_add>
                }
                bn_y_data >>= 1;
     a40:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
     a44:	f04f 0200 	mov.w	r2, #0
     a48:	f04f 0300 	mov.w	r3, #0
     a4c:	0842      	lsrs	r2, r0, #1
     a4e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
     a52:	084b      	lsrs	r3, r1, #1
     a54:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
            for (int32_t j = 0; j != 64 && 0 != bn_y_data; j++) {
     a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
     a5a:	3301      	adds	r3, #1
     a5c:	62bb      	str	r3, [r7, #40]	; 0x28
     a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
     a60:	2b40      	cmp	r3, #64	; 0x40
     a62:	d05e      	beq.n	b22 <BN_mul+0x1ca>
     a64:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
     a68:	4313      	orrs	r3, r2
     a6a:	d1d3      	bne.n	a14 <BN_mul+0xbc>
     a6c:	e059      	b.n	b22 <BN_mul+0x1ca>
            }
        } else {
            if (bn_x->uint64_length + i + 1 == bn_n->uint64_length) {
     a6e:	68fb      	ldr	r3, [r7, #12]
     a70:	689a      	ldr	r2, [r3, #8]
     a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a74:	4413      	add	r3, r2
     a76:	1c5a      	adds	r2, r3, #1
     a78:	687b      	ldr	r3, [r7, #4]
     a7a:	689b      	ldr	r3, [r3, #8]
     a7c:	429a      	cmp	r2, r3
     a7e:	d106      	bne.n	a8e <BN_mul+0x136>
                BN_left(bn_x, i << 6, bn_x_left_shift);
     a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     a82:	019b      	lsls	r3, r3, #6
     a84:	69ba      	ldr	r2, [r7, #24]
     a86:	4619      	mov	r1, r3
     a88:	68f8      	ldr	r0, [r7, #12]
     a8a:	f7ff fe34 	bl	6f6 <BN_left>
            }
            for (int32_t j = 0; j != 64; j++) {
     a8e:	2300      	movs	r3, #0
     a90:	627b      	str	r3, [r7, #36]	; 0x24
     a92:	e043      	b.n	b1c <BN_mul+0x1c4>
                if (1 & bn_y_data) {
     a94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
     a98:	f002 0801 	and.w	r8, r2, #1
     a9c:	f04f 0900 	mov.w	r9, #0
     aa0:	ea58 0309 	orrs.w	r3, r8, r9
     aa4:	d010      	beq.n	ac8 <BN_mul+0x170>
                    BN_add(result_temp, bn_x_left_shift, result_temp);
     aa6:	69fa      	ldr	r2, [r7, #28]
     aa8:	69b9      	ldr	r1, [r7, #24]
     aaa:	69f8      	ldr	r0, [r7, #28]
     aac:	f7ff fbd2 	bl	254 <BN_add>
                    BN_SUB_MOD_SELF(result_temp, bn_n);
     ab0:	6879      	ldr	r1, [r7, #4]
     ab2:	69f8      	ldr	r0, [r7, #28]
     ab4:	f7ff fef8 	bl	8a8 <BN_cmp>
     ab8:	4603      	mov	r3, r0
     aba:	2b01      	cmp	r3, #1
     abc:	d104      	bne.n	ac8 <BN_mul+0x170>
     abe:	69fa      	ldr	r2, [r7, #28]
     ac0:	6879      	ldr	r1, [r7, #4]
     ac2:	69f8      	ldr	r0, [r7, #28]
     ac4:	f7ff fc63 	bl	38e <BN_sub>
                }
                BN_mul2(bn_x_left_shift, bn_x_left_shift);
     ac8:	69b9      	ldr	r1, [r7, #24]
     aca:	69b8      	ldr	r0, [r7, #24]
     acc:	f7ff fcff 	bl	4ce <BN_mul2>
                BN_SUB_MOD_SELF(bn_x_left_shift, bn_n);
     ad0:	6879      	ldr	r1, [r7, #4]
     ad2:	69b8      	ldr	r0, [r7, #24]
     ad4:	f7ff fee8 	bl	8a8 <BN_cmp>
     ad8:	4603      	mov	r3, r0
     ada:	2b01      	cmp	r3, #1
     adc:	d104      	bne.n	ae8 <BN_mul+0x190>
     ade:	69ba      	ldr	r2, [r7, #24]
     ae0:	6879      	ldr	r1, [r7, #4]
     ae2:	69b8      	ldr	r0, [r7, #24]
     ae4:	f7ff fc53 	bl	38e <BN_sub>
                bn_y_data >>= 1;
     ae8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
     aec:	f04f 0200 	mov.w	r2, #0
     af0:	f04f 0300 	mov.w	r3, #0
     af4:	0842      	lsrs	r2, r0, #1
     af6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
     afa:	084b      	lsrs	r3, r1, #1
     afc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                if (i == bn_y->uint64_length - 1 && j == bn_y_high_length - 1) {
     b00:	68bb      	ldr	r3, [r7, #8]
     b02:	689b      	ldr	r3, [r3, #8]
     b04:	1e5a      	subs	r2, r3, #1
     b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b08:	429a      	cmp	r2, r3
     b0a:	d104      	bne.n	b16 <BN_mul+0x1be>
     b0c:	697b      	ldr	r3, [r7, #20]
     b0e:	3b01      	subs	r3, #1
     b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     b12:	429a      	cmp	r2, r3
     b14:	d00f      	beq.n	b36 <BN_mul+0x1de>
            for (int32_t j = 0; j != 64; j++) {
     b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b18:	3301      	adds	r3, #1
     b1a:	627b      	str	r3, [r7, #36]	; 0x24
     b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b1e:	2b40      	cmp	r3, #64	; 0x40
     b20:	d1b8      	bne.n	a94 <BN_mul+0x13c>
    for (int32_t i = 0; i != bn_y->uint64_length; i++) {
     b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b24:	3301      	adds	r3, #1
     b26:	62fb      	str	r3, [r7, #44]	; 0x2c
     b28:	68bb      	ldr	r3, [r7, #8]
     b2a:	689a      	ldr	r2, [r3, #8]
     b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b2e:	429a      	cmp	r2, r3
     b30:	f47f af5b 	bne.w	9ea <BN_mul+0x92>
                    goto END;
                }
            }
        }
    }
    END:
     b34:	e000      	b.n	b38 <BN_mul+0x1e0>
                    goto END;
     b36:	bf00      	nop
    BN_COPY(result, result_temp);
     b38:	683b      	ldr	r3, [r7, #0]
     b3a:	6818      	ldr	r0, [r3, #0]
     b3c:	69fb      	ldr	r3, [r7, #28]
     b3e:	681b      	ldr	r3, [r3, #0]
     b40:	2288      	movs	r2, #136	; 0x88
     b42:	4619      	mov	r1, r3
     b44:	f001 f998 	bl	1e78 <__memcpy_veneer>
     b48:	69fb      	ldr	r3, [r7, #28]
     b4a:	685a      	ldr	r2, [r3, #4]
     b4c:	683b      	ldr	r3, [r7, #0]
     b4e:	605a      	str	r2, [r3, #4]
     b50:	69fb      	ldr	r3, [r7, #28]
     b52:	689a      	ldr	r2, [r3, #8]
     b54:	683b      	ldr	r3, [r7, #0]
     b56:	609a      	str	r2, [r3, #8]
    BN_DEL(result_temp);
     b58:	69fb      	ldr	r3, [r7, #28]
     b5a:	681b      	ldr	r3, [r3, #0]
     b5c:	4618      	mov	r0, r3
     b5e:	f001 f96b 	bl	1e38 <__free_veneer>
     b62:	69f8      	ldr	r0, [r7, #28]
     b64:	f001 f968 	bl	1e38 <__free_veneer>
    BN_DEL(bn_x_left_shift);
     b68:	69bb      	ldr	r3, [r7, #24]
     b6a:	681b      	ldr	r3, [r3, #0]
     b6c:	4618      	mov	r0, r3
     b6e:	f001 f963 	bl	1e38 <__free_veneer>
     b72:	69b8      	ldr	r0, [r7, #24]
     b74:	f001 f960 	bl	1e38 <__free_veneer>
    return EXIT_SUCCESS;
     b78:	2300      	movs	r3, #0
}
     b7a:	4618      	mov	r0, r3
     b7c:	3738      	adds	r7, #56	; 0x38
     b7e:	46bd      	mov	sp, r7
     b80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

00000b84 <BN_pow_fast>:

SECTION_FLASH int32_t BN_pow_fast(const BN *bn_x, const BN *e, const BN *n, BN *bn_y) {
     b84:	b5b0      	push	{r4, r5, r7, lr}
     b86:	b08a      	sub	sp, #40	; 0x28
     b88:	af00      	add	r7, sp, #0
     b8a:	60f8      	str	r0, [r7, #12]
     b8c:	60b9      	str	r1, [r7, #8]
     b8e:	607a      	str	r2, [r7, #4]
     b90:	603b      	str	r3, [r7, #0]
    BN *bn_x_temp;
    BN_NEW(bn_x_temp);
     b92:	2110      	movs	r1, #16
     b94:	2001      	movs	r0, #1
     b96:	f001 f967 	bl	1e68 <__calloc_veneer>
     b9a:	4603      	mov	r3, r0
     b9c:	617b      	str	r3, [r7, #20]
     b9e:	2108      	movs	r1, #8
     ba0:	2011      	movs	r0, #17
     ba2:	f001 f961 	bl	1e68 <__calloc_veneer>
     ba6:	4603      	mov	r3, r0
     ba8:	461a      	mov	r2, r3
     baa:	697b      	ldr	r3, [r7, #20]
     bac:	601a      	str	r2, [r3, #0]
    uint64_t temp;
    BN_COPY(bn_x_temp, bn_x);
     bae:	697b      	ldr	r3, [r7, #20]
     bb0:	6818      	ldr	r0, [r3, #0]
     bb2:	68fb      	ldr	r3, [r7, #12]
     bb4:	681b      	ldr	r3, [r3, #0]
     bb6:	2288      	movs	r2, #136	; 0x88
     bb8:	4619      	mov	r1, r3
     bba:	f001 f95d 	bl	1e78 <__memcpy_veneer>
     bbe:	68fb      	ldr	r3, [r7, #12]
     bc0:	685a      	ldr	r2, [r3, #4]
     bc2:	697b      	ldr	r3, [r7, #20]
     bc4:	605a      	str	r2, [r3, #4]
     bc6:	68fb      	ldr	r3, [r7, #12]
     bc8:	689a      	ldr	r2, [r3, #8]
     bca:	697b      	ldr	r3, [r7, #20]
     bcc:	609a      	str	r2, [r3, #8]
    BN_DEC2BN(1, bn_y);
     bce:	683b      	ldr	r3, [r7, #0]
     bd0:	681b      	ldr	r3, [r3, #0]
     bd2:	2288      	movs	r2, #136	; 0x88
     bd4:	2100      	movs	r1, #0
     bd6:	4618      	mov	r0, r3
     bd8:	f001 f952 	bl	1e80 <__memset_veneer>
     bdc:	683b      	ldr	r3, [r7, #0]
     bde:	2200      	movs	r2, #0
     be0:	605a      	str	r2, [r3, #4]
     be2:	683b      	ldr	r3, [r7, #0]
     be4:	2200      	movs	r2, #0
     be6:	609a      	str	r2, [r3, #8]
     be8:	683b      	ldr	r3, [r7, #0]
     bea:	6819      	ldr	r1, [r3, #0]
     bec:	f04f 0201 	mov.w	r2, #1
     bf0:	f04f 0300 	mov.w	r3, #0
     bf4:	e9c1 2300 	strd	r2, r3, [r1]
     bf8:	683b      	ldr	r3, [r7, #0]
     bfa:	2201      	movs	r2, #1
     bfc:	609a      	str	r2, [r3, #8]
    int32_t e_high_length = BN_high_length(e);
     bfe:	68b8      	ldr	r0, [r7, #8]
     c00:	f7ff fabb 	bl	17a <BN_high_length>
     c04:	6138      	str	r0, [r7, #16]
    for (int32_t i = 0; i != e->uint64_length; i++) {
     c06:	2300      	movs	r3, #0
     c08:	61fb      	str	r3, [r7, #28]
     c0a:	e03f      	b.n	c8c <BN_pow_fast+0x108>
        temp = e->data[i];
     c0c:	68bb      	ldr	r3, [r7, #8]
     c0e:	681a      	ldr	r2, [r3, #0]
     c10:	69fb      	ldr	r3, [r7, #28]
     c12:	00db      	lsls	r3, r3, #3
     c14:	4413      	add	r3, r2
     c16:	e9d3 2300 	ldrd	r2, r3, [r3]
     c1a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        for (int32_t j = 0; 64 != j; j++) {
     c1e:	2300      	movs	r3, #0
     c20:	61bb      	str	r3, [r7, #24]
     c22:	e02d      	b.n	c80 <BN_pow_fast+0xfc>
            if (temp & 1) {
     c24:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
     c28:	f002 0401 	and.w	r4, r2, #1
     c2c:	2500      	movs	r5, #0
     c2e:	ea54 0305 	orrs.w	r3, r4, r5
     c32:	d005      	beq.n	c40 <BN_pow_fast+0xbc>
                BN_mul(bn_y, bn_x_temp, n, bn_y);
     c34:	683b      	ldr	r3, [r7, #0]
     c36:	687a      	ldr	r2, [r7, #4]
     c38:	6979      	ldr	r1, [r7, #20]
     c3a:	6838      	ldr	r0, [r7, #0]
     c3c:	f7ff fe8c 	bl	958 <BN_mul>
            }
            temp >>= 1;
     c40:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
     c44:	f04f 0200 	mov.w	r2, #0
     c48:	f04f 0300 	mov.w	r3, #0
     c4c:	0842      	lsrs	r2, r0, #1
     c4e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
     c52:	084b      	lsrs	r3, r1, #1
     c54:	e9c7 2308 	strd	r2, r3, [r7, #32]
            BN_mul(bn_x_temp, bn_x_temp, n, bn_x_temp);
     c58:	697b      	ldr	r3, [r7, #20]
     c5a:	687a      	ldr	r2, [r7, #4]
     c5c:	6979      	ldr	r1, [r7, #20]
     c5e:	6978      	ldr	r0, [r7, #20]
     c60:	f7ff fe7a 	bl	958 <BN_mul>
            if (i == e->uint64_length - 1 && j == e_high_length - 1) {
     c64:	68bb      	ldr	r3, [r7, #8]
     c66:	689b      	ldr	r3, [r3, #8]
     c68:	1e5a      	subs	r2, r3, #1
     c6a:	69fb      	ldr	r3, [r7, #28]
     c6c:	429a      	cmp	r2, r3
     c6e:	d104      	bne.n	c7a <BN_pow_fast+0xf6>
     c70:	693b      	ldr	r3, [r7, #16]
     c72:	3b01      	subs	r3, #1
     c74:	69ba      	ldr	r2, [r7, #24]
     c76:	429a      	cmp	r2, r3
     c78:	d00e      	beq.n	c98 <BN_pow_fast+0x114>
        for (int32_t j = 0; 64 != j; j++) {
     c7a:	69bb      	ldr	r3, [r7, #24]
     c7c:	3301      	adds	r3, #1
     c7e:	61bb      	str	r3, [r7, #24]
     c80:	69bb      	ldr	r3, [r7, #24]
     c82:	2b40      	cmp	r3, #64	; 0x40
     c84:	d1ce      	bne.n	c24 <BN_pow_fast+0xa0>
    for (int32_t i = 0; i != e->uint64_length; i++) {
     c86:	69fb      	ldr	r3, [r7, #28]
     c88:	3301      	adds	r3, #1
     c8a:	61fb      	str	r3, [r7, #28]
     c8c:	68bb      	ldr	r3, [r7, #8]
     c8e:	689a      	ldr	r2, [r3, #8]
     c90:	69fb      	ldr	r3, [r7, #28]
     c92:	429a      	cmp	r2, r3
     c94:	d1ba      	bne.n	c0c <BN_pow_fast+0x88>
                goto END;
            }
        }
    }
    END:
     c96:	e000      	b.n	c9a <BN_pow_fast+0x116>
                goto END;
     c98:	bf00      	nop
    BN_DEL(bn_x_temp);
     c9a:	697b      	ldr	r3, [r7, #20]
     c9c:	681b      	ldr	r3, [r3, #0]
     c9e:	4618      	mov	r0, r3
     ca0:	f001 f8ca 	bl	1e38 <__free_veneer>
     ca4:	6978      	ldr	r0, [r7, #20]
     ca6:	f001 f8c7 	bl	1e38 <__free_veneer>
    return EXIT_SUCCESS;
     caa:	2300      	movs	r3, #0
}
     cac:	4618      	mov	r0, r3
     cae:	3728      	adds	r7, #40	; 0x28
     cb0:	46bd      	mov	sp, r7
     cb2:	bdb0      	pop	{r4, r5, r7, pc}

00000cb4 <BN_1_left>:

SECTION_FLASH int32_t BN_1_left(const int32_t additive, BN *result) {
     cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cb6:	b083      	sub	sp, #12
     cb8:	af00      	add	r7, sp, #0
     cba:	6078      	str	r0, [r7, #4]
     cbc:	6039      	str	r1, [r7, #0]
    BN_INIT(result);
     cbe:	683b      	ldr	r3, [r7, #0]
     cc0:	681b      	ldr	r3, [r3, #0]
     cc2:	2288      	movs	r2, #136	; 0x88
     cc4:	2100      	movs	r1, #0
     cc6:	4618      	mov	r0, r3
     cc8:	f001 f8da 	bl	1e80 <__memset_veneer>
     ccc:	683b      	ldr	r3, [r7, #0]
     cce:	2200      	movs	r2, #0
     cd0:	605a      	str	r2, [r3, #4]
     cd2:	683b      	ldr	r3, [r7, #0]
     cd4:	2200      	movs	r2, #0
     cd6:	609a      	str	r2, [r3, #8]
    result->data[additive >> 6] = (uint64_t) 1 << (additive & 0x3F);
     cd8:	687b      	ldr	r3, [r7, #4]
     cda:	f003 013f 	and.w	r1, r3, #63	; 0x3f
     cde:	683b      	ldr	r3, [r7, #0]
     ce0:	681a      	ldr	r2, [r3, #0]
     ce2:	687b      	ldr	r3, [r7, #4]
     ce4:	119b      	asrs	r3, r3, #6
     ce6:	00db      	lsls	r3, r3, #3
     ce8:	eb02 0c03 	add.w	ip, r2, r3
     cec:	f04f 0201 	mov.w	r2, #1
     cf0:	f04f 0300 	mov.w	r3, #0
     cf4:	f1a1 0620 	sub.w	r6, r1, #32
     cf8:	f1c1 0020 	rsb	r0, r1, #32
     cfc:	fa03 f501 	lsl.w	r5, r3, r1
     d00:	fa02 f606 	lsl.w	r6, r2, r6
     d04:	4335      	orrs	r5, r6
     d06:	fa22 f000 	lsr.w	r0, r2, r0
     d0a:	4305      	orrs	r5, r0
     d0c:	fa02 f401 	lsl.w	r4, r2, r1
     d10:	e9cc 4500 	strd	r4, r5, [ip]
    result->uint64_length = 1 + (additive >> 6);
     d14:	687b      	ldr	r3, [r7, #4]
     d16:	119b      	asrs	r3, r3, #6
     d18:	3301      	adds	r3, #1
     d1a:	461a      	mov	r2, r3
     d1c:	683b      	ldr	r3, [r7, #0]
     d1e:	609a      	str	r2, [r3, #8]
    return EXIT_SUCCESS;
     d20:	2300      	movs	r3, #0
}
     d22:	4618      	mov	r0, r3
     d24:	370c      	adds	r7, #12
     d26:	46bd      	mov	sp, r7
     d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000d2a <BN_div>:

SECTION_FLASH int32_t BN_div(const BN *bn_x, const BN *bn_y, BN *result, BN *remain) {
     d2a:	b590      	push	{r4, r7, lr}
     d2c:	b089      	sub	sp, #36	; 0x24
     d2e:	af00      	add	r7, sp, #0
     d30:	60f8      	str	r0, [r7, #12]
     d32:	60b9      	str	r1, [r7, #8]
     d34:	607a      	str	r2, [r7, #4]
     d36:	603b      	str	r3, [r7, #0]
    BN *bn_y_temp, *bn_1_left_shift;
    BN_NEW(bn_y_temp);
     d38:	2110      	movs	r1, #16
     d3a:	2001      	movs	r0, #1
     d3c:	f001 f894 	bl	1e68 <__calloc_veneer>
     d40:	4603      	mov	r3, r0
     d42:	61bb      	str	r3, [r7, #24]
     d44:	2108      	movs	r1, #8
     d46:	2011      	movs	r0, #17
     d48:	f001 f88e 	bl	1e68 <__calloc_veneer>
     d4c:	4603      	mov	r3, r0
     d4e:	461a      	mov	r2, r3
     d50:	69bb      	ldr	r3, [r7, #24]
     d52:	601a      	str	r2, [r3, #0]
    BN_NEW(bn_1_left_shift);
     d54:	2110      	movs	r1, #16
     d56:	2001      	movs	r0, #1
     d58:	f001 f886 	bl	1e68 <__calloc_veneer>
     d5c:	4603      	mov	r3, r0
     d5e:	617b      	str	r3, [r7, #20]
     d60:	2108      	movs	r1, #8
     d62:	2011      	movs	r0, #17
     d64:	f001 f880 	bl	1e68 <__calloc_veneer>
     d68:	4603      	mov	r3, r0
     d6a:	461a      	mov	r2, r3
     d6c:	697b      	ldr	r3, [r7, #20]
     d6e:	601a      	str	r2, [r3, #0]
    BN_COPY(remain, bn_x);
     d70:	683b      	ldr	r3, [r7, #0]
     d72:	6818      	ldr	r0, [r3, #0]
     d74:	68fb      	ldr	r3, [r7, #12]
     d76:	681b      	ldr	r3, [r3, #0]
     d78:	2288      	movs	r2, #136	; 0x88
     d7a:	4619      	mov	r1, r3
     d7c:	f001 f87c 	bl	1e78 <__memcpy_veneer>
     d80:	68fb      	ldr	r3, [r7, #12]
     d82:	685a      	ldr	r2, [r3, #4]
     d84:	683b      	ldr	r3, [r7, #0]
     d86:	605a      	str	r2, [r3, #4]
     d88:	68fb      	ldr	r3, [r7, #12]
     d8a:	689a      	ldr	r2, [r3, #8]
     d8c:	683b      	ldr	r3, [r7, #0]
     d8e:	609a      	str	r2, [r3, #8]
    BN_COPY(bn_y_temp, bn_y);
     d90:	69bb      	ldr	r3, [r7, #24]
     d92:	6818      	ldr	r0, [r3, #0]
     d94:	68bb      	ldr	r3, [r7, #8]
     d96:	681b      	ldr	r3, [r3, #0]
     d98:	2288      	movs	r2, #136	; 0x88
     d9a:	4619      	mov	r1, r3
     d9c:	f001 f86c 	bl	1e78 <__memcpy_veneer>
     da0:	68bb      	ldr	r3, [r7, #8]
     da2:	685a      	ldr	r2, [r3, #4]
     da4:	69bb      	ldr	r3, [r7, #24]
     da6:	605a      	str	r2, [r3, #4]
     da8:	68bb      	ldr	r3, [r7, #8]
     daa:	689a      	ldr	r2, [r3, #8]
     dac:	69bb      	ldr	r3, [r7, #24]
     dae:	609a      	str	r2, [r3, #8]
    int32_t bit_length_diff = BN_BIT_LENGTH_DIFF(bn_x, bn_y);
     db0:	68f8      	ldr	r0, [r7, #12]
     db2:	f7ff fa16 	bl	1e2 <BN_bit_length>
     db6:	4604      	mov	r4, r0
     db8:	68b8      	ldr	r0, [r7, #8]
     dba:	f7ff fa12 	bl	1e2 <BN_bit_length>
     dbe:	4603      	mov	r3, r0
     dc0:	1ae3      	subs	r3, r4, r3
     dc2:	61fb      	str	r3, [r7, #28]
    BN_left(bn_y_temp, bit_length_diff, bn_y_temp);
     dc4:	69ba      	ldr	r2, [r7, #24]
     dc6:	69f9      	ldr	r1, [r7, #28]
     dc8:	69b8      	ldr	r0, [r7, #24]
     dca:	f7ff fc94 	bl	6f6 <BN_left>
    BN_INIT(result);
     dce:	687b      	ldr	r3, [r7, #4]
     dd0:	681b      	ldr	r3, [r3, #0]
     dd2:	2288      	movs	r2, #136	; 0x88
     dd4:	2100      	movs	r1, #0
     dd6:	4618      	mov	r0, r3
     dd8:	f001 f852 	bl	1e80 <__memset_veneer>
     ddc:	687b      	ldr	r3, [r7, #4]
     dde:	2200      	movs	r2, #0
     de0:	605a      	str	r2, [r3, #4]
     de2:	687b      	ldr	r3, [r7, #4]
     de4:	2200      	movs	r2, #0
     de6:	609a      	str	r2, [r3, #8]
    while (-1 != bit_length_diff) {
     de8:	e01c      	b.n	e24 <BN_div+0xfa>
        if (-1 != BN_cmp(remain, bn_y_temp)) {
     dea:	69b9      	ldr	r1, [r7, #24]
     dec:	6838      	ldr	r0, [r7, #0]
     dee:	f7ff fd5b 	bl	8a8 <BN_cmp>
     df2:	4603      	mov	r3, r0
     df4:	f1b3 3fff 	cmp.w	r3, #4294967295
     df8:	d00d      	beq.n	e16 <BN_div+0xec>
            BN_1_left(bit_length_diff, bn_1_left_shift);
     dfa:	6979      	ldr	r1, [r7, #20]
     dfc:	69f8      	ldr	r0, [r7, #28]
     dfe:	f7ff ff59 	bl	cb4 <BN_1_left>
            BN_add(result, bn_1_left_shift, result);
     e02:	687a      	ldr	r2, [r7, #4]
     e04:	6979      	ldr	r1, [r7, #20]
     e06:	6878      	ldr	r0, [r7, #4]
     e08:	f7ff fa24 	bl	254 <BN_add>
            BN_sub(remain, bn_y_temp, remain);
     e0c:	683a      	ldr	r2, [r7, #0]
     e0e:	69b9      	ldr	r1, [r7, #24]
     e10:	6838      	ldr	r0, [r7, #0]
     e12:	f7ff fabc 	bl	38e <BN_sub>
        }
        BN_div2(bn_y_temp, bn_y_temp);
     e16:	69b9      	ldr	r1, [r7, #24]
     e18:	69b8      	ldr	r0, [r7, #24]
     e1a:	f7ff fbe1 	bl	5e0 <BN_div2>
        bit_length_diff--;
     e1e:	69fb      	ldr	r3, [r7, #28]
     e20:	3b01      	subs	r3, #1
     e22:	61fb      	str	r3, [r7, #28]
    while (-1 != bit_length_diff) {
     e24:	69fb      	ldr	r3, [r7, #28]
     e26:	f1b3 3fff 	cmp.w	r3, #4294967295
     e2a:	d1de      	bne.n	dea <BN_div+0xc0>
    }
    BN_DEL(bn_y_temp);
     e2c:	69bb      	ldr	r3, [r7, #24]
     e2e:	681b      	ldr	r3, [r3, #0]
     e30:	4618      	mov	r0, r3
     e32:	f001 f801 	bl	1e38 <__free_veneer>
     e36:	69b8      	ldr	r0, [r7, #24]
     e38:	f000 fffe 	bl	1e38 <__free_veneer>
    BN_DEL(bn_1_left_shift);
     e3c:	697b      	ldr	r3, [r7, #20]
     e3e:	681b      	ldr	r3, [r3, #0]
     e40:	4618      	mov	r0, r3
     e42:	f000 fff9 	bl	1e38 <__free_veneer>
     e46:	6978      	ldr	r0, [r7, #20]
     e48:	f000 fff6 	bl	1e38 <__free_veneer>
    return EXIT_SUCCESS;
     e4c:	2300      	movs	r3, #0
}
     e4e:	4618      	mov	r0, r3
     e50:	3724      	adds	r7, #36	; 0x24
     e52:	46bd      	mov	sp, r7
     e54:	bd90      	pop	{r4, r7, pc}

00000e56 <BN_div_mod>:

SECTION_FLASH int32_t BN_div_mod(const BN *bn_x, const BN *bn_y, BN *remain) {
     e56:	b590      	push	{r4, r7, lr}
     e58:	b087      	sub	sp, #28
     e5a:	af00      	add	r7, sp, #0
     e5c:	60f8      	str	r0, [r7, #12]
     e5e:	60b9      	str	r1, [r7, #8]
     e60:	607a      	str	r2, [r7, #4]
    if (1 != BN_cmp(bn_x, bn_y)) {
     e62:	68b9      	ldr	r1, [r7, #8]
     e64:	68f8      	ldr	r0, [r7, #12]
     e66:	f7ff fd1f 	bl	8a8 <BN_cmp>
     e6a:	4603      	mov	r3, r0
     e6c:	2b01      	cmp	r3, #1
     e6e:	d015      	beq.n	e9c <BN_div_mod+0x46>
        if (remain != bn_x) {
     e70:	687a      	ldr	r2, [r7, #4]
     e72:	68fb      	ldr	r3, [r7, #12]
     e74:	429a      	cmp	r2, r3
     e76:	d00f      	beq.n	e98 <BN_div_mod+0x42>
            BN_COPY(remain, bn_x);
     e78:	687b      	ldr	r3, [r7, #4]
     e7a:	6818      	ldr	r0, [r3, #0]
     e7c:	68fb      	ldr	r3, [r7, #12]
     e7e:	681b      	ldr	r3, [r3, #0]
     e80:	2288      	movs	r2, #136	; 0x88
     e82:	4619      	mov	r1, r3
     e84:	f000 fff8 	bl	1e78 <__memcpy_veneer>
     e88:	68fb      	ldr	r3, [r7, #12]
     e8a:	685a      	ldr	r2, [r3, #4]
     e8c:	687b      	ldr	r3, [r7, #4]
     e8e:	605a      	str	r2, [r3, #4]
     e90:	68fb      	ldr	r3, [r7, #12]
     e92:	689a      	ldr	r2, [r3, #8]
     e94:	687b      	ldr	r3, [r7, #4]
     e96:	609a      	str	r2, [r3, #8]
        }
        return EXIT_SUCCESS;
     e98:	2300      	movs	r3, #0
     e9a:	e05e      	b.n	f5a <BN_div_mod+0x104>
    }
    BN *bn_y_temp;
    BN_NEW(bn_y_temp);
     e9c:	2110      	movs	r1, #16
     e9e:	2001      	movs	r0, #1
     ea0:	f000 ffe2 	bl	1e68 <__calloc_veneer>
     ea4:	4603      	mov	r3, r0
     ea6:	613b      	str	r3, [r7, #16]
     ea8:	2108      	movs	r1, #8
     eaa:	2011      	movs	r0, #17
     eac:	f000 ffdc 	bl	1e68 <__calloc_veneer>
     eb0:	4603      	mov	r3, r0
     eb2:	461a      	mov	r2, r3
     eb4:	693b      	ldr	r3, [r7, #16]
     eb6:	601a      	str	r2, [r3, #0]
    BN_COPY(remain, bn_x);
     eb8:	687b      	ldr	r3, [r7, #4]
     eba:	6818      	ldr	r0, [r3, #0]
     ebc:	68fb      	ldr	r3, [r7, #12]
     ebe:	681b      	ldr	r3, [r3, #0]
     ec0:	2288      	movs	r2, #136	; 0x88
     ec2:	4619      	mov	r1, r3
     ec4:	f000 ffd8 	bl	1e78 <__memcpy_veneer>
     ec8:	68fb      	ldr	r3, [r7, #12]
     eca:	685a      	ldr	r2, [r3, #4]
     ecc:	687b      	ldr	r3, [r7, #4]
     ece:	605a      	str	r2, [r3, #4]
     ed0:	68fb      	ldr	r3, [r7, #12]
     ed2:	689a      	ldr	r2, [r3, #8]
     ed4:	687b      	ldr	r3, [r7, #4]
     ed6:	609a      	str	r2, [r3, #8]
    BN_COPY(bn_y_temp, bn_y);
     ed8:	693b      	ldr	r3, [r7, #16]
     eda:	6818      	ldr	r0, [r3, #0]
     edc:	68bb      	ldr	r3, [r7, #8]
     ede:	681b      	ldr	r3, [r3, #0]
     ee0:	2288      	movs	r2, #136	; 0x88
     ee2:	4619      	mov	r1, r3
     ee4:	f000 ffc8 	bl	1e78 <__memcpy_veneer>
     ee8:	68bb      	ldr	r3, [r7, #8]
     eea:	685a      	ldr	r2, [r3, #4]
     eec:	693b      	ldr	r3, [r7, #16]
     eee:	605a      	str	r2, [r3, #4]
     ef0:	68bb      	ldr	r3, [r7, #8]
     ef2:	689a      	ldr	r2, [r3, #8]
     ef4:	693b      	ldr	r3, [r7, #16]
     ef6:	609a      	str	r2, [r3, #8]
    int32_t bit_length_diff = BN_BIT_LENGTH_DIFF(bn_x, bn_y);
     ef8:	68f8      	ldr	r0, [r7, #12]
     efa:	f7ff f972 	bl	1e2 <BN_bit_length>
     efe:	4604      	mov	r4, r0
     f00:	68b8      	ldr	r0, [r7, #8]
     f02:	f7ff f96e 	bl	1e2 <BN_bit_length>
     f06:	4603      	mov	r3, r0
     f08:	1ae3      	subs	r3, r4, r3
     f0a:	617b      	str	r3, [r7, #20]
    BN_left(bn_y_temp, bit_length_diff, bn_y_temp);
     f0c:	693a      	ldr	r2, [r7, #16]
     f0e:	6979      	ldr	r1, [r7, #20]
     f10:	6938      	ldr	r0, [r7, #16]
     f12:	f7ff fbf0 	bl	6f6 <BN_left>
    while (-1 != bit_length_diff) {
     f16:	e013      	b.n	f40 <BN_div_mod+0xea>
        if (-1 != BN_cmp(remain, bn_y_temp)) {
     f18:	6939      	ldr	r1, [r7, #16]
     f1a:	6878      	ldr	r0, [r7, #4]
     f1c:	f7ff fcc4 	bl	8a8 <BN_cmp>
     f20:	4603      	mov	r3, r0
     f22:	f1b3 3fff 	cmp.w	r3, #4294967295
     f26:	d004      	beq.n	f32 <BN_div_mod+0xdc>
            BN_sub(remain, bn_y_temp, remain);
     f28:	687a      	ldr	r2, [r7, #4]
     f2a:	6939      	ldr	r1, [r7, #16]
     f2c:	6878      	ldr	r0, [r7, #4]
     f2e:	f7ff fa2e 	bl	38e <BN_sub>
        }
        BN_div2(bn_y_temp, bn_y_temp);
     f32:	6939      	ldr	r1, [r7, #16]
     f34:	6938      	ldr	r0, [r7, #16]
     f36:	f7ff fb53 	bl	5e0 <BN_div2>
        bit_length_diff--;
     f3a:	697b      	ldr	r3, [r7, #20]
     f3c:	3b01      	subs	r3, #1
     f3e:	617b      	str	r3, [r7, #20]
    while (-1 != bit_length_diff) {
     f40:	697b      	ldr	r3, [r7, #20]
     f42:	f1b3 3fff 	cmp.w	r3, #4294967295
     f46:	d1e7      	bne.n	f18 <BN_div_mod+0xc2>
    }
    BN_DEL(bn_y_temp);
     f48:	693b      	ldr	r3, [r7, #16]
     f4a:	681b      	ldr	r3, [r3, #0]
     f4c:	4618      	mov	r0, r3
     f4e:	f000 ff73 	bl	1e38 <__free_veneer>
     f52:	6938      	ldr	r0, [r7, #16]
     f54:	f000 ff70 	bl	1e38 <__free_veneer>
    return EXIT_SUCCESS;
     f58:	2300      	movs	r3, #0
}
     f5a:	4618      	mov	r0, r3
     f5c:	371c      	adds	r7, #28
     f5e:	46bd      	mov	sp, r7
     f60:	bd90      	pop	{r4, r7, pc}

00000f62 <BN_Extended_Euclid_Algorithm>:

SECTION_FLASH int32_t BN_Extended_Euclid_Algorithm(const BN *bn_x, const BN *bn_y, BN *bn_x_inv) {
     f62:	b580      	push	{r7, lr}
     f64:	b08c      	sub	sp, #48	; 0x30
     f66:	af00      	add	r7, sp, #0
     f68:	60f8      	str	r0, [r7, #12]
     f6a:	60b9      	str	r1, [r7, #8]
     f6c:	607a      	str	r2, [r7, #4]
    BN *bn_x_inv_old_old, *bn_x_inv_new, *bn_x_inv_old, *bn_x_temp, *bn_y_temp, *quotient, *remainder;
    BN_NEW(bn_x_inv_new);
     f6e:	2110      	movs	r1, #16
     f70:	2001      	movs	r0, #1
     f72:	f000 ff79 	bl	1e68 <__calloc_veneer>
     f76:	4603      	mov	r3, r0
     f78:	62bb      	str	r3, [r7, #40]	; 0x28
     f7a:	2108      	movs	r1, #8
     f7c:	2011      	movs	r0, #17
     f7e:	f000 ff73 	bl	1e68 <__calloc_veneer>
     f82:	4603      	mov	r3, r0
     f84:	461a      	mov	r2, r3
     f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f88:	601a      	str	r2, [r3, #0]
    BN_NEW(bn_x_inv_old);
     f8a:	2110      	movs	r1, #16
     f8c:	2001      	movs	r0, #1
     f8e:	f000 ff6b 	bl	1e68 <__calloc_veneer>
     f92:	4603      	mov	r3, r0
     f94:	627b      	str	r3, [r7, #36]	; 0x24
     f96:	2108      	movs	r1, #8
     f98:	2011      	movs	r0, #17
     f9a:	f000 ff65 	bl	1e68 <__calloc_veneer>
     f9e:	4603      	mov	r3, r0
     fa0:	461a      	mov	r2, r3
     fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fa4:	601a      	str	r2, [r3, #0]
    BN_NEW(bn_x_inv_old_old);
     fa6:	2110      	movs	r1, #16
     fa8:	2001      	movs	r0, #1
     faa:	f000 ff5d 	bl	1e68 <__calloc_veneer>
     fae:	4603      	mov	r3, r0
     fb0:	623b      	str	r3, [r7, #32]
     fb2:	2108      	movs	r1, #8
     fb4:	2011      	movs	r0, #17
     fb6:	f000 ff57 	bl	1e68 <__calloc_veneer>
     fba:	4603      	mov	r3, r0
     fbc:	461a      	mov	r2, r3
     fbe:	6a3b      	ldr	r3, [r7, #32]
     fc0:	601a      	str	r2, [r3, #0]
    BN_NEW(bn_x_temp);
     fc2:	2110      	movs	r1, #16
     fc4:	2001      	movs	r0, #1
     fc6:	f000 ff4f 	bl	1e68 <__calloc_veneer>
     fca:	4603      	mov	r3, r0
     fcc:	61fb      	str	r3, [r7, #28]
     fce:	2108      	movs	r1, #8
     fd0:	2011      	movs	r0, #17
     fd2:	f000 ff49 	bl	1e68 <__calloc_veneer>
     fd6:	4603      	mov	r3, r0
     fd8:	461a      	mov	r2, r3
     fda:	69fb      	ldr	r3, [r7, #28]
     fdc:	601a      	str	r2, [r3, #0]
    BN_NEW(bn_y_temp);
     fde:	2110      	movs	r1, #16
     fe0:	2001      	movs	r0, #1
     fe2:	f000 ff41 	bl	1e68 <__calloc_veneer>
     fe6:	4603      	mov	r3, r0
     fe8:	61bb      	str	r3, [r7, #24]
     fea:	2108      	movs	r1, #8
     fec:	2011      	movs	r0, #17
     fee:	f000 ff3b 	bl	1e68 <__calloc_veneer>
     ff2:	4603      	mov	r3, r0
     ff4:	461a      	mov	r2, r3
     ff6:	69bb      	ldr	r3, [r7, #24]
     ff8:	601a      	str	r2, [r3, #0]
    BN_NEW(quotient);
     ffa:	2110      	movs	r1, #16
     ffc:	2001      	movs	r0, #1
     ffe:	f000 ff33 	bl	1e68 <__calloc_veneer>
    1002:	4603      	mov	r3, r0
    1004:	617b      	str	r3, [r7, #20]
    1006:	2108      	movs	r1, #8
    1008:	2011      	movs	r0, #17
    100a:	f000 ff2d 	bl	1e68 <__calloc_veneer>
    100e:	4603      	mov	r3, r0
    1010:	461a      	mov	r2, r3
    1012:	697b      	ldr	r3, [r7, #20]
    1014:	601a      	str	r2, [r3, #0]
    BN_NEW(remainder);
    1016:	2110      	movs	r1, #16
    1018:	2001      	movs	r0, #1
    101a:	f000 ff25 	bl	1e68 <__calloc_veneer>
    101e:	4603      	mov	r3, r0
    1020:	613b      	str	r3, [r7, #16]
    1022:	2108      	movs	r1, #8
    1024:	2011      	movs	r0, #17
    1026:	f000 ff1f 	bl	1e68 <__calloc_veneer>
    102a:	4603      	mov	r3, r0
    102c:	461a      	mov	r2, r3
    102e:	693b      	ldr	r3, [r7, #16]
    1030:	601a      	str	r2, [r3, #0]
    BN_DEC2BN(1, bn_x_inv_new);
    1032:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1034:	681b      	ldr	r3, [r3, #0]
    1036:	2288      	movs	r2, #136	; 0x88
    1038:	2100      	movs	r1, #0
    103a:	4618      	mov	r0, r3
    103c:	f000 ff20 	bl	1e80 <__memset_veneer>
    1040:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1042:	2200      	movs	r2, #0
    1044:	605a      	str	r2, [r3, #4]
    1046:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1048:	2200      	movs	r2, #0
    104a:	609a      	str	r2, [r3, #8]
    104c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    104e:	6819      	ldr	r1, [r3, #0]
    1050:	f04f 0201 	mov.w	r2, #1
    1054:	f04f 0300 	mov.w	r3, #0
    1058:	e9c1 2300 	strd	r2, r3, [r1]
    105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    105e:	2201      	movs	r2, #1
    1060:	609a      	str	r2, [r3, #8]
    BN_COPY(bn_x_temp, bn_x);
    1062:	69fb      	ldr	r3, [r7, #28]
    1064:	6818      	ldr	r0, [r3, #0]
    1066:	68fb      	ldr	r3, [r7, #12]
    1068:	681b      	ldr	r3, [r3, #0]
    106a:	2288      	movs	r2, #136	; 0x88
    106c:	4619      	mov	r1, r3
    106e:	f000 ff03 	bl	1e78 <__memcpy_veneer>
    1072:	68fb      	ldr	r3, [r7, #12]
    1074:	685a      	ldr	r2, [r3, #4]
    1076:	69fb      	ldr	r3, [r7, #28]
    1078:	605a      	str	r2, [r3, #4]
    107a:	68fb      	ldr	r3, [r7, #12]
    107c:	689a      	ldr	r2, [r3, #8]
    107e:	69fb      	ldr	r3, [r7, #28]
    1080:	609a      	str	r2, [r3, #8]
    BN_COPY(bn_y_temp, bn_y);
    1082:	69bb      	ldr	r3, [r7, #24]
    1084:	6818      	ldr	r0, [r3, #0]
    1086:	68bb      	ldr	r3, [r7, #8]
    1088:	681b      	ldr	r3, [r3, #0]
    108a:	2288      	movs	r2, #136	; 0x88
    108c:	4619      	mov	r1, r3
    108e:	f000 fef3 	bl	1e78 <__memcpy_veneer>
    1092:	68bb      	ldr	r3, [r7, #8]
    1094:	685a      	ldr	r2, [r3, #4]
    1096:	69bb      	ldr	r3, [r7, #24]
    1098:	605a      	str	r2, [r3, #4]
    109a:	68bb      	ldr	r3, [r7, #8]
    109c:	689a      	ldr	r2, [r3, #8]
    109e:	69bb      	ldr	r3, [r7, #24]
    10a0:	609a      	str	r2, [r3, #8]
    int32_t sign_flag = 0;
    10a2:	2300      	movs	r3, #0
    10a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (1 != BN_EQ_Y(bn_x_temp, 1)) {
    10a6:	e054      	b.n	1152 <BN_Extended_Euclid_Algorithm+0x1f0>
        BN_div(bn_y_temp, bn_x_temp, quotient, remainder);
    10a8:	693b      	ldr	r3, [r7, #16]
    10aa:	697a      	ldr	r2, [r7, #20]
    10ac:	69f9      	ldr	r1, [r7, #28]
    10ae:	69b8      	ldr	r0, [r7, #24]
    10b0:	f7ff fe3b 	bl	d2a <BN_div>
        BN_COPY(bn_y_temp, bn_x_temp);
    10b4:	69bb      	ldr	r3, [r7, #24]
    10b6:	6818      	ldr	r0, [r3, #0]
    10b8:	69fb      	ldr	r3, [r7, #28]
    10ba:	681b      	ldr	r3, [r3, #0]
    10bc:	2288      	movs	r2, #136	; 0x88
    10be:	4619      	mov	r1, r3
    10c0:	f000 feda 	bl	1e78 <__memcpy_veneer>
    10c4:	69fb      	ldr	r3, [r7, #28]
    10c6:	685a      	ldr	r2, [r3, #4]
    10c8:	69bb      	ldr	r3, [r7, #24]
    10ca:	605a      	str	r2, [r3, #4]
    10cc:	69fb      	ldr	r3, [r7, #28]
    10ce:	689a      	ldr	r2, [r3, #8]
    10d0:	69bb      	ldr	r3, [r7, #24]
    10d2:	609a      	str	r2, [r3, #8]
        BN_COPY(bn_x_temp, remainder);
    10d4:	69fb      	ldr	r3, [r7, #28]
    10d6:	6818      	ldr	r0, [r3, #0]
    10d8:	693b      	ldr	r3, [r7, #16]
    10da:	681b      	ldr	r3, [r3, #0]
    10dc:	2288      	movs	r2, #136	; 0x88
    10de:	4619      	mov	r1, r3
    10e0:	f000 feca 	bl	1e78 <__memcpy_veneer>
    10e4:	693b      	ldr	r3, [r7, #16]
    10e6:	685a      	ldr	r2, [r3, #4]
    10e8:	69fb      	ldr	r3, [r7, #28]
    10ea:	605a      	str	r2, [r3, #4]
    10ec:	693b      	ldr	r3, [r7, #16]
    10ee:	689a      	ldr	r2, [r3, #8]
    10f0:	69fb      	ldr	r3, [r7, #28]
    10f2:	609a      	str	r2, [r3, #8]
        BN_COPY(bn_x_inv_old, bn_x_inv_new);
    10f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10f6:	6818      	ldr	r0, [r3, #0]
    10f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10fa:	681b      	ldr	r3, [r3, #0]
    10fc:	2288      	movs	r2, #136	; 0x88
    10fe:	4619      	mov	r1, r3
    1100:	f000 feba 	bl	1e78 <__memcpy_veneer>
    1104:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1106:	685a      	ldr	r2, [r3, #4]
    1108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    110a:	605a      	str	r2, [r3, #4]
    110c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    110e:	689a      	ldr	r2, [r3, #8]
    1110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1112:	609a      	str	r2, [r3, #8]
        BN_mul(bn_x_inv_new, quotient, bn_y, bn_x_inv_new);
    1114:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1116:	68ba      	ldr	r2, [r7, #8]
    1118:	6979      	ldr	r1, [r7, #20]
    111a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    111c:	f7ff fc1c 	bl	958 <BN_mul>
        BN_add(bn_x_inv_old_old, bn_x_inv_new, bn_x_inv_new);
    1120:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    1124:	6a38      	ldr	r0, [r7, #32]
    1126:	f7ff f895 	bl	254 <BN_add>
        BN_COPY(bn_x_inv_old_old, bn_x_inv_old);
    112a:	6a3b      	ldr	r3, [r7, #32]
    112c:	6818      	ldr	r0, [r3, #0]
    112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1130:	681b      	ldr	r3, [r3, #0]
    1132:	2288      	movs	r2, #136	; 0x88
    1134:	4619      	mov	r1, r3
    1136:	f000 fe9f 	bl	1e78 <__memcpy_veneer>
    113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    113c:	685a      	ldr	r2, [r3, #4]
    113e:	6a3b      	ldr	r3, [r7, #32]
    1140:	605a      	str	r2, [r3, #4]
    1142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1144:	689a      	ldr	r2, [r3, #8]
    1146:	6a3b      	ldr	r3, [r7, #32]
    1148:	609a      	str	r2, [r3, #8]
        sign_flag ^= 1;
    114a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    114c:	f083 0301 	eor.w	r3, r3, #1
    1150:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (1 != BN_EQ_Y(bn_x_temp, 1)) {
    1152:	69fb      	ldr	r3, [r7, #28]
    1154:	681b      	ldr	r3, [r3, #0]
    1156:	e9d3 2300 	ldrd	r2, r3, [r3]
    115a:	1e51      	subs	r1, r2, #1
    115c:	430b      	orrs	r3, r1
    115e:	d105      	bne.n	116c <BN_Extended_Euclid_Algorithm+0x20a>
    1160:	69fb      	ldr	r3, [r7, #28]
    1162:	689b      	ldr	r3, [r3, #8]
    1164:	2b01      	cmp	r3, #1
    1166:	d101      	bne.n	116c <BN_Extended_Euclid_Algorithm+0x20a>
    1168:	2301      	movs	r3, #1
    116a:	e000      	b.n	116e <BN_Extended_Euclid_Algorithm+0x20c>
    116c:	2300      	movs	r3, #0
    116e:	2b01      	cmp	r3, #1
    1170:	d19a      	bne.n	10a8 <BN_Extended_Euclid_Algorithm+0x146>
    }
    if (1 == sign_flag) {
    1172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1174:	2b01      	cmp	r3, #1
    1176:	d104      	bne.n	1182 <BN_Extended_Euclid_Algorithm+0x220>
        BN_sub(bn_y, bn_x_inv_new, bn_x_inv_new);
    1178:	6aba      	ldr	r2, [r7, #40]	; 0x28
    117a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    117c:	68b8      	ldr	r0, [r7, #8]
    117e:	f7ff f906 	bl	38e <BN_sub>
    }
    BN_COPY(bn_x_inv, bn_x_inv_new);
    1182:	687b      	ldr	r3, [r7, #4]
    1184:	6818      	ldr	r0, [r3, #0]
    1186:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1188:	681b      	ldr	r3, [r3, #0]
    118a:	2288      	movs	r2, #136	; 0x88
    118c:	4619      	mov	r1, r3
    118e:	f000 fe73 	bl	1e78 <__memcpy_veneer>
    1192:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1194:	685a      	ldr	r2, [r3, #4]
    1196:	687b      	ldr	r3, [r7, #4]
    1198:	605a      	str	r2, [r3, #4]
    119a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    119c:	689a      	ldr	r2, [r3, #8]
    119e:	687b      	ldr	r3, [r7, #4]
    11a0:	609a      	str	r2, [r3, #8]
    BN_DEL(bn_x_inv_new);
    11a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    11a4:	681b      	ldr	r3, [r3, #0]
    11a6:	4618      	mov	r0, r3
    11a8:	f000 fe46 	bl	1e38 <__free_veneer>
    11ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    11ae:	f000 fe43 	bl	1e38 <__free_veneer>
    BN_DEL(bn_x_inv_old);
    11b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11b4:	681b      	ldr	r3, [r3, #0]
    11b6:	4618      	mov	r0, r3
    11b8:	f000 fe3e 	bl	1e38 <__free_veneer>
    11bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
    11be:	f000 fe3b 	bl	1e38 <__free_veneer>
    BN_DEL(bn_x_inv_old_old);
    11c2:	6a3b      	ldr	r3, [r7, #32]
    11c4:	681b      	ldr	r3, [r3, #0]
    11c6:	4618      	mov	r0, r3
    11c8:	f000 fe36 	bl	1e38 <__free_veneer>
    11cc:	6a38      	ldr	r0, [r7, #32]
    11ce:	f000 fe33 	bl	1e38 <__free_veneer>
    BN_DEL(bn_x_temp);
    11d2:	69fb      	ldr	r3, [r7, #28]
    11d4:	681b      	ldr	r3, [r3, #0]
    11d6:	4618      	mov	r0, r3
    11d8:	f000 fe2e 	bl	1e38 <__free_veneer>
    11dc:	69f8      	ldr	r0, [r7, #28]
    11de:	f000 fe2b 	bl	1e38 <__free_veneer>
    BN_DEL(bn_y_temp);
    11e2:	69bb      	ldr	r3, [r7, #24]
    11e4:	681b      	ldr	r3, [r3, #0]
    11e6:	4618      	mov	r0, r3
    11e8:	f000 fe26 	bl	1e38 <__free_veneer>
    11ec:	69b8      	ldr	r0, [r7, #24]
    11ee:	f000 fe23 	bl	1e38 <__free_veneer>
    BN_DEL(quotient);
    11f2:	697b      	ldr	r3, [r7, #20]
    11f4:	681b      	ldr	r3, [r3, #0]
    11f6:	4618      	mov	r0, r3
    11f8:	f000 fe1e 	bl	1e38 <__free_veneer>
    11fc:	6978      	ldr	r0, [r7, #20]
    11fe:	f000 fe1b 	bl	1e38 <__free_veneer>
    BN_DEL(remainder);
    1202:	693b      	ldr	r3, [r7, #16]
    1204:	681b      	ldr	r3, [r3, #0]
    1206:	4618      	mov	r0, r3
    1208:	f000 fe16 	bl	1e38 <__free_veneer>
    120c:	6938      	ldr	r0, [r7, #16]
    120e:	f000 fe13 	bl	1e38 <__free_veneer>
    return EXIT_SUCCESS;
    1212:	2300      	movs	r3, #0
}
    1214:	4618      	mov	r0, r3
    1216:	3730      	adds	r7, #48	; 0x30
    1218:	46bd      	mov	sp, r7
    121a:	bd80      	pop	{r7, pc}

0000121c <BN_Miller_Rabin>:

#define PRIME_N 7

const static uint64_t prime[PRIME_N] = { 2, 325, 9375, 28178, 450775, 9780504, 1795265022 };

SECTION_FLASH int32_t BN_Miller_Rabin(const BN *bn_x) {
    121c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    1220:	b090      	sub	sp, #64	; 0x40
    1222:	af00      	add	r7, sp, #0
    1224:	6178      	str	r0, [r7, #20]
    uint64_t r = 0;
    1226:	f04f 0200 	mov.w	r2, #0
    122a:	f04f 0300 	mov.w	r3, #0
    122e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    int32_t result = EXIT_SUCCESS;
    1232:	2300      	movs	r3, #0
    1234:	637b      	str	r3, [r7, #52]	; 0x34
    BN *d, *bn_dec_1, *bn_x_minus_1;
    BN_NEW(d);
    1236:	2110      	movs	r1, #16
    1238:	2001      	movs	r0, #1
    123a:	f000 fe15 	bl	1e68 <__calloc_veneer>
    123e:	4603      	mov	r3, r0
    1240:	62bb      	str	r3, [r7, #40]	; 0x28
    1242:	2108      	movs	r1, #8
    1244:	2011      	movs	r0, #17
    1246:	f000 fe0f 	bl	1e68 <__calloc_veneer>
    124a:	4603      	mov	r3, r0
    124c:	461a      	mov	r2, r3
    124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1250:	601a      	str	r2, [r3, #0]
    BN_NEW(bn_dec_1);
    1252:	2110      	movs	r1, #16
    1254:	2001      	movs	r0, #1
    1256:	f000 fe07 	bl	1e68 <__calloc_veneer>
    125a:	4603      	mov	r3, r0
    125c:	627b      	str	r3, [r7, #36]	; 0x24
    125e:	2108      	movs	r1, #8
    1260:	2011      	movs	r0, #17
    1262:	f000 fe01 	bl	1e68 <__calloc_veneer>
    1266:	4603      	mov	r3, r0
    1268:	461a      	mov	r2, r3
    126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    126c:	601a      	str	r2, [r3, #0]
    BN_NEW(bn_x_minus_1);
    126e:	2110      	movs	r1, #16
    1270:	2001      	movs	r0, #1
    1272:	f000 fdf9 	bl	1e68 <__calloc_veneer>
    1276:	4603      	mov	r3, r0
    1278:	623b      	str	r3, [r7, #32]
    127a:	2108      	movs	r1, #8
    127c:	2011      	movs	r0, #17
    127e:	f000 fdf3 	bl	1e68 <__calloc_veneer>
    1282:	4603      	mov	r3, r0
    1284:	461a      	mov	r2, r3
    1286:	6a3b      	ldr	r3, [r7, #32]
    1288:	601a      	str	r2, [r3, #0]
    BN_DEC2BN(1, bn_dec_1);
    128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    128c:	681b      	ldr	r3, [r3, #0]
    128e:	2288      	movs	r2, #136	; 0x88
    1290:	2100      	movs	r1, #0
    1292:	4618      	mov	r0, r3
    1294:	f000 fdf4 	bl	1e80 <__memset_veneer>
    1298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    129a:	2200      	movs	r2, #0
    129c:	605a      	str	r2, [r3, #4]
    129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12a0:	2200      	movs	r2, #0
    12a2:	609a      	str	r2, [r3, #8]
    12a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12a6:	6819      	ldr	r1, [r3, #0]
    12a8:	f04f 0201 	mov.w	r2, #1
    12ac:	f04f 0300 	mov.w	r3, #0
    12b0:	e9c1 2300 	strd	r2, r3, [r1]
    12b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12b6:	2201      	movs	r2, #1
    12b8:	609a      	str	r2, [r3, #8]
    BN_sub(bn_x, bn_dec_1, bn_x_minus_1);
    12ba:	6a3a      	ldr	r2, [r7, #32]
    12bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
    12be:	6978      	ldr	r0, [r7, #20]
    12c0:	f7ff f865 	bl	38e <BN_sub>
    BN_COPY(d, bn_x_minus_1);
    12c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    12c6:	6818      	ldr	r0, [r3, #0]
    12c8:	6a3b      	ldr	r3, [r7, #32]
    12ca:	681b      	ldr	r3, [r3, #0]
    12cc:	2288      	movs	r2, #136	; 0x88
    12ce:	4619      	mov	r1, r3
    12d0:	f000 fdd2 	bl	1e78 <__memcpy_veneer>
    12d4:	6a3b      	ldr	r3, [r7, #32]
    12d6:	685a      	ldr	r2, [r3, #4]
    12d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    12da:	605a      	str	r2, [r3, #4]
    12dc:	6a3b      	ldr	r3, [r7, #32]
    12de:	689a      	ldr	r2, [r3, #8]
    12e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    12e2:	609a      	str	r2, [r3, #8]
    while (!(1 & d->data[0])) {
    12e4:	e00e      	b.n	1304 <BN_Miller_Rabin+0xe8>
        r++;
    12e6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    12ea:	1c51      	adds	r1, r2, #1
    12ec:	6039      	str	r1, [r7, #0]
    12ee:	f143 0300 	adc.w	r3, r3, #0
    12f2:	607b      	str	r3, [r7, #4]
    12f4:	e9d7 2300 	ldrd	r2, r3, [r7]
    12f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        BN_div2(d, d);
    12fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    12fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1300:	f7ff f96e 	bl	5e0 <BN_div2>
    while (!(1 & d->data[0])) {
    1304:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1306:	681b      	ldr	r3, [r3, #0]
    1308:	e9d3 2300 	ldrd	r2, r3, [r3]
    130c:	f002 0801 	and.w	r8, r2, #1
    1310:	f04f 0900 	mov.w	r9, #0
    1314:	ea58 0309 	orrs.w	r3, r8, r9
    1318:	d0e5      	beq.n	12e6 <BN_Miller_Rabin+0xca>
    }
    BN *bn_a;
    BN_NEW(bn_a);
    131a:	2110      	movs	r1, #16
    131c:	2001      	movs	r0, #1
    131e:	f000 fda3 	bl	1e68 <__calloc_veneer>
    1322:	4603      	mov	r3, r0
    1324:	61fb      	str	r3, [r7, #28]
    1326:	2108      	movs	r1, #8
    1328:	2011      	movs	r0, #17
    132a:	f000 fd9d 	bl	1e68 <__calloc_veneer>
    132e:	4603      	mov	r3, r0
    1330:	461a      	mov	r2, r3
    1332:	69fb      	ldr	r3, [r7, #28]
    1334:	601a      	str	r2, [r3, #0]
    for (int32_t i = 0; i < PRIME_N; i++) {
    1336:	2300      	movs	r3, #0
    1338:	633b      	str	r3, [r7, #48]	; 0x30
    133a:	e0a2      	b.n	1482 <BN_Miller_Rabin+0x266>
        BN_DEC2BN(prime[i], bn_a);
    133c:	69fb      	ldr	r3, [r7, #28]
    133e:	681b      	ldr	r3, [r3, #0]
    1340:	2288      	movs	r2, #136	; 0x88
    1342:	2100      	movs	r1, #0
    1344:	4618      	mov	r0, r3
    1346:	f000 fd9b 	bl	1e80 <__memset_veneer>
    134a:	69fb      	ldr	r3, [r7, #28]
    134c:	2200      	movs	r2, #0
    134e:	605a      	str	r2, [r3, #4]
    1350:	69fb      	ldr	r3, [r7, #28]
    1352:	2200      	movs	r2, #0
    1354:	609a      	str	r2, [r3, #8]
    1356:	69fb      	ldr	r3, [r7, #28]
    1358:	6819      	ldr	r1, [r3, #0]
    135a:	4a5f      	ldr	r2, [pc, #380]	; (14d8 <BN_Miller_Rabin+0x2bc>)
    135c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    135e:	00db      	lsls	r3, r3, #3
    1360:	4413      	add	r3, r2
    1362:	e9d3 2300 	ldrd	r2, r3, [r3]
    1366:	e9c1 2300 	strd	r2, r3, [r1]
    136a:	69fb      	ldr	r3, [r7, #28]
    136c:	2201      	movs	r2, #1
    136e:	609a      	str	r2, [r3, #8]
        BN_pow_fast(bn_a, d, bn_x, bn_a);
    1370:	69fb      	ldr	r3, [r7, #28]
    1372:	697a      	ldr	r2, [r7, #20]
    1374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    1376:	69f8      	ldr	r0, [r7, #28]
    1378:	f7ff fc04 	bl	b84 <BN_pow_fast>
        if (BN_EQ_Y(bn_a, 0) || BN_EQ_Y(bn_a, 1) || (0 == BN_cmp(bn_a, bn_x_minus_1))) {
    137c:	69fb      	ldr	r3, [r7, #28]
    137e:	681b      	ldr	r3, [r3, #0]
    1380:	e9d3 2300 	ldrd	r2, r3, [r3]
    1384:	4313      	orrs	r3, r2
    1386:	d103      	bne.n	1390 <BN_Miller_Rabin+0x174>
    1388:	69fb      	ldr	r3, [r7, #28]
    138a:	689b      	ldr	r3, [r3, #8]
    138c:	2b01      	cmp	r3, #1
    138e:	d074      	beq.n	147a <BN_Miller_Rabin+0x25e>
    1390:	69fb      	ldr	r3, [r7, #28]
    1392:	681b      	ldr	r3, [r3, #0]
    1394:	e9d3 2300 	ldrd	r2, r3, [r3]
    1398:	1e51      	subs	r1, r2, #1
    139a:	430b      	orrs	r3, r1
    139c:	d103      	bne.n	13a6 <BN_Miller_Rabin+0x18a>
    139e:	69fb      	ldr	r3, [r7, #28]
    13a0:	689b      	ldr	r3, [r3, #8]
    13a2:	2b01      	cmp	r3, #1
    13a4:	d069      	beq.n	147a <BN_Miller_Rabin+0x25e>
    13a6:	6a39      	ldr	r1, [r7, #32]
    13a8:	69f8      	ldr	r0, [r7, #28]
    13aa:	f7ff fa7d 	bl	8a8 <BN_cmp>
    13ae:	4603      	mov	r3, r0
    13b0:	2b00      	cmp	r3, #0
    13b2:	d062      	beq.n	147a <BN_Miller_Rabin+0x25e>
            continue;
        }
        for (int32_t j = 0; j < r; j++) {
    13b4:	2300      	movs	r3, #0
    13b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    13b8:	e043      	b.n	1442 <BN_Miller_Rabin+0x226>
            BN_mul(bn_a, bn_a, bn_x, bn_a);
    13ba:	69fb      	ldr	r3, [r7, #28]
    13bc:	697a      	ldr	r2, [r7, #20]
    13be:	69f9      	ldr	r1, [r7, #28]
    13c0:	69f8      	ldr	r0, [r7, #28]
    13c2:	f7ff fac9 	bl	958 <BN_mul>
            if (0 == BN_cmp(bn_a, bn_x_minus_1) && j != r - 1) {
    13c6:	6a39      	ldr	r1, [r7, #32]
    13c8:	69f8      	ldr	r0, [r7, #28]
    13ca:	f7ff fa6d 	bl	8a8 <BN_cmp>
    13ce:	4603      	mov	r3, r0
    13d0:	2b00      	cmp	r3, #0
    13d2:	d125      	bne.n	1420 <BN_Miller_Rabin+0x204>
    13d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    13d6:	17da      	asrs	r2, r3, #31
    13d8:	469a      	mov	sl, r3
    13da:	4693      	mov	fp, r2
    13dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    13e0:	1e54      	subs	r4, r2, #1
    13e2:	f143 35ff 	adc.w	r5, r3, #4294967295
    13e6:	45ab      	cmp	fp, r5
    13e8:	bf08      	it	eq
    13ea:	45a2      	cmpeq	sl, r4
    13ec:	d018      	beq.n	1420 <BN_Miller_Rabin+0x204>
                BN_DEC2BN(1, bn_a);
    13ee:	69fb      	ldr	r3, [r7, #28]
    13f0:	681b      	ldr	r3, [r3, #0]
    13f2:	2288      	movs	r2, #136	; 0x88
    13f4:	2100      	movs	r1, #0
    13f6:	4618      	mov	r0, r3
    13f8:	f000 fd42 	bl	1e80 <__memset_veneer>
    13fc:	69fb      	ldr	r3, [r7, #28]
    13fe:	2200      	movs	r2, #0
    1400:	605a      	str	r2, [r3, #4]
    1402:	69fb      	ldr	r3, [r7, #28]
    1404:	2200      	movs	r2, #0
    1406:	609a      	str	r2, [r3, #8]
    1408:	69fb      	ldr	r3, [r7, #28]
    140a:	6819      	ldr	r1, [r3, #0]
    140c:	f04f 0201 	mov.w	r2, #1
    1410:	f04f 0300 	mov.w	r3, #0
    1414:	e9c1 2300 	strd	r2, r3, [r1]
    1418:	69fb      	ldr	r3, [r7, #28]
    141a:	2201      	movs	r2, #1
    141c:	609a      	str	r2, [r3, #8]
                break;
    141e:	e01e      	b.n	145e <BN_Miller_Rabin+0x242>
            }
            if (BN_EQ_Y(bn_a, 1)) {
    1420:	69fb      	ldr	r3, [r7, #28]
    1422:	681b      	ldr	r3, [r3, #0]
    1424:	e9d3 2300 	ldrd	r2, r3, [r3]
    1428:	1e51      	subs	r1, r2, #1
    142a:	430b      	orrs	r3, r1
    142c:	d106      	bne.n	143c <BN_Miller_Rabin+0x220>
    142e:	69fb      	ldr	r3, [r7, #28]
    1430:	689b      	ldr	r3, [r3, #8]
    1432:	2b01      	cmp	r3, #1
    1434:	d102      	bne.n	143c <BN_Miller_Rabin+0x220>
                result = EXIT_FAILURE;
    1436:	2301      	movs	r3, #1
    1438:	637b      	str	r3, [r7, #52]	; 0x34
                goto END;
    143a:	e027      	b.n	148c <BN_Miller_Rabin+0x270>
        for (int32_t j = 0; j < r; j++) {
    143c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    143e:	3301      	adds	r3, #1
    1440:	62fb      	str	r3, [r7, #44]	; 0x2c
    1442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1444:	17da      	asrs	r2, r3, #31
    1446:	60bb      	str	r3, [r7, #8]
    1448:	60fa      	str	r2, [r7, #12]
    144a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    144e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
    1452:	4641      	mov	r1, r8
    1454:	4291      	cmp	r1, r2
    1456:	4649      	mov	r1, r9
    1458:	eb71 0303 	sbcs.w	r3, r1, r3
    145c:	d3ad      	bcc.n	13ba <BN_Miller_Rabin+0x19e>
            }
        }
        if (!BN_EQ_Y(bn_a, 1)) {
    145e:	69fb      	ldr	r3, [r7, #28]
    1460:	681b      	ldr	r3, [r3, #0]
    1462:	e9d3 2300 	ldrd	r2, r3, [r3]
    1466:	1e51      	subs	r1, r2, #1
    1468:	430b      	orrs	r3, r1
    146a:	d103      	bne.n	1474 <BN_Miller_Rabin+0x258>
    146c:	69fb      	ldr	r3, [r7, #28]
    146e:	689b      	ldr	r3, [r3, #8]
    1470:	2b01      	cmp	r3, #1
    1472:	d003      	beq.n	147c <BN_Miller_Rabin+0x260>
            result = EXIT_FAILURE;
    1474:	2301      	movs	r3, #1
    1476:	637b      	str	r3, [r7, #52]	; 0x34
            goto END;
    1478:	e008      	b.n	148c <BN_Miller_Rabin+0x270>
            continue;
    147a:	bf00      	nop
    for (int32_t i = 0; i < PRIME_N; i++) {
    147c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    147e:	3301      	adds	r3, #1
    1480:	633b      	str	r3, [r7, #48]	; 0x30
    1482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1484:	2b06      	cmp	r3, #6
    1486:	f77f af59 	ble.w	133c <BN_Miller_Rabin+0x120>
        }
    }
    END:
    148a:	bf00      	nop
    BN_DEL(d);
    148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    148e:	681b      	ldr	r3, [r3, #0]
    1490:	4618      	mov	r0, r3
    1492:	f000 fcd1 	bl	1e38 <__free_veneer>
    1496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1498:	f000 fcce 	bl	1e38 <__free_veneer>
    BN_DEL(bn_dec_1);
    149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    149e:	681b      	ldr	r3, [r3, #0]
    14a0:	4618      	mov	r0, r3
    14a2:	f000 fcc9 	bl	1e38 <__free_veneer>
    14a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    14a8:	f000 fcc6 	bl	1e38 <__free_veneer>
    BN_DEL(bn_x_minus_1);
    14ac:	6a3b      	ldr	r3, [r7, #32]
    14ae:	681b      	ldr	r3, [r3, #0]
    14b0:	4618      	mov	r0, r3
    14b2:	f000 fcc1 	bl	1e38 <__free_veneer>
    14b6:	6a38      	ldr	r0, [r7, #32]
    14b8:	f000 fcbe 	bl	1e38 <__free_veneer>
    BN_DEL(bn_a);
    14bc:	69fb      	ldr	r3, [r7, #28]
    14be:	681b      	ldr	r3, [r3, #0]
    14c0:	4618      	mov	r0, r3
    14c2:	f000 fcb9 	bl	1e38 <__free_veneer>
    14c6:	69f8      	ldr	r0, [r7, #28]
    14c8:	f000 fcb6 	bl	1e38 <__free_veneer>
    return result;
    14cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    14ce:	4618      	mov	r0, r3
    14d0:	3740      	adds	r7, #64	; 0x40
    14d2:	46bd      	mov	sp, r7
    14d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    14d8:	080104e0 	.word	0x080104e0

000014dc <BN_rand>:

SECTION_FLASH int32_t BN_rand(BN *bn_x, const int32_t uint64_length) {
    14dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14e0:	b089      	sub	sp, #36	; 0x24
    14e2:	af00      	add	r7, sp, #0
    14e4:	60f8      	str	r0, [r7, #12]
    14e6:	60b9      	str	r1, [r7, #8]
    BN_INIT(bn_x);
    14e8:	68fb      	ldr	r3, [r7, #12]
    14ea:	681b      	ldr	r3, [r3, #0]
    14ec:	2288      	movs	r2, #136	; 0x88
    14ee:	2100      	movs	r1, #0
    14f0:	4618      	mov	r0, r3
    14f2:	f000 fcc5 	bl	1e80 <__memset_veneer>
    14f6:	68fb      	ldr	r3, [r7, #12]
    14f8:	2200      	movs	r2, #0
    14fa:	605a      	str	r2, [r3, #4]
    14fc:	68fb      	ldr	r3, [r7, #12]
    14fe:	2200      	movs	r2, #0
    1500:	609a      	str	r2, [r3, #8]
    uint32_t random_num = 0;
    1502:	2300      	movs	r3, #0
    1504:	617b      	str	r3, [r7, #20]
    for (int32_t i = 0; i != uint64_length; i++) {
    1506:	2300      	movs	r3, #0
    1508:	61fb      	str	r3, [r7, #28]
    150a:	e03a      	b.n	1582 <BN_rand+0xa6>
        for (int32_t j = 2; j--;) {
    150c:	2302      	movs	r3, #2
    150e:	61bb      	str	r3, [r7, #24]
    1510:	e02f      	b.n	1572 <BN_rand+0x96>
            bn_x->data[i] <<= 32;
    1512:	68fb      	ldr	r3, [r7, #12]
    1514:	681a      	ldr	r2, [r3, #0]
    1516:	69fb      	ldr	r3, [r7, #28]
    1518:	00db      	lsls	r3, r3, #3
    151a:	4413      	add	r3, r2
    151c:	e9d3 0100 	ldrd	r0, r1, [r3]
    1520:	68fb      	ldr	r3, [r7, #12]
    1522:	681a      	ldr	r2, [r3, #0]
    1524:	69fb      	ldr	r3, [r7, #28]
    1526:	00db      	lsls	r3, r3, #3
    1528:	18d6      	adds	r6, r2, r3
    152a:	f04f 0200 	mov.w	r2, #0
    152e:	f04f 0300 	mov.w	r3, #0
    1532:	0003      	movs	r3, r0
    1534:	2200      	movs	r2, #0
    1536:	e9c6 2300 	strd	r2, r3, [r6]
            HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
    153a:	f107 0314 	add.w	r3, r7, #20
    153e:	4619      	mov	r1, r3
    1540:	4829      	ldr	r0, [pc, #164]	; (15e8 <BN_rand+0x10c>)
    1542:	f000 fc7d 	bl	1e40 <__HAL_RNG_GenerateRandomNumber_veneer>
            bn_x->data[i] |= random_num;
    1546:	68fb      	ldr	r3, [r7, #12]
    1548:	681a      	ldr	r2, [r3, #0]
    154a:	69fb      	ldr	r3, [r7, #28]
    154c:	00db      	lsls	r3, r3, #3
    154e:	4413      	add	r3, r2
    1550:	e9d3 2300 	ldrd	r2, r3, [r3]
    1554:	6979      	ldr	r1, [r7, #20]
    1556:	2000      	movs	r0, #0
    1558:	460c      	mov	r4, r1
    155a:	4605      	mov	r5, r0
    155c:	68f9      	ldr	r1, [r7, #12]
    155e:	6808      	ldr	r0, [r1, #0]
    1560:	69f9      	ldr	r1, [r7, #28]
    1562:	00c9      	lsls	r1, r1, #3
    1564:	4401      	add	r1, r0
    1566:	ea42 0804 	orr.w	r8, r2, r4
    156a:	ea43 0905 	orr.w	r9, r3, r5
    156e:	e9c1 8900 	strd	r8, r9, [r1]
        for (int32_t j = 2; j--;) {
    1572:	69bb      	ldr	r3, [r7, #24]
    1574:	1e5a      	subs	r2, r3, #1
    1576:	61ba      	str	r2, [r7, #24]
    1578:	2b00      	cmp	r3, #0
    157a:	d1ca      	bne.n	1512 <BN_rand+0x36>
    for (int32_t i = 0; i != uint64_length; i++) {
    157c:	69fb      	ldr	r3, [r7, #28]
    157e:	3301      	adds	r3, #1
    1580:	61fb      	str	r3, [r7, #28]
    1582:	69fa      	ldr	r2, [r7, #28]
    1584:	68bb      	ldr	r3, [r7, #8]
    1586:	429a      	cmp	r2, r3
    1588:	d1c0      	bne.n	150c <BN_rand+0x30>
        }
    }
    bn_x->data[uint64_length - 1] |= 0x8000000000000000;
    158a:	68fb      	ldr	r3, [r7, #12]
    158c:	681a      	ldr	r2, [r3, #0]
    158e:	68b9      	ldr	r1, [r7, #8]
    1590:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    1594:	440b      	add	r3, r1
    1596:	00db      	lsls	r3, r3, #3
    1598:	4413      	add	r3, r2
    159a:	e9d3 0100 	ldrd	r0, r1, [r3]
    159e:	68fb      	ldr	r3, [r7, #12]
    15a0:	681a      	ldr	r2, [r3, #0]
    15a2:	68bc      	ldr	r4, [r7, #8]
    15a4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    15a8:	4423      	add	r3, r4
    15aa:	00db      	lsls	r3, r3, #3
    15ac:	4413      	add	r3, r2
    15ae:	6038      	str	r0, [r7, #0]
    15b0:	f041 4200 	orr.w	r2, r1, #2147483648	; 0x80000000
    15b4:	607a      	str	r2, [r7, #4]
    15b6:	e9d7 1200 	ldrd	r1, r2, [r7]
    15ba:	e9c3 1200 	strd	r1, r2, [r3]
    bn_x->data[0] |= 1;
    15be:	68fb      	ldr	r3, [r7, #12]
    15c0:	681b      	ldr	r3, [r3, #0]
    15c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    15c6:	68f9      	ldr	r1, [r7, #12]
    15c8:	6809      	ldr	r1, [r1, #0]
    15ca:	f042 0a01 	orr.w	sl, r2, #1
    15ce:	469b      	mov	fp, r3
    15d0:	e9c1 ab00 	strd	sl, fp, [r1]
    bn_x->uint64_length = uint64_length;
    15d4:	68ba      	ldr	r2, [r7, #8]
    15d6:	68fb      	ldr	r3, [r7, #12]
    15d8:	609a      	str	r2, [r3, #8]
    return EXIT_SUCCESS;
    15da:	2300      	movs	r3, #0
}
    15dc:	4618      	mov	r0, r3
    15de:	3724      	adds	r7, #36	; 0x24
    15e0:	46bd      	mov	sp, r7
    15e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15e6:	bf00      	nop
    15e8:	20000164 	.word	0x20000164

000015ec <prime_random>:
#include "rsa_func.h"
#include "usart_func.h"
#include <stdio.h>
#include <stdlib.h>

SECTION_ITCM void prime_random(void) {
    15ec:	b590      	push	{r4, r7, lr}
    15ee:	b08f      	sub	sp, #60	; 0x3c
    15f0:	af02      	add	r7, sp, #8
    BN *bn_dec_2;
    BN_NEW(bn_dec_2);
    15f2:	2110      	movs	r1, #16
    15f4:	2001      	movs	r0, #1
    15f6:	f000 fc37 	bl	1e68 <__calloc_veneer>
    15fa:	4603      	mov	r3, r0
    15fc:	61bb      	str	r3, [r7, #24]
    15fe:	2108      	movs	r1, #8
    1600:	2011      	movs	r0, #17
    1602:	f000 fc31 	bl	1e68 <__calloc_veneer>
    1606:	4603      	mov	r3, r0
    1608:	461a      	mov	r2, r3
    160a:	69bb      	ldr	r3, [r7, #24]
    160c:	601a      	str	r2, [r3, #0]
    BN_DEC2BN(2, bn_dec_2);
    160e:	69bb      	ldr	r3, [r7, #24]
    1610:	681b      	ldr	r3, [r3, #0]
    1612:	2288      	movs	r2, #136	; 0x88
    1614:	2100      	movs	r1, #0
    1616:	4618      	mov	r0, r3
    1618:	f000 fc32 	bl	1e80 <__memset_veneer>
    161c:	69bb      	ldr	r3, [r7, #24]
    161e:	2200      	movs	r2, #0
    1620:	605a      	str	r2, [r3, #4]
    1622:	69bb      	ldr	r3, [r7, #24]
    1624:	2200      	movs	r2, #0
    1626:	609a      	str	r2, [r3, #8]
    1628:	69bb      	ldr	r3, [r7, #24]
    162a:	6819      	ldr	r1, [r3, #0]
    162c:	f04f 0202 	mov.w	r2, #2
    1630:	f04f 0300 	mov.w	r3, #0
    1634:	e9c1 2300 	strd	r2, r3, [r1]
    1638:	69bb      	ldr	r3, [r7, #24]
    163a:	2201      	movs	r2, #1
    163c:	609a      	str	r2, [r3, #8]
    BN *bn_prime[2];
    BN_NEW(bn_prime[0]);
    163e:	2110      	movs	r1, #16
    1640:	2001      	movs	r0, #1
    1642:	f000 fc11 	bl	1e68 <__calloc_veneer>
    1646:	4603      	mov	r3, r0
    1648:	60fb      	str	r3, [r7, #12]
    164a:	68fc      	ldr	r4, [r7, #12]
    164c:	2108      	movs	r1, #8
    164e:	2011      	movs	r0, #17
    1650:	f000 fc0a 	bl	1e68 <__calloc_veneer>
    1654:	4603      	mov	r3, r0
    1656:	6023      	str	r3, [r4, #0]
    BN_NEW(bn_prime[1]);
    1658:	2110      	movs	r1, #16
    165a:	2001      	movs	r0, #1
    165c:	f000 fc04 	bl	1e68 <__calloc_veneer>
    1660:	4603      	mov	r3, r0
    1662:	613b      	str	r3, [r7, #16]
    1664:	693c      	ldr	r4, [r7, #16]
    1666:	2108      	movs	r1, #8
    1668:	2011      	movs	r0, #17
    166a:	f000 fbfd 	bl	1e68 <__calloc_veneer>
    166e:	4603      	mov	r3, r0
    1670:	6023      	str	r3, [r4, #0]
    int32_t rand_reset_count = 0;
    1672:	2300      	movs	r3, #0
    1674:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t bn_rand_num = 0;
    1676:	2300      	movs	r3, #0
    1678:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t bn_prime_num_cm7 = 0;
    167a:	2300      	movs	r3, #0
    167c:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t bn_prime_num[2] = { 0 };
    167e:	1d3b      	adds	r3, r7, #4
    1680:	2200      	movs	r2, #0
    1682:	601a      	str	r2, [r3, #0]
    1684:	605a      	str	r2, [r3, #4]
    uint32_t rand_reset = RAND_RESET;
    1686:	2301      	movs	r3, #1
    1688:	623b      	str	r3, [r7, #32]
    char *str = calloc(1024, sizeof(char));
    168a:	2101      	movs	r1, #1
    168c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    1690:	f000 fbea 	bl	1e68 <__calloc_veneer>
    1694:	4603      	mov	r3, r0
    1696:	617b      	str	r3, [r7, #20]
    for (bn_prime_num_cm7 = 0; bn_prime_num_cm7 != 2; bn_prime_num_cm7++) {
    1698:	2300      	movs	r3, #0
    169a:	627b      	str	r3, [r7, #36]	; 0x24
    169c:	e061      	b.n	1762 <prime_random+0x176>
        BN_rand(bn_prime[bn_prime_num_cm7], RAND_SIZE);
    169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16a0:	009b      	lsls	r3, r3, #2
    16a2:	3330      	adds	r3, #48	; 0x30
    16a4:	443b      	add	r3, r7
    16a6:	f853 3c24 	ldr.w	r3, [r3, #-36]
    16aa:	2108      	movs	r1, #8
    16ac:	4618      	mov	r0, r3
    16ae:	f7ff ff15 	bl	14dc <BN_rand>
        for (;;) {
            BN_bn2str(str, bn_prime[bn_prime_num_cm7]);
    16b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16b4:	009b      	lsls	r3, r3, #2
    16b6:	3330      	adds	r3, #48	; 0x30
    16b8:	443b      	add	r3, r7
    16ba:	f853 3c24 	ldr.w	r3, [r3, #-36]
    16be:	4619      	mov	r1, r3
    16c0:	6978      	ldr	r0, [r7, #20]
    16c2:	f7fe fc9d 	bl	0 <BN_bn2str>
            usart3_printf("M7 %03d %03d %03d: %s\n\n", bn_prime_num_cm7, rand_reset, ++bn_rand_num, str);
    16c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16c8:	3301      	adds	r3, #1
    16ca:	62bb      	str	r3, [r7, #40]	; 0x28
    16cc:	697b      	ldr	r3, [r7, #20]
    16ce:	9300      	str	r3, [sp, #0]
    16d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    16d2:	6a3a      	ldr	r2, [r7, #32]
    16d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    16d6:	4851      	ldr	r0, [pc, #324]	; (181c <prime_random+0x230>)
    16d8:	f000 fbba 	bl	1e50 <__usart3_printf_veneer>
            if (EXIT_SUCCESS == BN_Miller_Rabin(bn_prime[bn_prime_num_cm7])) {
    16dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16de:	009b      	lsls	r3, r3, #2
    16e0:	3330      	adds	r3, #48	; 0x30
    16e2:	443b      	add	r3, r7
    16e4:	f853 3c24 	ldr.w	r3, [r3, #-36]
    16e8:	4618      	mov	r0, r3
    16ea:	f7ff fd97 	bl	121c <BN_Miller_Rabin>
    16ee:	4603      	mov	r3, r0
    16f0:	2b00      	cmp	r3, #0
    16f2:	d10b      	bne.n	170c <prime_random+0x120>
                rand_reset = RAND_RESET;
    16f4:	2301      	movs	r3, #1
    16f6:	623b      	str	r3, [r7, #32]
                rand_reset_count = 0;
    16f8:	2300      	movs	r3, #0
    16fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                bn_prime_num[bn_prime_num_cm7] = bn_rand_num;
    16fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16fe:	009b      	lsls	r3, r3, #2
    1700:	3330      	adds	r3, #48	; 0x30
    1702:	443b      	add	r3, r7
    1704:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1706:	f843 2c2c 	str.w	r2, [r3, #-44]
                break;
    170a:	e027      	b.n	175c <prime_random+0x170>
            }
            if (rand_reset == ++rand_reset_count) {
    170c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    170e:	3301      	adds	r3, #1
    1710:	62fb      	str	r3, [r7, #44]	; 0x2c
    1712:	6a3b      	ldr	r3, [r7, #32]
    1714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1716:	429a      	cmp	r2, r3
    1718:	d10f      	bne.n	173a <prime_random+0x14e>
                rand_reset <<= 1;
    171a:	6a3b      	ldr	r3, [r7, #32]
    171c:	005b      	lsls	r3, r3, #1
    171e:	623b      	str	r3, [r7, #32]
                rand_reset_count = 0;
    1720:	2300      	movs	r3, #0
    1722:	62fb      	str	r3, [r7, #44]	; 0x2c
                BN_rand(bn_prime[bn_prime_num_cm7], RAND_SIZE);
    1724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1726:	009b      	lsls	r3, r3, #2
    1728:	3330      	adds	r3, #48	; 0x30
    172a:	443b      	add	r3, r7
    172c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    1730:	2108      	movs	r1, #8
    1732:	4618      	mov	r0, r3
    1734:	f7ff fed2 	bl	14dc <BN_rand>
    1738:	e7bb      	b.n	16b2 <prime_random+0xc6>
            } else {
                BN_add(bn_prime[bn_prime_num_cm7], bn_dec_2, bn_prime[bn_prime_num_cm7]);
    173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    173c:	009b      	lsls	r3, r3, #2
    173e:	3330      	adds	r3, #48	; 0x30
    1740:	443b      	add	r3, r7
    1742:	f853 0c24 	ldr.w	r0, [r3, #-36]
    1746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1748:	009b      	lsls	r3, r3, #2
    174a:	3330      	adds	r3, #48	; 0x30
    174c:	443b      	add	r3, r7
    174e:	f853 3c24 	ldr.w	r3, [r3, #-36]
    1752:	461a      	mov	r2, r3
    1754:	69b9      	ldr	r1, [r7, #24]
    1756:	f7fe fd7d 	bl	254 <BN_add>
            BN_bn2str(str, bn_prime[bn_prime_num_cm7]);
    175a:	e7aa      	b.n	16b2 <prime_random+0xc6>
    for (bn_prime_num_cm7 = 0; bn_prime_num_cm7 != 2; bn_prime_num_cm7++) {
    175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    175e:	3301      	adds	r3, #1
    1760:	627b      	str	r3, [r7, #36]	; 0x24
    1762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1764:	2b02      	cmp	r3, #2
    1766:	d19a      	bne.n	169e <prime_random+0xb2>
            }
        }
    }
    usart3_printf("CORE_CM7 DONE\n\n");
    1768:	482d      	ldr	r0, [pc, #180]	; (1820 <prime_random+0x234>)
    176a:	f000 fb71 	bl	1e50 <__usart3_printf_veneer>
    for (int32_t i = 0; i != bn_prime_num_cm7; i++) {
    176e:	2300      	movs	r3, #0
    1770:	61fb      	str	r3, [r7, #28]
    1772:	e028      	b.n	17c6 <prime_random+0x1da>
        bn_prime[i]->uint64_length = BN_uint64_length(bn_prime[i]);
    1774:	69fb      	ldr	r3, [r7, #28]
    1776:	009b      	lsls	r3, r3, #2
    1778:	3330      	adds	r3, #48	; 0x30
    177a:	443b      	add	r3, r7
    177c:	f853 3c24 	ldr.w	r3, [r3, #-36]
    1780:	4618      	mov	r0, r3
    1782:	f7fe fcd9 	bl	138 <BN_uint64_length>
    1786:	4602      	mov	r2, r0
    1788:	69fb      	ldr	r3, [r7, #28]
    178a:	009b      	lsls	r3, r3, #2
    178c:	3330      	adds	r3, #48	; 0x30
    178e:	443b      	add	r3, r7
    1790:	f853 3c24 	ldr.w	r3, [r3, #-36]
    1794:	609a      	str	r2, [r3, #8]
        BN_bn2str(str, bn_prime[i]);
    1796:	69fb      	ldr	r3, [r7, #28]
    1798:	009b      	lsls	r3, r3, #2
    179a:	3330      	adds	r3, #48	; 0x30
    179c:	443b      	add	r3, r7
    179e:	f853 3c24 	ldr.w	r3, [r3, #-36]
    17a2:	4619      	mov	r1, r3
    17a4:	6978      	ldr	r0, [r7, #20]
    17a6:	f7fe fc2b 	bl	0 <BN_bn2str>
        usart3_printf("PRIME M7 %03d %03d: %s\n\n", i, bn_prime_num[i], str);
    17aa:	69fb      	ldr	r3, [r7, #28]
    17ac:	009b      	lsls	r3, r3, #2
    17ae:	3330      	adds	r3, #48	; 0x30
    17b0:	443b      	add	r3, r7
    17b2:	f853 2c2c 	ldr.w	r2, [r3, #-44]
    17b6:	697b      	ldr	r3, [r7, #20]
    17b8:	69f9      	ldr	r1, [r7, #28]
    17ba:	481a      	ldr	r0, [pc, #104]	; (1824 <prime_random+0x238>)
    17bc:	f000 fb48 	bl	1e50 <__usart3_printf_veneer>
    for (int32_t i = 0; i != bn_prime_num_cm7; i++) {
    17c0:	69fb      	ldr	r3, [r7, #28]
    17c2:	3301      	adds	r3, #1
    17c4:	61fb      	str	r3, [r7, #28]
    17c6:	69fa      	ldr	r2, [r7, #28]
    17c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    17ca:	429a      	cmp	r2, r3
    17cc:	d1d2      	bne.n	1774 <prime_random+0x188>
    }
    rsa_set_prime(bn_prime);
    17ce:	f107 030c 	add.w	r3, r7, #12
    17d2:	4618      	mov	r0, r3
    17d4:	f000 fb40 	bl	1e58 <__rsa_set_prime_veneer>
    free(str);
    17d8:	6978      	ldr	r0, [r7, #20]
    17da:	f000 fb2d 	bl	1e38 <__free_veneer>
    BN_DEL(bn_dec_2);
    17de:	69bb      	ldr	r3, [r7, #24]
    17e0:	681b      	ldr	r3, [r3, #0]
    17e2:	4618      	mov	r0, r3
    17e4:	f000 fb28 	bl	1e38 <__free_veneer>
    17e8:	69b8      	ldr	r0, [r7, #24]
    17ea:	f000 fb25 	bl	1e38 <__free_veneer>
    BN_DEL(bn_prime[0]);
    17ee:	68fb      	ldr	r3, [r7, #12]
    17f0:	681b      	ldr	r3, [r3, #0]
    17f2:	4618      	mov	r0, r3
    17f4:	f000 fb20 	bl	1e38 <__free_veneer>
    17f8:	68fb      	ldr	r3, [r7, #12]
    17fa:	4618      	mov	r0, r3
    17fc:	f000 fb1c 	bl	1e38 <__free_veneer>
    BN_DEL(bn_prime[1]);
    1800:	693b      	ldr	r3, [r7, #16]
    1802:	681b      	ldr	r3, [r3, #0]
    1804:	4618      	mov	r0, r3
    1806:	f000 fb17 	bl	1e38 <__free_veneer>
    180a:	693b      	ldr	r3, [r7, #16]
    180c:	4618      	mov	r0, r3
    180e:	f000 fb13 	bl	1e38 <__free_veneer>
}
    1812:	bf00      	nop
    1814:	3734      	adds	r7, #52	; 0x34
    1816:	46bd      	mov	sp, r7
    1818:	bd90      	pop	{r4, r7, pc}
    181a:	bf00      	nop
    181c:	0801038c 	.word	0x0801038c
    1820:	080103a4 	.word	0x080103a4
    1824:	080103b4 	.word	0x080103b4

00001828 <rsa_init_new>:
SECTION_FLASH int32_t rsa_init_new(void) {
    1828:	b598      	push	{r3, r4, r7, lr}
    182a:	af00      	add	r7, sp, #0
    BN_NEW(e);
    182c:	2110      	movs	r1, #16
    182e:	2001      	movs	r0, #1
    1830:	f000 fb1a 	bl	1e68 <__calloc_veneer>
    1834:	4603      	mov	r3, r0
    1836:	461a      	mov	r2, r3
    1838:	4b66      	ldr	r3, [pc, #408]	; (19d4 <rsa_init_new+0x1ac>)
    183a:	601a      	str	r2, [r3, #0]
    183c:	4b65      	ldr	r3, [pc, #404]	; (19d4 <rsa_init_new+0x1ac>)
    183e:	681c      	ldr	r4, [r3, #0]
    1840:	2108      	movs	r1, #8
    1842:	2011      	movs	r0, #17
    1844:	f000 fb10 	bl	1e68 <__calloc_veneer>
    1848:	4603      	mov	r3, r0
    184a:	6023      	str	r3, [r4, #0]
    BN_NEW(p1);
    184c:	2110      	movs	r1, #16
    184e:	2001      	movs	r0, #1
    1850:	f000 fb0a 	bl	1e68 <__calloc_veneer>
    1854:	4603      	mov	r3, r0
    1856:	461a      	mov	r2, r3
    1858:	4b5f      	ldr	r3, [pc, #380]	; (19d8 <rsa_init_new+0x1b0>)
    185a:	601a      	str	r2, [r3, #0]
    185c:	4b5e      	ldr	r3, [pc, #376]	; (19d8 <rsa_init_new+0x1b0>)
    185e:	681c      	ldr	r4, [r3, #0]
    1860:	2108      	movs	r1, #8
    1862:	2011      	movs	r0, #17
    1864:	f000 fb00 	bl	1e68 <__calloc_veneer>
    1868:	4603      	mov	r3, r0
    186a:	6023      	str	r3, [r4, #0]
    BN_NEW(p2);
    186c:	2110      	movs	r1, #16
    186e:	2001      	movs	r0, #1
    1870:	f000 fafa 	bl	1e68 <__calloc_veneer>
    1874:	4603      	mov	r3, r0
    1876:	461a      	mov	r2, r3
    1878:	4b58      	ldr	r3, [pc, #352]	; (19dc <rsa_init_new+0x1b4>)
    187a:	601a      	str	r2, [r3, #0]
    187c:	4b57      	ldr	r3, [pc, #348]	; (19dc <rsa_init_new+0x1b4>)
    187e:	681c      	ldr	r4, [r3, #0]
    1880:	2108      	movs	r1, #8
    1882:	2011      	movs	r0, #17
    1884:	f000 faf0 	bl	1e68 <__calloc_veneer>
    1888:	4603      	mov	r3, r0
    188a:	6023      	str	r3, [r4, #0]
    BN_NEW(p);
    188c:	2110      	movs	r1, #16
    188e:	2001      	movs	r0, #1
    1890:	f000 faea 	bl	1e68 <__calloc_veneer>
    1894:	4603      	mov	r3, r0
    1896:	461a      	mov	r2, r3
    1898:	4b51      	ldr	r3, [pc, #324]	; (19e0 <rsa_init_new+0x1b8>)
    189a:	601a      	str	r2, [r3, #0]
    189c:	4b50      	ldr	r3, [pc, #320]	; (19e0 <rsa_init_new+0x1b8>)
    189e:	681c      	ldr	r4, [r3, #0]
    18a0:	2108      	movs	r1, #8
    18a2:	2011      	movs	r0, #17
    18a4:	f000 fae0 	bl	1e68 <__calloc_veneer>
    18a8:	4603      	mov	r3, r0
    18aa:	6023      	str	r3, [r4, #0]
    BN_NEW(q);
    18ac:	2110      	movs	r1, #16
    18ae:	2001      	movs	r0, #1
    18b0:	f000 fada 	bl	1e68 <__calloc_veneer>
    18b4:	4603      	mov	r3, r0
    18b6:	461a      	mov	r2, r3
    18b8:	4b4a      	ldr	r3, [pc, #296]	; (19e4 <rsa_init_new+0x1bc>)
    18ba:	601a      	str	r2, [r3, #0]
    18bc:	4b49      	ldr	r3, [pc, #292]	; (19e4 <rsa_init_new+0x1bc>)
    18be:	681c      	ldr	r4, [r3, #0]
    18c0:	2108      	movs	r1, #8
    18c2:	2011      	movs	r0, #17
    18c4:	f000 fad0 	bl	1e68 <__calloc_veneer>
    18c8:	4603      	mov	r3, r0
    18ca:	6023      	str	r3, [r4, #0]
    BN_NEW(n);
    18cc:	2110      	movs	r1, #16
    18ce:	2001      	movs	r0, #1
    18d0:	f000 faca 	bl	1e68 <__calloc_veneer>
    18d4:	4603      	mov	r3, r0
    18d6:	461a      	mov	r2, r3
    18d8:	4b43      	ldr	r3, [pc, #268]	; (19e8 <rsa_init_new+0x1c0>)
    18da:	601a      	str	r2, [r3, #0]
    18dc:	4b42      	ldr	r3, [pc, #264]	; (19e8 <rsa_init_new+0x1c0>)
    18de:	681c      	ldr	r4, [r3, #0]
    18e0:	2108      	movs	r1, #8
    18e2:	2011      	movs	r0, #17
    18e4:	f000 fac0 	bl	1e68 <__calloc_veneer>
    18e8:	4603      	mov	r3, r0
    18ea:	6023      	str	r3, [r4, #0]
    BN_NEW(p_minus_1);
    18ec:	2110      	movs	r1, #16
    18ee:	2001      	movs	r0, #1
    18f0:	f000 faba 	bl	1e68 <__calloc_veneer>
    18f4:	4603      	mov	r3, r0
    18f6:	461a      	mov	r2, r3
    18f8:	4b3c      	ldr	r3, [pc, #240]	; (19ec <rsa_init_new+0x1c4>)
    18fa:	601a      	str	r2, [r3, #0]
    18fc:	4b3b      	ldr	r3, [pc, #236]	; (19ec <rsa_init_new+0x1c4>)
    18fe:	681c      	ldr	r4, [r3, #0]
    1900:	2108      	movs	r1, #8
    1902:	2011      	movs	r0, #17
    1904:	f000 fab0 	bl	1e68 <__calloc_veneer>
    1908:	4603      	mov	r3, r0
    190a:	6023      	str	r3, [r4, #0]
    BN_NEW(q_minus_1);
    190c:	2110      	movs	r1, #16
    190e:	2001      	movs	r0, #1
    1910:	f000 faaa 	bl	1e68 <__calloc_veneer>
    1914:	4603      	mov	r3, r0
    1916:	461a      	mov	r2, r3
    1918:	4b35      	ldr	r3, [pc, #212]	; (19f0 <rsa_init_new+0x1c8>)
    191a:	601a      	str	r2, [r3, #0]
    191c:	4b34      	ldr	r3, [pc, #208]	; (19f0 <rsa_init_new+0x1c8>)
    191e:	681c      	ldr	r4, [r3, #0]
    1920:	2108      	movs	r1, #8
    1922:	2011      	movs	r0, #17
    1924:	f000 faa0 	bl	1e68 <__calloc_veneer>
    1928:	4603      	mov	r3, r0
    192a:	6023      	str	r3, [r4, #0]
    BN_NEW(phi);
    192c:	2110      	movs	r1, #16
    192e:	2001      	movs	r0, #1
    1930:	f000 fa9a 	bl	1e68 <__calloc_veneer>
    1934:	4603      	mov	r3, r0
    1936:	461a      	mov	r2, r3
    1938:	4b2e      	ldr	r3, [pc, #184]	; (19f4 <rsa_init_new+0x1cc>)
    193a:	601a      	str	r2, [r3, #0]
    193c:	4b2d      	ldr	r3, [pc, #180]	; (19f4 <rsa_init_new+0x1cc>)
    193e:	681c      	ldr	r4, [r3, #0]
    1940:	2108      	movs	r1, #8
    1942:	2011      	movs	r0, #17
    1944:	f000 fa90 	bl	1e68 <__calloc_veneer>
    1948:	4603      	mov	r3, r0
    194a:	6023      	str	r3, [r4, #0]
    BN_NEW(d);
    194c:	2110      	movs	r1, #16
    194e:	2001      	movs	r0, #1
    1950:	f000 fa8a 	bl	1e68 <__calloc_veneer>
    1954:	4603      	mov	r3, r0
    1956:	461a      	mov	r2, r3
    1958:	4b27      	ldr	r3, [pc, #156]	; (19f8 <rsa_init_new+0x1d0>)
    195a:	601a      	str	r2, [r3, #0]
    195c:	4b26      	ldr	r3, [pc, #152]	; (19f8 <rsa_init_new+0x1d0>)
    195e:	681c      	ldr	r4, [r3, #0]
    1960:	2108      	movs	r1, #8
    1962:	2011      	movs	r0, #17
    1964:	f000 fa80 	bl	1e68 <__calloc_veneer>
    1968:	4603      	mov	r3, r0
    196a:	6023      	str	r3, [r4, #0]
    BN_NEW(dP);
    196c:	2110      	movs	r1, #16
    196e:	2001      	movs	r0, #1
    1970:	f000 fa7a 	bl	1e68 <__calloc_veneer>
    1974:	4603      	mov	r3, r0
    1976:	461a      	mov	r2, r3
    1978:	4b20      	ldr	r3, [pc, #128]	; (19fc <rsa_init_new+0x1d4>)
    197a:	601a      	str	r2, [r3, #0]
    197c:	4b1f      	ldr	r3, [pc, #124]	; (19fc <rsa_init_new+0x1d4>)
    197e:	681c      	ldr	r4, [r3, #0]
    1980:	2108      	movs	r1, #8
    1982:	2011      	movs	r0, #17
    1984:	f000 fa70 	bl	1e68 <__calloc_veneer>
    1988:	4603      	mov	r3, r0
    198a:	6023      	str	r3, [r4, #0]
    BN_NEW(dQ);
    198c:	2110      	movs	r1, #16
    198e:	2001      	movs	r0, #1
    1990:	f000 fa6a 	bl	1e68 <__calloc_veneer>
    1994:	4603      	mov	r3, r0
    1996:	461a      	mov	r2, r3
    1998:	4b19      	ldr	r3, [pc, #100]	; (1a00 <rsa_init_new+0x1d8>)
    199a:	601a      	str	r2, [r3, #0]
    199c:	4b18      	ldr	r3, [pc, #96]	; (1a00 <rsa_init_new+0x1d8>)
    199e:	681c      	ldr	r4, [r3, #0]
    19a0:	2108      	movs	r1, #8
    19a2:	2011      	movs	r0, #17
    19a4:	f000 fa60 	bl	1e68 <__calloc_veneer>
    19a8:	4603      	mov	r3, r0
    19aa:	6023      	str	r3, [r4, #0]
    BN_NEW(qInv);
    19ac:	2110      	movs	r1, #16
    19ae:	2001      	movs	r0, #1
    19b0:	f000 fa5a 	bl	1e68 <__calloc_veneer>
    19b4:	4603      	mov	r3, r0
    19b6:	461a      	mov	r2, r3
    19b8:	4b12      	ldr	r3, [pc, #72]	; (1a04 <rsa_init_new+0x1dc>)
    19ba:	601a      	str	r2, [r3, #0]
    19bc:	4b11      	ldr	r3, [pc, #68]	; (1a04 <rsa_init_new+0x1dc>)
    19be:	681c      	ldr	r4, [r3, #0]
    19c0:	2108      	movs	r1, #8
    19c2:	2011      	movs	r0, #17
    19c4:	f000 fa50 	bl	1e68 <__calloc_veneer>
    19c8:	4603      	mov	r3, r0
    19ca:	6023      	str	r3, [r4, #0]
    return EXIT_SUCCESS;
    19cc:	2300      	movs	r3, #0
}
    19ce:	4618      	mov	r0, r3
    19d0:	bd98      	pop	{r3, r4, r7, pc}
    19d2:	bf00      	nop
    19d4:	2000076c 	.word	0x2000076c
    19d8:	20000758 	.word	0x20000758
    19dc:	2000075c 	.word	0x2000075c
    19e0:	20000750 	.word	0x20000750
    19e4:	20000754 	.word	0x20000754
    19e8:	20000770 	.word	0x20000770
    19ec:	20000764 	.word	0x20000764
    19f0:	20000768 	.word	0x20000768
    19f4:	20000760 	.word	0x20000760
    19f8:	20000774 	.word	0x20000774
    19fc:	20000778 	.word	0x20000778
    1a00:	2000077c 	.word	0x2000077c
    1a04:	20000780 	.word	0x20000780

00001a08 <rsa_init>:
SECTION_FLASH int32_t rsa_init(void) {
    1a08:	b580      	push	{r7, lr}
    1a0a:	b082      	sub	sp, #8
    1a0c:	af00      	add	r7, sp, #0
    BN_NEW(bn_1);
    1a0e:	2110      	movs	r1, #16
    1a10:	2001      	movs	r0, #1
    1a12:	f000 fa29 	bl	1e68 <__calloc_veneer>
    1a16:	4603      	mov	r3, r0
    1a18:	603b      	str	r3, [r7, #0]
    1a1a:	2108      	movs	r1, #8
    1a1c:	2011      	movs	r0, #17
    1a1e:	f000 fa23 	bl	1e68 <__calloc_veneer>
    1a22:	4603      	mov	r3, r0
    1a24:	461a      	mov	r2, r3
    1a26:	683b      	ldr	r3, [r7, #0]
    1a28:	601a      	str	r2, [r3, #0]
    BN_DEC2BN(1, bn_1)
    1a2a:	683b      	ldr	r3, [r7, #0]
    1a2c:	681b      	ldr	r3, [r3, #0]
    1a2e:	2288      	movs	r2, #136	; 0x88
    1a30:	2100      	movs	r1, #0
    1a32:	4618      	mov	r0, r3
    1a34:	f000 fa24 	bl	1e80 <__memset_veneer>
    1a38:	683b      	ldr	r3, [r7, #0]
    1a3a:	2200      	movs	r2, #0
    1a3c:	605a      	str	r2, [r3, #4]
    1a3e:	683b      	ldr	r3, [r7, #0]
    1a40:	2200      	movs	r2, #0
    1a42:	609a      	str	r2, [r3, #8]
    1a44:	683b      	ldr	r3, [r7, #0]
    1a46:	6819      	ldr	r1, [r3, #0]
    1a48:	f04f 0201 	mov.w	r2, #1
    1a4c:	f04f 0300 	mov.w	r3, #0
    1a50:	e9c1 2300 	strd	r2, r3, [r1]
    1a54:	683b      	ldr	r3, [r7, #0]
    1a56:	2201      	movs	r2, #1
    1a58:	609a      	str	r2, [r3, #8]
    BN_DEC2BN(0x10001, e);
    1a5a:	4b7a      	ldr	r3, [pc, #488]	; (1c44 <rsa_init+0x23c>)
    1a5c:	681b      	ldr	r3, [r3, #0]
    1a5e:	681b      	ldr	r3, [r3, #0]
    1a60:	2288      	movs	r2, #136	; 0x88
    1a62:	2100      	movs	r1, #0
    1a64:	4618      	mov	r0, r3
    1a66:	f000 fa0b 	bl	1e80 <__memset_veneer>
    1a6a:	4b76      	ldr	r3, [pc, #472]	; (1c44 <rsa_init+0x23c>)
    1a6c:	681b      	ldr	r3, [r3, #0]
    1a6e:	2200      	movs	r2, #0
    1a70:	605a      	str	r2, [r3, #4]
    1a72:	4b74      	ldr	r3, [pc, #464]	; (1c44 <rsa_init+0x23c>)
    1a74:	681b      	ldr	r3, [r3, #0]
    1a76:	2200      	movs	r2, #0
    1a78:	609a      	str	r2, [r3, #8]
    1a7a:	4b72      	ldr	r3, [pc, #456]	; (1c44 <rsa_init+0x23c>)
    1a7c:	681b      	ldr	r3, [r3, #0]
    1a7e:	6819      	ldr	r1, [r3, #0]
    1a80:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    1a84:	f04f 0300 	mov.w	r3, #0
    1a88:	e9c1 2300 	strd	r2, r3, [r1]
    1a8c:	4b6d      	ldr	r3, [pc, #436]	; (1c44 <rsa_init+0x23c>)
    1a8e:	681b      	ldr	r3, [r3, #0]
    1a90:	2201      	movs	r2, #1
    1a92:	609a      	str	r2, [r3, #8]
    if (1 == BN_cmp(p1, p2)) {
    1a94:	4b6c      	ldr	r3, [pc, #432]	; (1c48 <rsa_init+0x240>)
    1a96:	681b      	ldr	r3, [r3, #0]
    1a98:	4a6c      	ldr	r2, [pc, #432]	; (1c4c <rsa_init+0x244>)
    1a9a:	6812      	ldr	r2, [r2, #0]
    1a9c:	4611      	mov	r1, r2
    1a9e:	4618      	mov	r0, r3
    1aa0:	f7fe ff02 	bl	8a8 <BN_cmp>
    1aa4:	4603      	mov	r3, r0
    1aa6:	2b01      	cmp	r3, #1
    1aa8:	d12c      	bne.n	1b04 <rsa_init+0xfc>
        BN_COPY(p, p1);
    1aaa:	4b69      	ldr	r3, [pc, #420]	; (1c50 <rsa_init+0x248>)
    1aac:	681b      	ldr	r3, [r3, #0]
    1aae:	6818      	ldr	r0, [r3, #0]
    1ab0:	4b65      	ldr	r3, [pc, #404]	; (1c48 <rsa_init+0x240>)
    1ab2:	681b      	ldr	r3, [r3, #0]
    1ab4:	681b      	ldr	r3, [r3, #0]
    1ab6:	2288      	movs	r2, #136	; 0x88
    1ab8:	4619      	mov	r1, r3
    1aba:	f000 f9dd 	bl	1e78 <__memcpy_veneer>
    1abe:	4b62      	ldr	r3, [pc, #392]	; (1c48 <rsa_init+0x240>)
    1ac0:	681a      	ldr	r2, [r3, #0]
    1ac2:	4b63      	ldr	r3, [pc, #396]	; (1c50 <rsa_init+0x248>)
    1ac4:	681b      	ldr	r3, [r3, #0]
    1ac6:	6852      	ldr	r2, [r2, #4]
    1ac8:	605a      	str	r2, [r3, #4]
    1aca:	4b5f      	ldr	r3, [pc, #380]	; (1c48 <rsa_init+0x240>)
    1acc:	681a      	ldr	r2, [r3, #0]
    1ace:	4b60      	ldr	r3, [pc, #384]	; (1c50 <rsa_init+0x248>)
    1ad0:	681b      	ldr	r3, [r3, #0]
    1ad2:	6892      	ldr	r2, [r2, #8]
    1ad4:	609a      	str	r2, [r3, #8]
        BN_COPY(q, p2);
    1ad6:	4b5f      	ldr	r3, [pc, #380]	; (1c54 <rsa_init+0x24c>)
    1ad8:	681b      	ldr	r3, [r3, #0]
    1ada:	6818      	ldr	r0, [r3, #0]
    1adc:	4b5b      	ldr	r3, [pc, #364]	; (1c4c <rsa_init+0x244>)
    1ade:	681b      	ldr	r3, [r3, #0]
    1ae0:	681b      	ldr	r3, [r3, #0]
    1ae2:	2288      	movs	r2, #136	; 0x88
    1ae4:	4619      	mov	r1, r3
    1ae6:	f000 f9c7 	bl	1e78 <__memcpy_veneer>
    1aea:	4b58      	ldr	r3, [pc, #352]	; (1c4c <rsa_init+0x244>)
    1aec:	681a      	ldr	r2, [r3, #0]
    1aee:	4b59      	ldr	r3, [pc, #356]	; (1c54 <rsa_init+0x24c>)
    1af0:	681b      	ldr	r3, [r3, #0]
    1af2:	6852      	ldr	r2, [r2, #4]
    1af4:	605a      	str	r2, [r3, #4]
    1af6:	4b55      	ldr	r3, [pc, #340]	; (1c4c <rsa_init+0x244>)
    1af8:	681a      	ldr	r2, [r3, #0]
    1afa:	4b56      	ldr	r3, [pc, #344]	; (1c54 <rsa_init+0x24c>)
    1afc:	681b      	ldr	r3, [r3, #0]
    1afe:	6892      	ldr	r2, [r2, #8]
    1b00:	609a      	str	r2, [r3, #8]
    1b02:	e02b      	b.n	1b5c <rsa_init+0x154>
        BN_COPY(p, p2);
    1b04:	4b52      	ldr	r3, [pc, #328]	; (1c50 <rsa_init+0x248>)
    1b06:	681b      	ldr	r3, [r3, #0]
    1b08:	6818      	ldr	r0, [r3, #0]
    1b0a:	4b50      	ldr	r3, [pc, #320]	; (1c4c <rsa_init+0x244>)
    1b0c:	681b      	ldr	r3, [r3, #0]
    1b0e:	681b      	ldr	r3, [r3, #0]
    1b10:	2288      	movs	r2, #136	; 0x88
    1b12:	4619      	mov	r1, r3
    1b14:	f000 f9b0 	bl	1e78 <__memcpy_veneer>
    1b18:	4b4c      	ldr	r3, [pc, #304]	; (1c4c <rsa_init+0x244>)
    1b1a:	681a      	ldr	r2, [r3, #0]
    1b1c:	4b4c      	ldr	r3, [pc, #304]	; (1c50 <rsa_init+0x248>)
    1b1e:	681b      	ldr	r3, [r3, #0]
    1b20:	6852      	ldr	r2, [r2, #4]
    1b22:	605a      	str	r2, [r3, #4]
    1b24:	4b49      	ldr	r3, [pc, #292]	; (1c4c <rsa_init+0x244>)
    1b26:	681a      	ldr	r2, [r3, #0]
    1b28:	4b49      	ldr	r3, [pc, #292]	; (1c50 <rsa_init+0x248>)
    1b2a:	681b      	ldr	r3, [r3, #0]
    1b2c:	6892      	ldr	r2, [r2, #8]
    1b2e:	609a      	str	r2, [r3, #8]
        BN_COPY(q, p1);
    1b30:	4b48      	ldr	r3, [pc, #288]	; (1c54 <rsa_init+0x24c>)
    1b32:	681b      	ldr	r3, [r3, #0]
    1b34:	6818      	ldr	r0, [r3, #0]
    1b36:	4b44      	ldr	r3, [pc, #272]	; (1c48 <rsa_init+0x240>)
    1b38:	681b      	ldr	r3, [r3, #0]
    1b3a:	681b      	ldr	r3, [r3, #0]
    1b3c:	2288      	movs	r2, #136	; 0x88
    1b3e:	4619      	mov	r1, r3
    1b40:	f000 f99a 	bl	1e78 <__memcpy_veneer>
    1b44:	4b40      	ldr	r3, [pc, #256]	; (1c48 <rsa_init+0x240>)
    1b46:	681a      	ldr	r2, [r3, #0]
    1b48:	4b42      	ldr	r3, [pc, #264]	; (1c54 <rsa_init+0x24c>)
    1b4a:	681b      	ldr	r3, [r3, #0]
    1b4c:	6852      	ldr	r2, [r2, #4]
    1b4e:	605a      	str	r2, [r3, #4]
    1b50:	4b3d      	ldr	r3, [pc, #244]	; (1c48 <rsa_init+0x240>)
    1b52:	681a      	ldr	r2, [r3, #0]
    1b54:	4b3f      	ldr	r3, [pc, #252]	; (1c54 <rsa_init+0x24c>)
    1b56:	681b      	ldr	r3, [r3, #0]
    1b58:	6892      	ldr	r2, [r2, #8]
    1b5a:	609a      	str	r2, [r3, #8]
    BN_sub(p, bn_1, p_minus_1);
    1b5c:	4b3c      	ldr	r3, [pc, #240]	; (1c50 <rsa_init+0x248>)
    1b5e:	681b      	ldr	r3, [r3, #0]
    1b60:	4a3d      	ldr	r2, [pc, #244]	; (1c58 <rsa_init+0x250>)
    1b62:	6812      	ldr	r2, [r2, #0]
    1b64:	6839      	ldr	r1, [r7, #0]
    1b66:	4618      	mov	r0, r3
    1b68:	f7fe fc11 	bl	38e <BN_sub>
    BN_sub(q, bn_1, q_minus_1);
    1b6c:	4b39      	ldr	r3, [pc, #228]	; (1c54 <rsa_init+0x24c>)
    1b6e:	681b      	ldr	r3, [r3, #0]
    1b70:	4a3a      	ldr	r2, [pc, #232]	; (1c5c <rsa_init+0x254>)
    1b72:	6812      	ldr	r2, [r2, #0]
    1b74:	6839      	ldr	r1, [r7, #0]
    1b76:	4618      	mov	r0, r3
    1b78:	f7fe fc09 	bl	38e <BN_sub>
    for (int32_t i = 0; i != BIG_NUM_SIZE - 1; i++) {
    1b7c:	2300      	movs	r3, #0
    1b7e:	607b      	str	r3, [r7, #4]
    1b80:	e00e      	b.n	1ba0 <rsa_init+0x198>
        n->data[i] = 0xFFFFFFFFFFFFFFFF;
    1b82:	4b37      	ldr	r3, [pc, #220]	; (1c60 <rsa_init+0x258>)
    1b84:	681b      	ldr	r3, [r3, #0]
    1b86:	681a      	ldr	r2, [r3, #0]
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	00db      	lsls	r3, r3, #3
    1b8c:	18d1      	adds	r1, r2, r3
    1b8e:	f04f 32ff 	mov.w	r2, #4294967295
    1b92:	f04f 33ff 	mov.w	r3, #4294967295
    1b96:	e9c1 2300 	strd	r2, r3, [r1]
    for (int32_t i = 0; i != BIG_NUM_SIZE - 1; i++) {
    1b9a:	687b      	ldr	r3, [r7, #4]
    1b9c:	3301      	adds	r3, #1
    1b9e:	607b      	str	r3, [r7, #4]
    1ba0:	687b      	ldr	r3, [r7, #4]
    1ba2:	2b10      	cmp	r3, #16
    1ba4:	d1ed      	bne.n	1b82 <rsa_init+0x17a>
    n->uint64_length = BN_uint64_length(n);
    1ba6:	4b2e      	ldr	r3, [pc, #184]	; (1c60 <rsa_init+0x258>)
    1ba8:	681b      	ldr	r3, [r3, #0]
    1baa:	4618      	mov	r0, r3
    1bac:	f7fe fac4 	bl	138 <BN_uint64_length>
    1bb0:	4602      	mov	r2, r0
    1bb2:	4b2b      	ldr	r3, [pc, #172]	; (1c60 <rsa_init+0x258>)
    1bb4:	681b      	ldr	r3, [r3, #0]
    1bb6:	609a      	str	r2, [r3, #8]
    BN_mul(p, q, n, n);
    1bb8:	4b25      	ldr	r3, [pc, #148]	; (1c50 <rsa_init+0x248>)
    1bba:	6818      	ldr	r0, [r3, #0]
    1bbc:	4b25      	ldr	r3, [pc, #148]	; (1c54 <rsa_init+0x24c>)
    1bbe:	6819      	ldr	r1, [r3, #0]
    1bc0:	4b27      	ldr	r3, [pc, #156]	; (1c60 <rsa_init+0x258>)
    1bc2:	681a      	ldr	r2, [r3, #0]
    1bc4:	4b26      	ldr	r3, [pc, #152]	; (1c60 <rsa_init+0x258>)
    1bc6:	681b      	ldr	r3, [r3, #0]
    1bc8:	f7fe fec6 	bl	958 <BN_mul>
    BN_mul(p_minus_1, q_minus_1, n, phi);
    1bcc:	4b22      	ldr	r3, [pc, #136]	; (1c58 <rsa_init+0x250>)
    1bce:	6818      	ldr	r0, [r3, #0]
    1bd0:	4b22      	ldr	r3, [pc, #136]	; (1c5c <rsa_init+0x254>)
    1bd2:	6819      	ldr	r1, [r3, #0]
    1bd4:	4b22      	ldr	r3, [pc, #136]	; (1c60 <rsa_init+0x258>)
    1bd6:	681a      	ldr	r2, [r3, #0]
    1bd8:	4b22      	ldr	r3, [pc, #136]	; (1c64 <rsa_init+0x25c>)
    1bda:	681b      	ldr	r3, [r3, #0]
    1bdc:	f7fe febc 	bl	958 <BN_mul>
    BN_Extended_Euclid_Algorithm(e, phi, d);
    1be0:	4b18      	ldr	r3, [pc, #96]	; (1c44 <rsa_init+0x23c>)
    1be2:	681b      	ldr	r3, [r3, #0]
    1be4:	4a1f      	ldr	r2, [pc, #124]	; (1c64 <rsa_init+0x25c>)
    1be6:	6811      	ldr	r1, [r2, #0]
    1be8:	4a1f      	ldr	r2, [pc, #124]	; (1c68 <rsa_init+0x260>)
    1bea:	6812      	ldr	r2, [r2, #0]
    1bec:	4618      	mov	r0, r3
    1bee:	f7ff f9b8 	bl	f62 <BN_Extended_Euclid_Algorithm>
    BN_Extended_Euclid_Algorithm(e, p_minus_1, dP);
    1bf2:	4b14      	ldr	r3, [pc, #80]	; (1c44 <rsa_init+0x23c>)
    1bf4:	681b      	ldr	r3, [r3, #0]
    1bf6:	4a18      	ldr	r2, [pc, #96]	; (1c58 <rsa_init+0x250>)
    1bf8:	6811      	ldr	r1, [r2, #0]
    1bfa:	4a1c      	ldr	r2, [pc, #112]	; (1c6c <rsa_init+0x264>)
    1bfc:	6812      	ldr	r2, [r2, #0]
    1bfe:	4618      	mov	r0, r3
    1c00:	f7ff f9af 	bl	f62 <BN_Extended_Euclid_Algorithm>
    BN_Extended_Euclid_Algorithm(e, q_minus_1, dQ);
    1c04:	4b0f      	ldr	r3, [pc, #60]	; (1c44 <rsa_init+0x23c>)
    1c06:	681b      	ldr	r3, [r3, #0]
    1c08:	4a14      	ldr	r2, [pc, #80]	; (1c5c <rsa_init+0x254>)
    1c0a:	6811      	ldr	r1, [r2, #0]
    1c0c:	4a18      	ldr	r2, [pc, #96]	; (1c70 <rsa_init+0x268>)
    1c0e:	6812      	ldr	r2, [r2, #0]
    1c10:	4618      	mov	r0, r3
    1c12:	f7ff f9a6 	bl	f62 <BN_Extended_Euclid_Algorithm>
    BN_Extended_Euclid_Algorithm(q, p, qInv);
    1c16:	4b0f      	ldr	r3, [pc, #60]	; (1c54 <rsa_init+0x24c>)
    1c18:	681b      	ldr	r3, [r3, #0]
    1c1a:	4a0d      	ldr	r2, [pc, #52]	; (1c50 <rsa_init+0x248>)
    1c1c:	6811      	ldr	r1, [r2, #0]
    1c1e:	4a15      	ldr	r2, [pc, #84]	; (1c74 <rsa_init+0x26c>)
    1c20:	6812      	ldr	r2, [r2, #0]
    1c22:	4618      	mov	r0, r3
    1c24:	f7ff f99d 	bl	f62 <BN_Extended_Euclid_Algorithm>
    BN_DEL(bn_1);
    1c28:	683b      	ldr	r3, [r7, #0]
    1c2a:	681b      	ldr	r3, [r3, #0]
    1c2c:	4618      	mov	r0, r3
    1c2e:	f000 f903 	bl	1e38 <__free_veneer>
    1c32:	6838      	ldr	r0, [r7, #0]
    1c34:	f000 f900 	bl	1e38 <__free_veneer>
    return EXIT_SUCCESS;
    1c38:	2300      	movs	r3, #0
}
    1c3a:	4618      	mov	r0, r3
    1c3c:	3708      	adds	r7, #8
    1c3e:	46bd      	mov	sp, r7
    1c40:	bd80      	pop	{r7, pc}
    1c42:	bf00      	nop
    1c44:	2000076c 	.word	0x2000076c
    1c48:	20000758 	.word	0x20000758
    1c4c:	2000075c 	.word	0x2000075c
    1c50:	20000750 	.word	0x20000750
    1c54:	20000754 	.word	0x20000754
    1c58:	20000764 	.word	0x20000764
    1c5c:	20000768 	.word	0x20000768
    1c60:	20000770 	.word	0x20000770
    1c64:	20000760 	.word	0x20000760
    1c68:	20000774 	.word	0x20000774
    1c6c:	20000778 	.word	0x20000778
    1c70:	2000077c 	.word	0x2000077c
    1c74:	20000780 	.word	0x20000780

00001c78 <rsa_Encrypt>:
SECTION_FLASH int32_t rsa_Encrypt(const BN *bn_x, const BN *e, const BN *n, BN *bn_y) {
    1c78:	b580      	push	{r7, lr}
    1c7a:	b084      	sub	sp, #16
    1c7c:	af00      	add	r7, sp, #0
    1c7e:	60f8      	str	r0, [r7, #12]
    1c80:	60b9      	str	r1, [r7, #8]
    1c82:	607a      	str	r2, [r7, #4]
    1c84:	603b      	str	r3, [r7, #0]
    BN_pow_fast(bn_x, e, n, bn_y);
    1c86:	683b      	ldr	r3, [r7, #0]
    1c88:	687a      	ldr	r2, [r7, #4]
    1c8a:	68b9      	ldr	r1, [r7, #8]
    1c8c:	68f8      	ldr	r0, [r7, #12]
    1c8e:	f7fe ff79 	bl	b84 <BN_pow_fast>
    return EXIT_SUCCESS;
    1c92:	2300      	movs	r3, #0
}
    1c94:	4618      	mov	r0, r3
    1c96:	3710      	adds	r7, #16
    1c98:	46bd      	mov	sp, r7
    1c9a:	bd80      	pop	{r7, pc}

00001c9c <rsa_Decrypt>:
SECTION_FLASH int32_t rsa_Decrypt(const BN *bn_x, const BN *d, const BN *n, BN *bn_y) {
    1c9c:	b580      	push	{r7, lr}
    1c9e:	b088      	sub	sp, #32
    1ca0:	af00      	add	r7, sp, #0
    1ca2:	60f8      	str	r0, [r7, #12]
    1ca4:	60b9      	str	r1, [r7, #8]
    1ca6:	607a      	str	r2, [r7, #4]
    1ca8:	603b      	str	r3, [r7, #0]
    BN_NEW(m1);
    1caa:	2110      	movs	r1, #16
    1cac:	2001      	movs	r0, #1
    1cae:	f000 f8db 	bl	1e68 <__calloc_veneer>
    1cb2:	4603      	mov	r3, r0
    1cb4:	61fb      	str	r3, [r7, #28]
    1cb6:	2108      	movs	r1, #8
    1cb8:	2011      	movs	r0, #17
    1cba:	f000 f8d5 	bl	1e68 <__calloc_veneer>
    1cbe:	4603      	mov	r3, r0
    1cc0:	461a      	mov	r2, r3
    1cc2:	69fb      	ldr	r3, [r7, #28]
    1cc4:	601a      	str	r2, [r3, #0]
    BN_NEW(m2);
    1cc6:	2110      	movs	r1, #16
    1cc8:	2001      	movs	r0, #1
    1cca:	f000 f8cd 	bl	1e68 <__calloc_veneer>
    1cce:	4603      	mov	r3, r0
    1cd0:	61bb      	str	r3, [r7, #24]
    1cd2:	2108      	movs	r1, #8
    1cd4:	2011      	movs	r0, #17
    1cd6:	f000 f8c7 	bl	1e68 <__calloc_veneer>
    1cda:	4603      	mov	r3, r0
    1cdc:	461a      	mov	r2, r3
    1cde:	69bb      	ldr	r3, [r7, #24]
    1ce0:	601a      	str	r2, [r3, #0]
    BN_NEW(h);
    1ce2:	2110      	movs	r1, #16
    1ce4:	2001      	movs	r0, #1
    1ce6:	f000 f8bf 	bl	1e68 <__calloc_veneer>
    1cea:	4603      	mov	r3, r0
    1cec:	617b      	str	r3, [r7, #20]
    1cee:	2108      	movs	r1, #8
    1cf0:	2011      	movs	r0, #17
    1cf2:	f000 f8b9 	bl	1e68 <__calloc_veneer>
    1cf6:	4603      	mov	r3, r0
    1cf8:	461a      	mov	r2, r3
    1cfa:	697b      	ldr	r3, [r7, #20]
    1cfc:	601a      	str	r2, [r3, #0]
    BN_NEW(temp);
    1cfe:	2110      	movs	r1, #16
    1d00:	2001      	movs	r0, #1
    1d02:	f000 f8b1 	bl	1e68 <__calloc_veneer>
    1d06:	4603      	mov	r3, r0
    1d08:	613b      	str	r3, [r7, #16]
    1d0a:	2108      	movs	r1, #8
    1d0c:	2011      	movs	r0, #17
    1d0e:	f000 f8ab 	bl	1e68 <__calloc_veneer>
    1d12:	4603      	mov	r3, r0
    1d14:	461a      	mov	r2, r3
    1d16:	693b      	ldr	r3, [r7, #16]
    1d18:	601a      	str	r2, [r3, #0]
    BN_div_mod(bn_x, p, temp);
    1d1a:	4b3e      	ldr	r3, [pc, #248]	; (1e14 <rsa_Decrypt+0x178>)
    1d1c:	681b      	ldr	r3, [r3, #0]
    1d1e:	693a      	ldr	r2, [r7, #16]
    1d20:	4619      	mov	r1, r3
    1d22:	68f8      	ldr	r0, [r7, #12]
    1d24:	f7ff f897 	bl	e56 <BN_div_mod>
    BN_pow_fast(temp, dP, p, m1);
    1d28:	4b3b      	ldr	r3, [pc, #236]	; (1e18 <rsa_Decrypt+0x17c>)
    1d2a:	6819      	ldr	r1, [r3, #0]
    1d2c:	4b39      	ldr	r3, [pc, #228]	; (1e14 <rsa_Decrypt+0x178>)
    1d2e:	681a      	ldr	r2, [r3, #0]
    1d30:	69fb      	ldr	r3, [r7, #28]
    1d32:	6938      	ldr	r0, [r7, #16]
    1d34:	f7fe ff26 	bl	b84 <BN_pow_fast>
    BN_div_mod(bn_x, q, temp);
    1d38:	4b38      	ldr	r3, [pc, #224]	; (1e1c <rsa_Decrypt+0x180>)
    1d3a:	681b      	ldr	r3, [r3, #0]
    1d3c:	693a      	ldr	r2, [r7, #16]
    1d3e:	4619      	mov	r1, r3
    1d40:	68f8      	ldr	r0, [r7, #12]
    1d42:	f7ff f888 	bl	e56 <BN_div_mod>
    BN_pow_fast(temp, dQ, q, m2);
    1d46:	4b36      	ldr	r3, [pc, #216]	; (1e20 <rsa_Decrypt+0x184>)
    1d48:	6819      	ldr	r1, [r3, #0]
    1d4a:	4b34      	ldr	r3, [pc, #208]	; (1e1c <rsa_Decrypt+0x180>)
    1d4c:	681a      	ldr	r2, [r3, #0]
    1d4e:	69bb      	ldr	r3, [r7, #24]
    1d50:	6938      	ldr	r0, [r7, #16]
    1d52:	f7fe ff17 	bl	b84 <BN_pow_fast>
    if (1 == BN_cmp(m1, m2)) {
    1d56:	69b9      	ldr	r1, [r7, #24]
    1d58:	69f8      	ldr	r0, [r7, #28]
    1d5a:	f7fe fda5 	bl	8a8 <BN_cmp>
    1d5e:	4603      	mov	r3, r0
    1d60:	2b01      	cmp	r3, #1
    1d62:	d105      	bne.n	1d70 <rsa_Decrypt+0xd4>
        BN_sub(m1, m2, temp);
    1d64:	693a      	ldr	r2, [r7, #16]
    1d66:	69b9      	ldr	r1, [r7, #24]
    1d68:	69f8      	ldr	r0, [r7, #28]
    1d6a:	f7fe fb10 	bl	38e <BN_sub>
    1d6e:	e00b      	b.n	1d88 <rsa_Decrypt+0xec>
        BN_sub(m2, m1, temp);
    1d70:	693a      	ldr	r2, [r7, #16]
    1d72:	69f9      	ldr	r1, [r7, #28]
    1d74:	69b8      	ldr	r0, [r7, #24]
    1d76:	f7fe fb0a 	bl	38e <BN_sub>
        BN_sub(p, temp, temp);
    1d7a:	4b26      	ldr	r3, [pc, #152]	; (1e14 <rsa_Decrypt+0x178>)
    1d7c:	681b      	ldr	r3, [r3, #0]
    1d7e:	693a      	ldr	r2, [r7, #16]
    1d80:	6939      	ldr	r1, [r7, #16]
    1d82:	4618      	mov	r0, r3
    1d84:	f7fe fb03 	bl	38e <BN_sub>
    BN_mul(qInv, temp, p, h);
    1d88:	4b26      	ldr	r3, [pc, #152]	; (1e24 <rsa_Decrypt+0x188>)
    1d8a:	6818      	ldr	r0, [r3, #0]
    1d8c:	4b21      	ldr	r3, [pc, #132]	; (1e14 <rsa_Decrypt+0x178>)
    1d8e:	681a      	ldr	r2, [r3, #0]
    1d90:	697b      	ldr	r3, [r7, #20]
    1d92:	6939      	ldr	r1, [r7, #16]
    1d94:	f7fe fde0 	bl	958 <BN_mul>
    BN_mul(h, q, n, temp);
    1d98:	4b20      	ldr	r3, [pc, #128]	; (1e1c <rsa_Decrypt+0x180>)
    1d9a:	6819      	ldr	r1, [r3, #0]
    1d9c:	693b      	ldr	r3, [r7, #16]
    1d9e:	687a      	ldr	r2, [r7, #4]
    1da0:	6978      	ldr	r0, [r7, #20]
    1da2:	f7fe fdd9 	bl	958 <BN_mul>
    BN_add(temp, m2, bn_y);
    1da6:	683a      	ldr	r2, [r7, #0]
    1da8:	69b9      	ldr	r1, [r7, #24]
    1daa:	6938      	ldr	r0, [r7, #16]
    1dac:	f7fe fa52 	bl	254 <BN_add>
    if (1 == BN_cmp(bn_y, n)) {
    1db0:	6879      	ldr	r1, [r7, #4]
    1db2:	6838      	ldr	r0, [r7, #0]
    1db4:	f7fe fd78 	bl	8a8 <BN_cmp>
    1db8:	4603      	mov	r3, r0
    1dba:	2b01      	cmp	r3, #1
    1dbc:	d104      	bne.n	1dc8 <rsa_Decrypt+0x12c>
        BN_sub(bn_y, n, bn_y);
    1dbe:	683a      	ldr	r2, [r7, #0]
    1dc0:	6879      	ldr	r1, [r7, #4]
    1dc2:	6838      	ldr	r0, [r7, #0]
    1dc4:	f7fe fae3 	bl	38e <BN_sub>
    BN_DEL(m1);
    1dc8:	69fb      	ldr	r3, [r7, #28]
    1dca:	681b      	ldr	r3, [r3, #0]
    1dcc:	4618      	mov	r0, r3
    1dce:	f000 f833 	bl	1e38 <__free_veneer>
    1dd2:	69f8      	ldr	r0, [r7, #28]
    1dd4:	f000 f830 	bl	1e38 <__free_veneer>
    BN_DEL(m2);
    1dd8:	69bb      	ldr	r3, [r7, #24]
    1dda:	681b      	ldr	r3, [r3, #0]
    1ddc:	4618      	mov	r0, r3
    1dde:	f000 f82b 	bl	1e38 <__free_veneer>
    1de2:	69b8      	ldr	r0, [r7, #24]
    1de4:	f000 f828 	bl	1e38 <__free_veneer>
    BN_DEL(h);
    1de8:	697b      	ldr	r3, [r7, #20]
    1dea:	681b      	ldr	r3, [r3, #0]
    1dec:	4618      	mov	r0, r3
    1dee:	f000 f823 	bl	1e38 <__free_veneer>
    1df2:	6978      	ldr	r0, [r7, #20]
    1df4:	f000 f820 	bl	1e38 <__free_veneer>
    BN_DEL(temp);
    1df8:	693b      	ldr	r3, [r7, #16]
    1dfa:	681b      	ldr	r3, [r3, #0]
    1dfc:	4618      	mov	r0, r3
    1dfe:	f000 f81b 	bl	1e38 <__free_veneer>
    1e02:	6938      	ldr	r0, [r7, #16]
    1e04:	f000 f818 	bl	1e38 <__free_veneer>
    return EXIT_SUCCESS;
    1e08:	2300      	movs	r3, #0
}
    1e0a:	4618      	mov	r0, r3
    1e0c:	3720      	adds	r7, #32
    1e0e:	46bd      	mov	sp, r7
    1e10:	bd80      	pop	{r7, pc}
    1e12:	bf00      	nop
    1e14:	20000750 	.word	0x20000750
    1e18:	20000778 	.word	0x20000778
    1e1c:	20000754 	.word	0x20000754
    1e20:	2000077c 	.word	0x2000077c
    1e24:	20000780 	.word	0x20000780

00001e28 <__sprintf_veneer>:
    1e28:	f85f f000 	ldr.w	pc, [pc]	; 1e2c <__sprintf_veneer+0x4>
    1e2c:	0800e781 	.word	0x0800e781

00001e30 <__strtok_veneer>:
    1e30:	f85f f000 	ldr.w	pc, [pc]	; 1e34 <__strtok_veneer+0x4>
    1e34:	0800e869 	.word	0x0800e869

00001e38 <__free_veneer>:
    1e38:	f85f f000 	ldr.w	pc, [pc]	; 1e3c <__free_veneer+0x4>
    1e3c:	0800e445 	.word	0x0800e445

00001e40 <__HAL_RNG_GenerateRandomNumber_veneer>:
    1e40:	f85f f000 	ldr.w	pc, [pc]	; 1e44 <__HAL_RNG_GenerateRandomNumber_veneer+0x4>
    1e44:	0800887d 	.word	0x0800887d

00001e48 <__strtoull_veneer>:
    1e48:	f85f f000 	ldr.w	pc, [pc]	; 1e4c <__strtoull_veneer+0x4>
    1e4c:	0800ea51 	.word	0x0800ea51

00001e50 <__usart3_printf_veneer>:
    1e50:	f85f f000 	ldr.w	pc, [pc]	; 1e54 <__usart3_printf_veneer+0x4>
    1e54:	08001d9d 	.word	0x08001d9d

00001e58 <__rsa_set_prime_veneer>:
    1e58:	f85f f000 	ldr.w	pc, [pc]	; 1e5c <__rsa_set_prime_veneer+0x4>
    1e5c:	08001769 	.word	0x08001769

00001e60 <__strcat_veneer>:
    1e60:	f85f f000 	ldr.w	pc, [pc]	; 1e64 <__strcat_veneer+0x4>
    1e64:	0800e84b 	.word	0x0800e84b

00001e68 <__calloc_veneer>:
    1e68:	f85f f000 	ldr.w	pc, [pc]	; 1e6c <__calloc_veneer+0x4>
    1e6c:	0800e1dd 	.word	0x0800e1dd

00001e70 <__memcmp_veneer>:
    1e70:	f85f f000 	ldr.w	pc, [pc]	; 1e74 <__memcmp_veneer+0x4>
    1e74:	0800e455 	.word	0x0800e455

00001e78 <__memcpy_veneer>:
    1e78:	f85f f000 	ldr.w	pc, [pc]	; 1e7c <__memcpy_veneer+0x4>
    1e7c:	0800e475 	.word	0x0800e475

00001e80 <__memset_veneer>:
    1e80:	f85f f000 	ldr.w	pc, [pc]	; 1e84 <__memset_veneer+0x4>
    1e84:	0800e491 	.word	0x0800e491
